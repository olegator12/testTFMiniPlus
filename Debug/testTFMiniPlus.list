
testTFMiniPlus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000287c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002988  08002988  00012988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029b4  080029b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080029b4  080029b4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029b4  080029b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029b4  080029b4  000129b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029b8  080029b8  000129b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080029bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2000000c  080029c8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  080029c8  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c50  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001825  00000000  00000000  00027c85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  000294b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000638  00000000  00000000  00029b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017018  00000000  00000000  0002a1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000090f3  00000000  00000000  000411e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082123  00000000  00000000  0004a2d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc3f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019b8  00000000  00000000  000cc448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002970 	.word	0x08002970

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002970 	.word	0x08002970

0800014c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000152:	4b10      	ldr	r3, [pc, #64]	; (8000194 <MX_DMA_Init+0x48>)
 8000154:	695b      	ldr	r3, [r3, #20]
 8000156:	4a0f      	ldr	r2, [pc, #60]	; (8000194 <MX_DMA_Init+0x48>)
 8000158:	f043 0301 	orr.w	r3, r3, #1
 800015c:	6153      	str	r3, [r2, #20]
 800015e:	4b0d      	ldr	r3, [pc, #52]	; (8000194 <MX_DMA_Init+0x48>)
 8000160:	695b      	ldr	r3, [r3, #20]
 8000162:	f003 0301 	and.w	r3, r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	2100      	movs	r1, #0
 800016e:	200e      	movs	r0, #14
 8000170:	f000 fbc7 	bl	8000902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000174:	200e      	movs	r0, #14
 8000176:	f000 fbe0 	bl	800093a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800017a:	2200      	movs	r2, #0
 800017c:	2100      	movs	r1, #0
 800017e:	200f      	movs	r0, #15
 8000180:	f000 fbbf 	bl	8000902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000184:	200f      	movs	r0, #15
 8000186:	f000 fbd8 	bl	800093a <HAL_NVIC_EnableIRQ>

}
 800018a:	bf00      	nop
 800018c:	3708      	adds	r7, #8
 800018e:	46bd      	mov	sp, r7
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	40021000 	.word	0x40021000

08000198 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000198:	b480      	push	{r7}
 800019a:	b083      	sub	sp, #12
 800019c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800019e:	4b0e      	ldr	r3, [pc, #56]	; (80001d8 <MX_GPIO_Init+0x40>)
 80001a0:	699b      	ldr	r3, [r3, #24]
 80001a2:	4a0d      	ldr	r2, [pc, #52]	; (80001d8 <MX_GPIO_Init+0x40>)
 80001a4:	f043 0320 	orr.w	r3, r3, #32
 80001a8:	6193      	str	r3, [r2, #24]
 80001aa:	4b0b      	ldr	r3, [pc, #44]	; (80001d8 <MX_GPIO_Init+0x40>)
 80001ac:	699b      	ldr	r3, [r3, #24]
 80001ae:	f003 0320 	and.w	r3, r3, #32
 80001b2:	607b      	str	r3, [r7, #4]
 80001b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001b6:	4b08      	ldr	r3, [pc, #32]	; (80001d8 <MX_GPIO_Init+0x40>)
 80001b8:	699b      	ldr	r3, [r3, #24]
 80001ba:	4a07      	ldr	r2, [pc, #28]	; (80001d8 <MX_GPIO_Init+0x40>)
 80001bc:	f043 0304 	orr.w	r3, r3, #4
 80001c0:	6193      	str	r3, [r2, #24]
 80001c2:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <MX_GPIO_Init+0x40>)
 80001c4:	699b      	ldr	r3, [r3, #24]
 80001c6:	f003 0304 	and.w	r3, r3, #4
 80001ca:	603b      	str	r3, [r7, #0]
 80001cc:	683b      	ldr	r3, [r7, #0]

}
 80001ce:	bf00      	nop
 80001d0:	370c      	adds	r7, #12
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	40021000 	.word	0x40021000

080001dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e0:	f000 fa56 	bl	8000690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e4:	f000 f818 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e8:	f7ff ffd6 	bl	8000198 <MX_GPIO_Init>
  MX_DMA_Init();
 80001ec:	f7ff ffae 	bl	800014c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80001f0:	f000 f954 	bl	800049c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart1, g_usart1_rx_buf, USART_BUF_SIZE);
 80001f4:	2240      	movs	r2, #64	; 0x40
 80001f6:	4906      	ldr	r1, [pc, #24]	; (8000210 <main+0x34>)
 80001f8:	4806      	ldr	r0, [pc, #24]	; (8000214 <main+0x38>)
 80001fa:	f001 fc3f 	bl	8001a7c <HAL_UART_Receive_DMA>

  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80001fe:	4b05      	ldr	r3, [pc, #20]	; (8000214 <main+0x38>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	68da      	ldr	r2, [r3, #12]
 8000204:	4b03      	ldr	r3, [pc, #12]	; (8000214 <main+0x38>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	f042 0210 	orr.w	r2, r2, #16
 800020c:	60da      	str	r2, [r3, #12]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800020e:	e7fe      	b.n	800020e <main+0x32>
 8000210:	20000028 	.word	0x20000028
 8000214:	2000006c 	.word	0x2000006c

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b090      	sub	sp, #64	; 0x40
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0318 	add.w	r3, r7, #24
 8000222:	2228      	movs	r2, #40	; 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f002 fb9a 	bl	8002960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
 8000238:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800023a:	2301      	movs	r3, #1
 800023c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800023e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000242:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000244:	2300      	movs	r3, #0
 8000246:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000248:	2301      	movs	r3, #1
 800024a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024c:	2302      	movs	r3, #2
 800024e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000250:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000254:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000256:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800025a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025c:	f107 0318 	add.w	r3, r7, #24
 8000260:	4618      	mov	r0, r3
 8000262:	f000 ffab 	bl	80011bc <HAL_RCC_OscConfig>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800026c:	f000 f85e 	bl	800032c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000270:	230f      	movs	r3, #15
 8000272:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000274:	2302      	movs	r3, #2
 8000276:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000280:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2102      	movs	r1, #2
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fa18 	bl	80016c0 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000296:	f000 f849 	bl	800032c <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3740      	adds	r7, #64	; 0x40
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <USART1_RX_Proc>:

/* USER CODE BEGIN 4 */
uint16_t distance = 0;

void USART1_RX_Proc(uint8_t *buf, uint32_t len)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	6039      	str	r1, [r7, #0]
    uint32_t i = 0;
 80002ae:	2300      	movs	r3, #0
 80002b0:	60fb      	str	r3, [r7, #12]
    uint8_t chk_cal = 0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	72fb      	strb	r3, [r7, #11]
    uint16_t cordist = 0;
 80002b6:	2300      	movs	r3, #0
 80002b8:	813b      	strh	r3, [r7, #8]

    if(TFMINI_DATA_Len == len)
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	2b09      	cmp	r3, #9
 80002be:	d12d      	bne.n	800031c <USART1_RX_Proc+0x78>
    {
        if((TFMINT_DATA_HEAD == buf[0])&&(TFMINT_DATA_HEAD == buf[1]))
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	2b59      	cmp	r3, #89	; 0x59
 80002c6:	d129      	bne.n	800031c <USART1_RX_Proc+0x78>
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	3301      	adds	r3, #1
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	2b59      	cmp	r3, #89	; 0x59
 80002d0:	d124      	bne.n	800031c <USART1_RX_Proc+0x78>
        {
            for(i = 0; i < (TFMINI_DATA_Len - 1); i++)
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]
 80002d6:	e009      	b.n	80002ec <USART1_RX_Proc+0x48>
            {
                chk_cal += buf[i];
 80002d8:	687a      	ldr	r2, [r7, #4]
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	4413      	add	r3, r2
 80002de:	781a      	ldrb	r2, [r3, #0]
 80002e0:	7afb      	ldrb	r3, [r7, #11]
 80002e2:	4413      	add	r3, r2
 80002e4:	72fb      	strb	r3, [r7, #11]
            for(i = 0; i < (TFMINI_DATA_Len - 1); i++)
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	3301      	adds	r3, #1
 80002ea:	60fb      	str	r3, [r7, #12]
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	2b07      	cmp	r3, #7
 80002f0:	d9f2      	bls.n	80002d8 <USART1_RX_Proc+0x34>
            }

            if(chk_cal == buf[TFMINI_DATA_Len - 1])
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	3308      	adds	r3, #8
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	7afa      	ldrb	r2, [r7, #11]
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d10e      	bne.n	800031c <USART1_RX_Proc+0x78>
            {
                cordist = buf[2] | (buf[3] << 8);
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	3302      	adds	r3, #2
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	b21a      	sxth	r2, r3
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	3303      	adds	r3, #3
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	021b      	lsls	r3, r3, #8
 800030e:	b21b      	sxth	r3, r3
 8000310:	4313      	orrs	r3, r2
 8000312:	b21b      	sxth	r3, r3
 8000314:	813b      	strh	r3, [r7, #8]
                distance = cordist;
 8000316:	4a04      	ldr	r2, [pc, #16]	; (8000328 <USART1_RX_Proc+0x84>)
 8000318:	893b      	ldrh	r3, [r7, #8]
 800031a:	8013      	strh	r3, [r2, #0]
            }
        }
    }
}
 800031c:	bf00      	nop
 800031e:	3714      	adds	r7, #20
 8000320:	46bd      	mov	sp, r7
 8000322:	bc80      	pop	{r7}
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	20000068 	.word	0x20000068

0800032c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000330:	b672      	cpsid	i
}
 8000332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000334:	e7fe      	b.n	8000334 <Error_Handler+0x8>
	...

08000338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800033e:	4b15      	ldr	r3, [pc, #84]	; (8000394 <HAL_MspInit+0x5c>)
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	4a14      	ldr	r2, [pc, #80]	; (8000394 <HAL_MspInit+0x5c>)
 8000344:	f043 0301 	orr.w	r3, r3, #1
 8000348:	6193      	str	r3, [r2, #24]
 800034a:	4b12      	ldr	r3, [pc, #72]	; (8000394 <HAL_MspInit+0x5c>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	f003 0301 	and.w	r3, r3, #1
 8000352:	60bb      	str	r3, [r7, #8]
 8000354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000356:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <HAL_MspInit+0x5c>)
 8000358:	69db      	ldr	r3, [r3, #28]
 800035a:	4a0e      	ldr	r2, [pc, #56]	; (8000394 <HAL_MspInit+0x5c>)
 800035c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000360:	61d3      	str	r3, [r2, #28]
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <HAL_MspInit+0x5c>)
 8000364:	69db      	ldr	r3, [r3, #28]
 8000366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800036a:	607b      	str	r3, [r7, #4]
 800036c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800036e:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <HAL_MspInit+0x60>)
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800037a:	60fb      	str	r3, [r7, #12]
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	4a04      	ldr	r2, [pc, #16]	; (8000398 <HAL_MspInit+0x60>)
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800038a:	bf00      	nop
 800038c:	3714      	adds	r7, #20
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr
 8000394:	40021000 	.word	0x40021000
 8000398:	40010000 	.word	0x40010000

0800039c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003a0:	e7fe      	b.n	80003a0 <NMI_Handler+0x4>

080003a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003a2:	b480      	push	{r7}
 80003a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003a6:	e7fe      	b.n	80003a6 <HardFault_Handler+0x4>

080003a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003ac:	e7fe      	b.n	80003ac <MemManage_Handler+0x4>

080003ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ae:	b480      	push	{r7}
 80003b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003b2:	e7fe      	b.n	80003b2 <BusFault_Handler+0x4>

080003b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003b8:	e7fe      	b.n	80003b8 <UsageFault_Handler+0x4>

080003ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003ba:	b480      	push	{r7}
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003be:	bf00      	nop
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bc80      	pop	{r7}
 80003c4:	4770      	bx	lr

080003c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003c6:	b480      	push	{r7}
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bc80      	pop	{r7}
 80003d0:	4770      	bx	lr

080003d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003d6:	bf00      	nop
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr

080003de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003de:	b580      	push	{r7, lr}
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003e2:	f000 f99b 	bl	800071c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
	...

080003ec <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80003f0:	4802      	ldr	r0, [pc, #8]	; (80003fc <DMA1_Channel4_IRQHandler+0x10>)
 80003f2:	f000 fc2b 	bl	8000c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	200000f8 	.word	0x200000f8

08000400 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000404:	4802      	ldr	r0, [pc, #8]	; (8000410 <DMA1_Channel5_IRQHandler+0x10>)
 8000406:	f000 fc21 	bl	8000c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	200000b4 	.word	0x200000b4

08000414 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  uint32_t tmp = 0;
 800041a:	2300      	movs	r3, #0
 800041c:	607b      	str	r3, [r7, #4]

  if((__HAL_UART_GET_FLAG(&huart1,UART_FLAG_IDLE) != RESET))
 800041e:	4b19      	ldr	r3, [pc, #100]	; (8000484 <USART1_IRQHandler+0x70>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f003 0310 	and.w	r3, r3, #16
 8000428:	2b10      	cmp	r3, #16
 800042a:	d124      	bne.n	8000476 <USART1_IRQHandler+0x62>
  {
	__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 800042c:	2300      	movs	r3, #0
 800042e:	603b      	str	r3, [r7, #0]
 8000430:	4b14      	ldr	r3, [pc, #80]	; (8000484 <USART1_IRQHandler+0x70>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	603b      	str	r3, [r7, #0]
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <USART1_IRQHandler+0x70>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	685b      	ldr	r3, [r3, #4]
 800043e:	603b      	str	r3, [r7, #0]
 8000440:	683b      	ldr	r3, [r7, #0]

	tmp = huart1.Instance->SR;
 8000442:	4b10      	ldr	r3, [pc, #64]	; (8000484 <USART1_IRQHandler+0x70>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	607b      	str	r3, [r7, #4]
	tmp = huart1.Instance->DR;
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <USART1_IRQHandler+0x70>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	607b      	str	r3, [r7, #4]

	HAL_UART_DMAStop(&huart1);
 8000452:	480c      	ldr	r0, [pc, #48]	; (8000484 <USART1_IRQHandler+0x70>)
 8000454:	f001 fb37 	bl	8001ac6 <HAL_UART_DMAStop>

	tmp =  USART_BUF_SIZE - hdma_usart1_rx.Instance->CNDTR;
 8000458:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <USART1_IRQHandler+0x74>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000462:	607b      	str	r3, [r7, #4]
	HAL_UART_Receive_DMA(&huart1, g_usart1_rx_buf, USART_BUF_SIZE);
 8000464:	2240      	movs	r2, #64	; 0x40
 8000466:	4909      	ldr	r1, [pc, #36]	; (800048c <USART1_IRQHandler+0x78>)
 8000468:	4806      	ldr	r0, [pc, #24]	; (8000484 <USART1_IRQHandler+0x70>)
 800046a:	f001 fb07 	bl	8001a7c <HAL_UART_Receive_DMA>

	USART1_RX_Proc(g_usart1_rx_buf, tmp);
 800046e:	6879      	ldr	r1, [r7, #4]
 8000470:	4806      	ldr	r0, [pc, #24]	; (800048c <USART1_IRQHandler+0x78>)
 8000472:	f7ff ff17 	bl	80002a4 <USART1_RX_Proc>
  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000476:	4803      	ldr	r0, [pc, #12]	; (8000484 <USART1_IRQHandler+0x70>)
 8000478:	f001 fba4 	bl	8001bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800047c:	bf00      	nop
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	2000006c 	.word	0x2000006c
 8000488:	200000b4 	.word	0x200000b4
 800048c:	20000028 	.word	0x20000028

08000490 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr

0800049c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004a0:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004a2:	4a12      	ldr	r2, [pc, #72]	; (80004ec <MX_USART1_UART_Init+0x50>)
 80004a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004a6:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004ae:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004ba:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004c0:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004c2:	220c      	movs	r2, #12
 80004c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004c6:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004d2:	4805      	ldr	r0, [pc, #20]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004d4:	f001 fa82 	bl	80019dc <HAL_UART_Init>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004de:	f7ff ff25 	bl	800032c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	2000006c 	.word	0x2000006c
 80004ec:	40013800 	.word	0x40013800

080004f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b088      	sub	sp, #32
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a47      	ldr	r2, [pc, #284]	; (8000628 <HAL_UART_MspInit+0x138>)
 800050c:	4293      	cmp	r3, r2
 800050e:	f040 8086 	bne.w	800061e <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000512:	4b46      	ldr	r3, [pc, #280]	; (800062c <HAL_UART_MspInit+0x13c>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	4a45      	ldr	r2, [pc, #276]	; (800062c <HAL_UART_MspInit+0x13c>)
 8000518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800051c:	6193      	str	r3, [r2, #24]
 800051e:	4b43      	ldr	r3, [pc, #268]	; (800062c <HAL_UART_MspInit+0x13c>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	4b40      	ldr	r3, [pc, #256]	; (800062c <HAL_UART_MspInit+0x13c>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	4a3f      	ldr	r2, [pc, #252]	; (800062c <HAL_UART_MspInit+0x13c>)
 8000530:	f043 0304 	orr.w	r3, r3, #4
 8000534:	6193      	str	r3, [r2, #24]
 8000536:	4b3d      	ldr	r3, [pc, #244]	; (800062c <HAL_UART_MspInit+0x13c>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	f003 0304 	and.w	r3, r3, #4
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000542:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000546:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000548:	2302      	movs	r3, #2
 800054a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800054c:	2303      	movs	r3, #3
 800054e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000550:	f107 0310 	add.w	r3, r7, #16
 8000554:	4619      	mov	r1, r3
 8000556:	4836      	ldr	r0, [pc, #216]	; (8000630 <HAL_UART_MspInit+0x140>)
 8000558:	f000 fcac 	bl	8000eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800055c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000560:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	2300      	movs	r3, #0
 8000568:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056a:	f107 0310 	add.w	r3, r7, #16
 800056e:	4619      	mov	r1, r3
 8000570:	482f      	ldr	r0, [pc, #188]	; (8000630 <HAL_UART_MspInit+0x140>)
 8000572:	f000 fc9f 	bl	8000eb4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000576:	4b2f      	ldr	r3, [pc, #188]	; (8000634 <HAL_UART_MspInit+0x144>)
 8000578:	4a2f      	ldr	r2, [pc, #188]	; (8000638 <HAL_UART_MspInit+0x148>)
 800057a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800057c:	4b2d      	ldr	r3, [pc, #180]	; (8000634 <HAL_UART_MspInit+0x144>)
 800057e:	2200      	movs	r2, #0
 8000580:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000582:	4b2c      	ldr	r3, [pc, #176]	; (8000634 <HAL_UART_MspInit+0x144>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000588:	4b2a      	ldr	r3, [pc, #168]	; (8000634 <HAL_UART_MspInit+0x144>)
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800058e:	4b29      	ldr	r3, [pc, #164]	; (8000634 <HAL_UART_MspInit+0x144>)
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000594:	4b27      	ldr	r3, [pc, #156]	; (8000634 <HAL_UART_MspInit+0x144>)
 8000596:	2200      	movs	r2, #0
 8000598:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800059a:	4b26      	ldr	r3, [pc, #152]	; (8000634 <HAL_UART_MspInit+0x144>)
 800059c:	2200      	movs	r2, #0
 800059e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005a0:	4b24      	ldr	r3, [pc, #144]	; (8000634 <HAL_UART_MspInit+0x144>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80005a6:	4823      	ldr	r0, [pc, #140]	; (8000634 <HAL_UART_MspInit+0x144>)
 80005a8:	f000 f9e2 	bl	8000970 <HAL_DMA_Init>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80005b2:	f7ff febb 	bl	800032c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4a1e      	ldr	r2, [pc, #120]	; (8000634 <HAL_UART_MspInit+0x144>)
 80005ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80005bc:	4a1d      	ldr	r2, [pc, #116]	; (8000634 <HAL_UART_MspInit+0x144>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80005c2:	4b1e      	ldr	r3, [pc, #120]	; (800063c <HAL_UART_MspInit+0x14c>)
 80005c4:	4a1e      	ldr	r2, [pc, #120]	; (8000640 <HAL_UART_MspInit+0x150>)
 80005c6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005c8:	4b1c      	ldr	r3, [pc, #112]	; (800063c <HAL_UART_MspInit+0x14c>)
 80005ca:	2210      	movs	r2, #16
 80005cc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005ce:	4b1b      	ldr	r3, [pc, #108]	; (800063c <HAL_UART_MspInit+0x14c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80005d4:	4b19      	ldr	r3, [pc, #100]	; (800063c <HAL_UART_MspInit+0x14c>)
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005da:	4b18      	ldr	r3, [pc, #96]	; (800063c <HAL_UART_MspInit+0x14c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005e0:	4b16      	ldr	r3, [pc, #88]	; (800063c <HAL_UART_MspInit+0x14c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <HAL_UART_MspInit+0x14c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80005ec:	4b13      	ldr	r3, [pc, #76]	; (800063c <HAL_UART_MspInit+0x14c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80005f2:	4812      	ldr	r0, [pc, #72]	; (800063c <HAL_UART_MspInit+0x14c>)
 80005f4:	f000 f9bc 	bl	8000970 <HAL_DMA_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80005fe:	f7ff fe95 	bl	800032c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a0d      	ldr	r2, [pc, #52]	; (800063c <HAL_UART_MspInit+0x14c>)
 8000606:	639a      	str	r2, [r3, #56]	; 0x38
 8000608:	4a0c      	ldr	r2, [pc, #48]	; (800063c <HAL_UART_MspInit+0x14c>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	2100      	movs	r1, #0
 8000612:	2025      	movs	r0, #37	; 0x25
 8000614:	f000 f975 	bl	8000902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000618:	2025      	movs	r0, #37	; 0x25
 800061a:	f000 f98e 	bl	800093a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800061e:	bf00      	nop
 8000620:	3720      	adds	r7, #32
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40013800 	.word	0x40013800
 800062c:	40021000 	.word	0x40021000
 8000630:	40010800 	.word	0x40010800
 8000634:	200000b4 	.word	0x200000b4
 8000638:	40020058 	.word	0x40020058
 800063c:	200000f8 	.word	0x200000f8
 8000640:	40020044 	.word	0x40020044

08000644 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000644:	f7ff ff24 	bl	8000490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000648:	480b      	ldr	r0, [pc, #44]	; (8000678 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800064a:	490c      	ldr	r1, [pc, #48]	; (800067c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <LoopFillZerobss+0x16>)
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000650:	e002      	b.n	8000658 <LoopCopyDataInit>

08000652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000656:	3304      	adds	r3, #4

08000658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800065a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800065c:	d3f9      	bcc.n	8000652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800065e:	4a09      	ldr	r2, [pc, #36]	; (8000684 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000660:	4c09      	ldr	r4, [pc, #36]	; (8000688 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000664:	e001      	b.n	800066a <LoopFillZerobss>

08000666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000668:	3204      	adds	r2, #4

0800066a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800066a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800066c:	d3fb      	bcc.n	8000666 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800066e:	f002 f953 	bl	8002918 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000672:	f7ff fdb3 	bl	80001dc <main>
  bx lr
 8000676:	4770      	bx	lr
  ldr r0, =_sdata
 8000678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800067c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000680:	080029bc 	.word	0x080029bc
  ldr r2, =_sbss
 8000684:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000688:	20000140 	.word	0x20000140

0800068c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800068c:	e7fe      	b.n	800068c <ADC1_2_IRQHandler>
	...

08000690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <HAL_Init+0x28>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a07      	ldr	r2, [pc, #28]	; (80006b8 <HAL_Init+0x28>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a0:	2003      	movs	r0, #3
 80006a2:	f000 f923 	bl	80008ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006a6:	200f      	movs	r0, #15
 80006a8:	f000 f808 	bl	80006bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006ac:	f7ff fe44 	bl	8000338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006b0:	2300      	movs	r3, #0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40022000 	.word	0x40022000

080006bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_InitTick+0x54>)
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <HAL_InitTick+0x58>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	4619      	mov	r1, r3
 80006ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 f93b 	bl	8000956 <HAL_SYSTICK_Config>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006e6:	2301      	movs	r3, #1
 80006e8:	e00e      	b.n	8000708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b0f      	cmp	r3, #15
 80006ee:	d80a      	bhi.n	8000706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f0:	2200      	movs	r2, #0
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	f04f 30ff 	mov.w	r0, #4294967295
 80006f8:	f000 f903 	bl	8000902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006fc:	4a06      	ldr	r2, [pc, #24]	; (8000718 <HAL_InitTick+0x5c>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000702:	2300      	movs	r3, #0
 8000704:	e000      	b.n	8000708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000706:	2301      	movs	r3, #1
}
 8000708:	4618      	mov	r0, r3
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000000 	.word	0x20000000
 8000714:	20000008 	.word	0x20000008
 8000718:	20000004 	.word	0x20000004

0800071c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HAL_IncTick+0x1c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <HAL_IncTick+0x20>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4413      	add	r3, r2
 800072c:	4a03      	ldr	r2, [pc, #12]	; (800073c <HAL_IncTick+0x20>)
 800072e:	6013      	str	r3, [r2, #0]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	20000008 	.word	0x20000008
 800073c:	2000013c 	.word	0x2000013c

08000740 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return uwTick;
 8000744:	4b02      	ldr	r3, [pc, #8]	; (8000750 <HAL_GetTick+0x10>)
 8000746:	681b      	ldr	r3, [r3, #0]
}
 8000748:	4618      	mov	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	2000013c 	.word	0x2000013c

08000754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000770:	4013      	ands	r3, r2
 8000772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800077c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000786:	4a04      	ldr	r2, [pc, #16]	; (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	60d3      	str	r3, [r2, #12]
}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <__NVIC_GetPriorityGrouping+0x18>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	f003 0307 	and.w	r3, r3, #7
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	db0b      	blt.n	80007e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	f003 021f 	and.w	r2, r3, #31
 80007d0:	4906      	ldr	r1, [pc, #24]	; (80007ec <__NVIC_EnableIRQ+0x34>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	095b      	lsrs	r3, r3, #5
 80007d8:	2001      	movs	r0, #1
 80007da:	fa00 f202 	lsl.w	r2, r0, r2
 80007de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	e000e100 	.word	0xe000e100

080007f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000800:	2b00      	cmp	r3, #0
 8000802:	db0a      	blt.n	800081a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	b2da      	uxtb	r2, r3
 8000808:	490c      	ldr	r1, [pc, #48]	; (800083c <__NVIC_SetPriority+0x4c>)
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	0112      	lsls	r2, r2, #4
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	440b      	add	r3, r1
 8000814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000818:	e00a      	b.n	8000830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4908      	ldr	r1, [pc, #32]	; (8000840 <__NVIC_SetPriority+0x50>)
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	f003 030f 	and.w	r3, r3, #15
 8000826:	3b04      	subs	r3, #4
 8000828:	0112      	lsls	r2, r2, #4
 800082a:	b2d2      	uxtb	r2, r2
 800082c:	440b      	add	r3, r1
 800082e:	761a      	strb	r2, [r3, #24]
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000e100 	.word	0xe000e100
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000844:	b480      	push	{r7}
 8000846:	b089      	sub	sp, #36	; 0x24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	f1c3 0307 	rsb	r3, r3, #7
 800085e:	2b04      	cmp	r3, #4
 8000860:	bf28      	it	cs
 8000862:	2304      	movcs	r3, #4
 8000864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	3304      	adds	r3, #4
 800086a:	2b06      	cmp	r3, #6
 800086c:	d902      	bls.n	8000874 <NVIC_EncodePriority+0x30>
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3b03      	subs	r3, #3
 8000872:	e000      	b.n	8000876 <NVIC_EncodePriority+0x32>
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000878:	f04f 32ff 	mov.w	r2, #4294967295
 800087c:	69bb      	ldr	r3, [r7, #24]
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	43da      	mvns	r2, r3
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	401a      	ands	r2, r3
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800088c:	f04f 31ff 	mov.w	r1, #4294967295
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	fa01 f303 	lsl.w	r3, r1, r3
 8000896:	43d9      	mvns	r1, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800089c:	4313      	orrs	r3, r2
         );
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3724      	adds	r7, #36	; 0x24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008b8:	d301      	bcc.n	80008be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ba:	2301      	movs	r3, #1
 80008bc:	e00f      	b.n	80008de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <SysTick_Config+0x40>)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008c6:	210f      	movs	r1, #15
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295
 80008cc:	f7ff ff90 	bl	80007f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <SysTick_Config+0x40>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008d6:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <SysTick_Config+0x40>)
 80008d8:	2207      	movs	r2, #7
 80008da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	e000e010 	.word	0xe000e010

080008ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff ff2d 	bl	8000754 <__NVIC_SetPriorityGrouping>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000902:	b580      	push	{r7, lr}
 8000904:	b086      	sub	sp, #24
 8000906:	af00      	add	r7, sp, #0
 8000908:	4603      	mov	r3, r0
 800090a:	60b9      	str	r1, [r7, #8]
 800090c:	607a      	str	r2, [r7, #4]
 800090e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000914:	f7ff ff42 	bl	800079c <__NVIC_GetPriorityGrouping>
 8000918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	68b9      	ldr	r1, [r7, #8]
 800091e:	6978      	ldr	r0, [r7, #20]
 8000920:	f7ff ff90 	bl	8000844 <NVIC_EncodePriority>
 8000924:	4602      	mov	r2, r0
 8000926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff5f 	bl	80007f0 <__NVIC_SetPriority>
}
 8000932:	bf00      	nop
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	4603      	mov	r3, r0
 8000942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff35 	bl	80007b8 <__NVIC_EnableIRQ>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f7ff ffa2 	bl	80008a8 <SysTick_Config>
 8000964:	4603      	mov	r3, r0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d101      	bne.n	8000986 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e043      	b.n	8000a0e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	461a      	mov	r2, r3
 800098c:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <HAL_DMA_Init+0xa8>)
 800098e:	4413      	add	r3, r2
 8000990:	4a22      	ldr	r2, [pc, #136]	; (8000a1c <HAL_DMA_Init+0xac>)
 8000992:	fba2 2303 	umull	r2, r3, r2, r3
 8000996:	091b      	lsrs	r3, r3, #4
 8000998:	009a      	lsls	r2, r3, #2
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a1f      	ldr	r2, [pc, #124]	; (8000a20 <HAL_DMA_Init+0xb0>)
 80009a2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2202      	movs	r2, #2
 80009a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80009ba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80009be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80009c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	68db      	ldr	r3, [r3, #12]
 80009ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	695b      	ldr	r3, [r3, #20]
 80009da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80009e8:	68fa      	ldr	r2, [r7, #12]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2200      	movs	r2, #0
 80009fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2201      	movs	r2, #1
 8000a00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2200      	movs	r2, #0
 8000a08:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr
 8000a18:	bffdfff8 	.word	0xbffdfff8
 8000a1c:	cccccccd 	.word	0xcccccccd
 8000a20:	40020000 	.word	0x40020000

08000a24 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
 8000a30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a32:	2300      	movs	r3, #0
 8000a34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d101      	bne.n	8000a44 <HAL_DMA_Start_IT+0x20>
 8000a40:	2302      	movs	r3, #2
 8000a42:	e04b      	b.n	8000adc <HAL_DMA_Start_IT+0xb8>
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2201      	movs	r2, #1
 8000a48:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d13a      	bne.n	8000ace <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2200      	movs	r2, #0
 8000a64:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f022 0201 	bic.w	r2, r2, #1
 8000a74:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	68b9      	ldr	r1, [r7, #8]
 8000a7c:	68f8      	ldr	r0, [r7, #12]
 8000a7e:	f000 f9eb 	bl	8000e58 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d008      	beq.n	8000a9c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f042 020e 	orr.w	r2, r2, #14
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	e00f      	b.n	8000abc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f022 0204 	bic.w	r2, r2, #4
 8000aaa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f042 020a 	orr.w	r2, r2, #10
 8000aba:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f042 0201 	orr.w	r2, r2, #1
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	e005      	b.n	8000ada <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000aec:	2300      	movs	r3, #0
 8000aee:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d008      	beq.n	8000b0e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2204      	movs	r2, #4
 8000b00:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2200      	movs	r2, #0
 8000b06:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e020      	b.n	8000b50 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f022 020e 	bic.w	r2, r2, #14
 8000b1c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f022 0201 	bic.w	r2, r2, #1
 8000b2c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b36:	2101      	movs	r1, #1
 8000b38:	fa01 f202 	lsl.w	r2, r1, r2
 8000b3c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2201      	movs	r2, #1
 8000b42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
	...

08000b5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b64:	2300      	movs	r3, #0
 8000b66:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d005      	beq.n	8000b80 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2204      	movs	r2, #4
 8000b78:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	73fb      	strb	r3, [r7, #15]
 8000b7e:	e051      	b.n	8000c24 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f022 020e 	bic.w	r2, r2, #14
 8000b8e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f022 0201 	bic.w	r2, r2, #1
 8000b9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a22      	ldr	r2, [pc, #136]	; (8000c30 <HAL_DMA_Abort_IT+0xd4>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d029      	beq.n	8000bfe <HAL_DMA_Abort_IT+0xa2>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a21      	ldr	r2, [pc, #132]	; (8000c34 <HAL_DMA_Abort_IT+0xd8>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d022      	beq.n	8000bfa <HAL_DMA_Abort_IT+0x9e>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a1f      	ldr	r2, [pc, #124]	; (8000c38 <HAL_DMA_Abort_IT+0xdc>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d01a      	beq.n	8000bf4 <HAL_DMA_Abort_IT+0x98>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <HAL_DMA_Abort_IT+0xe0>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d012      	beq.n	8000bee <HAL_DMA_Abort_IT+0x92>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a1c      	ldr	r2, [pc, #112]	; (8000c40 <HAL_DMA_Abort_IT+0xe4>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d00a      	beq.n	8000be8 <HAL_DMA_Abort_IT+0x8c>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a1b      	ldr	r2, [pc, #108]	; (8000c44 <HAL_DMA_Abort_IT+0xe8>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d102      	bne.n	8000be2 <HAL_DMA_Abort_IT+0x86>
 8000bdc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000be0:	e00e      	b.n	8000c00 <HAL_DMA_Abort_IT+0xa4>
 8000be2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000be6:	e00b      	b.n	8000c00 <HAL_DMA_Abort_IT+0xa4>
 8000be8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bec:	e008      	b.n	8000c00 <HAL_DMA_Abort_IT+0xa4>
 8000bee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf2:	e005      	b.n	8000c00 <HAL_DMA_Abort_IT+0xa4>
 8000bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf8:	e002      	b.n	8000c00 <HAL_DMA_Abort_IT+0xa4>
 8000bfa:	2310      	movs	r3, #16
 8000bfc:	e000      	b.n	8000c00 <HAL_DMA_Abort_IT+0xa4>
 8000bfe:	2301      	movs	r3, #1
 8000c00:	4a11      	ldr	r2, [pc, #68]	; (8000c48 <HAL_DMA_Abort_IT+0xec>)
 8000c02:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2201      	movs	r2, #1
 8000c08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d003      	beq.n	8000c24 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	4798      	blx	r3
    } 
  }
  return status;
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40020008 	.word	0x40020008
 8000c34:	4002001c 	.word	0x4002001c
 8000c38:	40020030 	.word	0x40020030
 8000c3c:	40020044 	.word	0x40020044
 8000c40:	40020058 	.word	0x40020058
 8000c44:	4002006c 	.word	0x4002006c
 8000c48:	40020000 	.word	0x40020000

08000c4c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	2204      	movs	r2, #4
 8000c6a:	409a      	lsls	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d04f      	beq.n	8000d14 <HAL_DMA_IRQHandler+0xc8>
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	f003 0304 	and.w	r3, r3, #4
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d04a      	beq.n	8000d14 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f003 0320 	and.w	r3, r3, #32
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d107      	bne.n	8000c9c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f022 0204 	bic.w	r2, r2, #4
 8000c9a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a66      	ldr	r2, [pc, #408]	; (8000e3c <HAL_DMA_IRQHandler+0x1f0>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d029      	beq.n	8000cfa <HAL_DMA_IRQHandler+0xae>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a65      	ldr	r2, [pc, #404]	; (8000e40 <HAL_DMA_IRQHandler+0x1f4>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d022      	beq.n	8000cf6 <HAL_DMA_IRQHandler+0xaa>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a63      	ldr	r2, [pc, #396]	; (8000e44 <HAL_DMA_IRQHandler+0x1f8>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d01a      	beq.n	8000cf0 <HAL_DMA_IRQHandler+0xa4>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a62      	ldr	r2, [pc, #392]	; (8000e48 <HAL_DMA_IRQHandler+0x1fc>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d012      	beq.n	8000cea <HAL_DMA_IRQHandler+0x9e>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a60      	ldr	r2, [pc, #384]	; (8000e4c <HAL_DMA_IRQHandler+0x200>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d00a      	beq.n	8000ce4 <HAL_DMA_IRQHandler+0x98>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a5f      	ldr	r2, [pc, #380]	; (8000e50 <HAL_DMA_IRQHandler+0x204>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d102      	bne.n	8000cde <HAL_DMA_IRQHandler+0x92>
 8000cd8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cdc:	e00e      	b.n	8000cfc <HAL_DMA_IRQHandler+0xb0>
 8000cde:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000ce2:	e00b      	b.n	8000cfc <HAL_DMA_IRQHandler+0xb0>
 8000ce4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ce8:	e008      	b.n	8000cfc <HAL_DMA_IRQHandler+0xb0>
 8000cea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cee:	e005      	b.n	8000cfc <HAL_DMA_IRQHandler+0xb0>
 8000cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cf4:	e002      	b.n	8000cfc <HAL_DMA_IRQHandler+0xb0>
 8000cf6:	2340      	movs	r3, #64	; 0x40
 8000cf8:	e000      	b.n	8000cfc <HAL_DMA_IRQHandler+0xb0>
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	4a55      	ldr	r2, [pc, #340]	; (8000e54 <HAL_DMA_IRQHandler+0x208>)
 8000cfe:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f000 8094 	beq.w	8000e32 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000d12:	e08e      	b.n	8000e32 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	2202      	movs	r2, #2
 8000d1a:	409a      	lsls	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d056      	beq.n	8000dd2 <HAL_DMA_IRQHandler+0x186>
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d051      	beq.n	8000dd2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 0320 	and.w	r3, r3, #32
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d10b      	bne.n	8000d54 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f022 020a 	bic.w	r2, r2, #10
 8000d4a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a38      	ldr	r2, [pc, #224]	; (8000e3c <HAL_DMA_IRQHandler+0x1f0>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d029      	beq.n	8000db2 <HAL_DMA_IRQHandler+0x166>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a37      	ldr	r2, [pc, #220]	; (8000e40 <HAL_DMA_IRQHandler+0x1f4>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d022      	beq.n	8000dae <HAL_DMA_IRQHandler+0x162>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a35      	ldr	r2, [pc, #212]	; (8000e44 <HAL_DMA_IRQHandler+0x1f8>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d01a      	beq.n	8000da8 <HAL_DMA_IRQHandler+0x15c>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a34      	ldr	r2, [pc, #208]	; (8000e48 <HAL_DMA_IRQHandler+0x1fc>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d012      	beq.n	8000da2 <HAL_DMA_IRQHandler+0x156>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a32      	ldr	r2, [pc, #200]	; (8000e4c <HAL_DMA_IRQHandler+0x200>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d00a      	beq.n	8000d9c <HAL_DMA_IRQHandler+0x150>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a31      	ldr	r2, [pc, #196]	; (8000e50 <HAL_DMA_IRQHandler+0x204>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d102      	bne.n	8000d96 <HAL_DMA_IRQHandler+0x14a>
 8000d90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d94:	e00e      	b.n	8000db4 <HAL_DMA_IRQHandler+0x168>
 8000d96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d9a:	e00b      	b.n	8000db4 <HAL_DMA_IRQHandler+0x168>
 8000d9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000da0:	e008      	b.n	8000db4 <HAL_DMA_IRQHandler+0x168>
 8000da2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da6:	e005      	b.n	8000db4 <HAL_DMA_IRQHandler+0x168>
 8000da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dac:	e002      	b.n	8000db4 <HAL_DMA_IRQHandler+0x168>
 8000dae:	2320      	movs	r3, #32
 8000db0:	e000      	b.n	8000db4 <HAL_DMA_IRQHandler+0x168>
 8000db2:	2302      	movs	r3, #2
 8000db4:	4a27      	ldr	r2, [pc, #156]	; (8000e54 <HAL_DMA_IRQHandler+0x208>)
 8000db6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d034      	beq.n	8000e32 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000dd0:	e02f      	b.n	8000e32 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	2208      	movs	r2, #8
 8000dd8:	409a      	lsls	r2, r3
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d028      	beq.n	8000e34 <HAL_DMA_IRQHandler+0x1e8>
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	f003 0308 	and.w	r3, r3, #8
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d023      	beq.n	8000e34 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 020e 	bic.w	r2, r2, #14
 8000dfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e04:	2101      	movs	r1, #1
 8000e06:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2201      	movs	r2, #1
 8000e10:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2201      	movs	r2, #1
 8000e16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d004      	beq.n	8000e34 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	4798      	blx	r3
    }
  }
  return;
 8000e32:	bf00      	nop
 8000e34:	bf00      	nop
}
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40020008 	.word	0x40020008
 8000e40:	4002001c 	.word	0x4002001c
 8000e44:	40020030 	.word	0x40020030
 8000e48:	40020044 	.word	0x40020044
 8000e4c:	40020058 	.word	0x40020058
 8000e50:	4002006c 	.word	0x4002006c
 8000e54:	40020000 	.word	0x40020000

08000e58 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
 8000e64:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fa01 f202 	lsl.w	r2, r1, r2
 8000e74:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	683a      	ldr	r2, [r7, #0]
 8000e7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b10      	cmp	r3, #16
 8000e84:	d108      	bne.n	8000e98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	68ba      	ldr	r2, [r7, #8]
 8000e94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000e96:	e007      	b.n	8000ea8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	68ba      	ldr	r2, [r7, #8]
 8000e9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	60da      	str	r2, [r3, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
	...

08000eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b08b      	sub	sp, #44	; 0x2c
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec6:	e169      	b.n	800119c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	69fa      	ldr	r2, [r7, #28]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	f040 8158 	bne.w	8001196 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	4a9a      	ldr	r2, [pc, #616]	; (8001154 <HAL_GPIO_Init+0x2a0>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d05e      	beq.n	8000fae <HAL_GPIO_Init+0xfa>
 8000ef0:	4a98      	ldr	r2, [pc, #608]	; (8001154 <HAL_GPIO_Init+0x2a0>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d875      	bhi.n	8000fe2 <HAL_GPIO_Init+0x12e>
 8000ef6:	4a98      	ldr	r2, [pc, #608]	; (8001158 <HAL_GPIO_Init+0x2a4>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d058      	beq.n	8000fae <HAL_GPIO_Init+0xfa>
 8000efc:	4a96      	ldr	r2, [pc, #600]	; (8001158 <HAL_GPIO_Init+0x2a4>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d86f      	bhi.n	8000fe2 <HAL_GPIO_Init+0x12e>
 8000f02:	4a96      	ldr	r2, [pc, #600]	; (800115c <HAL_GPIO_Init+0x2a8>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d052      	beq.n	8000fae <HAL_GPIO_Init+0xfa>
 8000f08:	4a94      	ldr	r2, [pc, #592]	; (800115c <HAL_GPIO_Init+0x2a8>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d869      	bhi.n	8000fe2 <HAL_GPIO_Init+0x12e>
 8000f0e:	4a94      	ldr	r2, [pc, #592]	; (8001160 <HAL_GPIO_Init+0x2ac>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d04c      	beq.n	8000fae <HAL_GPIO_Init+0xfa>
 8000f14:	4a92      	ldr	r2, [pc, #584]	; (8001160 <HAL_GPIO_Init+0x2ac>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d863      	bhi.n	8000fe2 <HAL_GPIO_Init+0x12e>
 8000f1a:	4a92      	ldr	r2, [pc, #584]	; (8001164 <HAL_GPIO_Init+0x2b0>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d046      	beq.n	8000fae <HAL_GPIO_Init+0xfa>
 8000f20:	4a90      	ldr	r2, [pc, #576]	; (8001164 <HAL_GPIO_Init+0x2b0>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d85d      	bhi.n	8000fe2 <HAL_GPIO_Init+0x12e>
 8000f26:	2b12      	cmp	r3, #18
 8000f28:	d82a      	bhi.n	8000f80 <HAL_GPIO_Init+0xcc>
 8000f2a:	2b12      	cmp	r3, #18
 8000f2c:	d859      	bhi.n	8000fe2 <HAL_GPIO_Init+0x12e>
 8000f2e:	a201      	add	r2, pc, #4	; (adr r2, 8000f34 <HAL_GPIO_Init+0x80>)
 8000f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f34:	08000faf 	.word	0x08000faf
 8000f38:	08000f89 	.word	0x08000f89
 8000f3c:	08000f9b 	.word	0x08000f9b
 8000f40:	08000fdd 	.word	0x08000fdd
 8000f44:	08000fe3 	.word	0x08000fe3
 8000f48:	08000fe3 	.word	0x08000fe3
 8000f4c:	08000fe3 	.word	0x08000fe3
 8000f50:	08000fe3 	.word	0x08000fe3
 8000f54:	08000fe3 	.word	0x08000fe3
 8000f58:	08000fe3 	.word	0x08000fe3
 8000f5c:	08000fe3 	.word	0x08000fe3
 8000f60:	08000fe3 	.word	0x08000fe3
 8000f64:	08000fe3 	.word	0x08000fe3
 8000f68:	08000fe3 	.word	0x08000fe3
 8000f6c:	08000fe3 	.word	0x08000fe3
 8000f70:	08000fe3 	.word	0x08000fe3
 8000f74:	08000fe3 	.word	0x08000fe3
 8000f78:	08000f91 	.word	0x08000f91
 8000f7c:	08000fa5 	.word	0x08000fa5
 8000f80:	4a79      	ldr	r2, [pc, #484]	; (8001168 <HAL_GPIO_Init+0x2b4>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d013      	beq.n	8000fae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f86:	e02c      	b.n	8000fe2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	623b      	str	r3, [r7, #32]
          break;
 8000f8e:	e029      	b.n	8000fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	3304      	adds	r3, #4
 8000f96:	623b      	str	r3, [r7, #32]
          break;
 8000f98:	e024      	b.n	8000fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	3308      	adds	r3, #8
 8000fa0:	623b      	str	r3, [r7, #32]
          break;
 8000fa2:	e01f      	b.n	8000fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	330c      	adds	r3, #12
 8000faa:	623b      	str	r3, [r7, #32]
          break;
 8000fac:	e01a      	b.n	8000fe4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d102      	bne.n	8000fbc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	623b      	str	r3, [r7, #32]
          break;
 8000fba:	e013      	b.n	8000fe4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d105      	bne.n	8000fd0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fc4:	2308      	movs	r3, #8
 8000fc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69fa      	ldr	r2, [r7, #28]
 8000fcc:	611a      	str	r2, [r3, #16]
          break;
 8000fce:	e009      	b.n	8000fe4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fd0:	2308      	movs	r3, #8
 8000fd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	69fa      	ldr	r2, [r7, #28]
 8000fd8:	615a      	str	r2, [r3, #20]
          break;
 8000fda:	e003      	b.n	8000fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	623b      	str	r3, [r7, #32]
          break;
 8000fe0:	e000      	b.n	8000fe4 <HAL_GPIO_Init+0x130>
          break;
 8000fe2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	2bff      	cmp	r3, #255	; 0xff
 8000fe8:	d801      	bhi.n	8000fee <HAL_GPIO_Init+0x13a>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	e001      	b.n	8000ff2 <HAL_GPIO_Init+0x13e>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	2bff      	cmp	r3, #255	; 0xff
 8000ff8:	d802      	bhi.n	8001000 <HAL_GPIO_Init+0x14c>
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	e002      	b.n	8001006 <HAL_GPIO_Init+0x152>
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001002:	3b08      	subs	r3, #8
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	210f      	movs	r1, #15
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	fa01 f303 	lsl.w	r3, r1, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	401a      	ands	r2, r3
 8001018:	6a39      	ldr	r1, [r7, #32]
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	fa01 f303 	lsl.w	r3, r1, r3
 8001020:	431a      	orrs	r2, r3
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102e:	2b00      	cmp	r3, #0
 8001030:	f000 80b1 	beq.w	8001196 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001034:	4b4d      	ldr	r3, [pc, #308]	; (800116c <HAL_GPIO_Init+0x2b8>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	4a4c      	ldr	r2, [pc, #304]	; (800116c <HAL_GPIO_Init+0x2b8>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	6193      	str	r3, [r2, #24]
 8001040:	4b4a      	ldr	r3, [pc, #296]	; (800116c <HAL_GPIO_Init+0x2b8>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800104c:	4a48      	ldr	r2, [pc, #288]	; (8001170 <HAL_GPIO_Init+0x2bc>)
 800104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001050:	089b      	lsrs	r3, r3, #2
 8001052:	3302      	adds	r3, #2
 8001054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001058:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	220f      	movs	r2, #15
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	4013      	ands	r3, r2
 800106e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a40      	ldr	r2, [pc, #256]	; (8001174 <HAL_GPIO_Init+0x2c0>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d013      	beq.n	80010a0 <HAL_GPIO_Init+0x1ec>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a3f      	ldr	r2, [pc, #252]	; (8001178 <HAL_GPIO_Init+0x2c4>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d00d      	beq.n	800109c <HAL_GPIO_Init+0x1e8>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a3e      	ldr	r2, [pc, #248]	; (800117c <HAL_GPIO_Init+0x2c8>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d007      	beq.n	8001098 <HAL_GPIO_Init+0x1e4>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a3d      	ldr	r2, [pc, #244]	; (8001180 <HAL_GPIO_Init+0x2cc>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d101      	bne.n	8001094 <HAL_GPIO_Init+0x1e0>
 8001090:	2303      	movs	r3, #3
 8001092:	e006      	b.n	80010a2 <HAL_GPIO_Init+0x1ee>
 8001094:	2304      	movs	r3, #4
 8001096:	e004      	b.n	80010a2 <HAL_GPIO_Init+0x1ee>
 8001098:	2302      	movs	r3, #2
 800109a:	e002      	b.n	80010a2 <HAL_GPIO_Init+0x1ee>
 800109c:	2301      	movs	r3, #1
 800109e:	e000      	b.n	80010a2 <HAL_GPIO_Init+0x1ee>
 80010a0:	2300      	movs	r3, #0
 80010a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010a4:	f002 0203 	and.w	r2, r2, #3
 80010a8:	0092      	lsls	r2, r2, #2
 80010aa:	4093      	lsls	r3, r2
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010b2:	492f      	ldr	r1, [pc, #188]	; (8001170 <HAL_GPIO_Init+0x2bc>)
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	089b      	lsrs	r3, r3, #2
 80010b8:	3302      	adds	r3, #2
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d006      	beq.n	80010da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010cc:	4b2d      	ldr	r3, [pc, #180]	; (8001184 <HAL_GPIO_Init+0x2d0>)
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	492c      	ldr	r1, [pc, #176]	; (8001184 <HAL_GPIO_Init+0x2d0>)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	608b      	str	r3, [r1, #8]
 80010d8:	e006      	b.n	80010e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010da:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <HAL_GPIO_Init+0x2d0>)
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	4928      	ldr	r1, [pc, #160]	; (8001184 <HAL_GPIO_Init+0x2d0>)
 80010e4:	4013      	ands	r3, r2
 80010e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d006      	beq.n	8001102 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010f4:	4b23      	ldr	r3, [pc, #140]	; (8001184 <HAL_GPIO_Init+0x2d0>)
 80010f6:	68da      	ldr	r2, [r3, #12]
 80010f8:	4922      	ldr	r1, [pc, #136]	; (8001184 <HAL_GPIO_Init+0x2d0>)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	60cb      	str	r3, [r1, #12]
 8001100:	e006      	b.n	8001110 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001102:	4b20      	ldr	r3, [pc, #128]	; (8001184 <HAL_GPIO_Init+0x2d0>)
 8001104:	68da      	ldr	r2, [r3, #12]
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	43db      	mvns	r3, r3
 800110a:	491e      	ldr	r1, [pc, #120]	; (8001184 <HAL_GPIO_Init+0x2d0>)
 800110c:	4013      	ands	r3, r2
 800110e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d006      	beq.n	800112a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <HAL_GPIO_Init+0x2d0>)
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	4918      	ldr	r1, [pc, #96]	; (8001184 <HAL_GPIO_Init+0x2d0>)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	604b      	str	r3, [r1, #4]
 8001128:	e006      	b.n	8001138 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <HAL_GPIO_Init+0x2d0>)
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	43db      	mvns	r3, r3
 8001132:	4914      	ldr	r1, [pc, #80]	; (8001184 <HAL_GPIO_Init+0x2d0>)
 8001134:	4013      	ands	r3, r2
 8001136:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d021      	beq.n	8001188 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <HAL_GPIO_Init+0x2d0>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	490e      	ldr	r1, [pc, #56]	; (8001184 <HAL_GPIO_Init+0x2d0>)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	4313      	orrs	r3, r2
 800114e:	600b      	str	r3, [r1, #0]
 8001150:	e021      	b.n	8001196 <HAL_GPIO_Init+0x2e2>
 8001152:	bf00      	nop
 8001154:	10320000 	.word	0x10320000
 8001158:	10310000 	.word	0x10310000
 800115c:	10220000 	.word	0x10220000
 8001160:	10210000 	.word	0x10210000
 8001164:	10120000 	.word	0x10120000
 8001168:	10110000 	.word	0x10110000
 800116c:	40021000 	.word	0x40021000
 8001170:	40010000 	.word	0x40010000
 8001174:	40010800 	.word	0x40010800
 8001178:	40010c00 	.word	0x40010c00
 800117c:	40011000 	.word	0x40011000
 8001180:	40011400 	.word	0x40011400
 8001184:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <HAL_GPIO_Init+0x304>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	43db      	mvns	r3, r3
 8001190:	4909      	ldr	r1, [pc, #36]	; (80011b8 <HAL_GPIO_Init+0x304>)
 8001192:	4013      	ands	r3, r2
 8001194:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	3301      	adds	r3, #1
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	fa22 f303 	lsr.w	r3, r2, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f47f ae8e 	bne.w	8000ec8 <HAL_GPIO_Init+0x14>
  }
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	372c      	adds	r7, #44	; 0x2c
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	40010400 	.word	0x40010400

080011bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e272      	b.n	80016b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 8087 	beq.w	80012ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011dc:	4b92      	ldr	r3, [pc, #584]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 030c 	and.w	r3, r3, #12
 80011e4:	2b04      	cmp	r3, #4
 80011e6:	d00c      	beq.n	8001202 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011e8:	4b8f      	ldr	r3, [pc, #572]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 030c 	and.w	r3, r3, #12
 80011f0:	2b08      	cmp	r3, #8
 80011f2:	d112      	bne.n	800121a <HAL_RCC_OscConfig+0x5e>
 80011f4:	4b8c      	ldr	r3, [pc, #560]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001200:	d10b      	bne.n	800121a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001202:	4b89      	ldr	r3, [pc, #548]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d06c      	beq.n	80012e8 <HAL_RCC_OscConfig+0x12c>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d168      	bne.n	80012e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e24c      	b.n	80016b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001222:	d106      	bne.n	8001232 <HAL_RCC_OscConfig+0x76>
 8001224:	4b80      	ldr	r3, [pc, #512]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a7f      	ldr	r2, [pc, #508]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800122a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	e02e      	b.n	8001290 <HAL_RCC_OscConfig+0xd4>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10c      	bne.n	8001254 <HAL_RCC_OscConfig+0x98>
 800123a:	4b7b      	ldr	r3, [pc, #492]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a7a      	ldr	r2, [pc, #488]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	4b78      	ldr	r3, [pc, #480]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a77      	ldr	r2, [pc, #476]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800124c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	e01d      	b.n	8001290 <HAL_RCC_OscConfig+0xd4>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800125c:	d10c      	bne.n	8001278 <HAL_RCC_OscConfig+0xbc>
 800125e:	4b72      	ldr	r3, [pc, #456]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a71      	ldr	r2, [pc, #452]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	4b6f      	ldr	r3, [pc, #444]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a6e      	ldr	r2, [pc, #440]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e00b      	b.n	8001290 <HAL_RCC_OscConfig+0xd4>
 8001278:	4b6b      	ldr	r3, [pc, #428]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a6a      	ldr	r2, [pc, #424]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800127e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b68      	ldr	r3, [pc, #416]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a67      	ldr	r2, [pc, #412]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800128a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d013      	beq.n	80012c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001298:	f7ff fa52 	bl	8000740 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a0:	f7ff fa4e 	bl	8000740 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b64      	cmp	r3, #100	; 0x64
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e200      	b.n	80016b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b2:	4b5d      	ldr	r3, [pc, #372]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f0      	beq.n	80012a0 <HAL_RCC_OscConfig+0xe4>
 80012be:	e014      	b.n	80012ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fa3e 	bl	8000740 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c8:	f7ff fa3a 	bl	8000740 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b64      	cmp	r3, #100	; 0x64
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e1ec      	b.n	80016b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012da:	4b53      	ldr	r3, [pc, #332]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f0      	bne.n	80012c8 <HAL_RCC_OscConfig+0x10c>
 80012e6:	e000      	b.n	80012ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d063      	beq.n	80013be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012f6:	4b4c      	ldr	r3, [pc, #304]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 030c 	and.w	r3, r3, #12
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00b      	beq.n	800131a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001302:	4b49      	ldr	r3, [pc, #292]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 030c 	and.w	r3, r3, #12
 800130a:	2b08      	cmp	r3, #8
 800130c:	d11c      	bne.n	8001348 <HAL_RCC_OscConfig+0x18c>
 800130e:	4b46      	ldr	r3, [pc, #280]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d116      	bne.n	8001348 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131a:	4b43      	ldr	r3, [pc, #268]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d005      	beq.n	8001332 <HAL_RCC_OscConfig+0x176>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d001      	beq.n	8001332 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e1c0      	b.n	80016b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001332:	4b3d      	ldr	r3, [pc, #244]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	4939      	ldr	r1, [pc, #228]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001342:	4313      	orrs	r3, r2
 8001344:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001346:	e03a      	b.n	80013be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d020      	beq.n	8001392 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001350:	4b36      	ldr	r3, [pc, #216]	; (800142c <HAL_RCC_OscConfig+0x270>)
 8001352:	2201      	movs	r2, #1
 8001354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001356:	f7ff f9f3 	bl	8000740 <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800135e:	f7ff f9ef 	bl	8000740 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e1a1      	b.n	80016b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001370:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f0      	beq.n	800135e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137c:	4b2a      	ldr	r3, [pc, #168]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	4927      	ldr	r1, [pc, #156]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 800138c:	4313      	orrs	r3, r2
 800138e:	600b      	str	r3, [r1, #0]
 8001390:	e015      	b.n	80013be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001392:	4b26      	ldr	r3, [pc, #152]	; (800142c <HAL_RCC_OscConfig+0x270>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff f9d2 	bl	8000740 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a0:	f7ff f9ce 	bl	8000740 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e180      	b.n	80016b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b2:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d03a      	beq.n	8001440 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d019      	beq.n	8001406 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <HAL_RCC_OscConfig+0x274>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d8:	f7ff f9b2 	bl	8000740 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e0:	f7ff f9ae 	bl	8000740 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e160      	b.n	80016b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f0      	beq.n	80013e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013fe:	2001      	movs	r0, #1
 8001400:	f000 face 	bl	80019a0 <RCC_Delay>
 8001404:	e01c      	b.n	8001440 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <HAL_RCC_OscConfig+0x274>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140c:	f7ff f998 	bl	8000740 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001412:	e00f      	b.n	8001434 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001414:	f7ff f994 	bl	8000740 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d908      	bls.n	8001434 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e146      	b.n	80016b4 <HAL_RCC_OscConfig+0x4f8>
 8001426:	bf00      	nop
 8001428:	40021000 	.word	0x40021000
 800142c:	42420000 	.word	0x42420000
 8001430:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001434:	4b92      	ldr	r3, [pc, #584]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1e9      	bne.n	8001414 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 80a6 	beq.w	800159a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001452:	4b8b      	ldr	r3, [pc, #556]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10d      	bne.n	800147a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	4b88      	ldr	r3, [pc, #544]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	4a87      	ldr	r2, [pc, #540]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	61d3      	str	r3, [r2, #28]
 800146a:	4b85      	ldr	r3, [pc, #532]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001476:	2301      	movs	r3, #1
 8001478:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147a:	4b82      	ldr	r3, [pc, #520]	; (8001684 <HAL_RCC_OscConfig+0x4c8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001482:	2b00      	cmp	r3, #0
 8001484:	d118      	bne.n	80014b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001486:	4b7f      	ldr	r3, [pc, #508]	; (8001684 <HAL_RCC_OscConfig+0x4c8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a7e      	ldr	r2, [pc, #504]	; (8001684 <HAL_RCC_OscConfig+0x4c8>)
 800148c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001492:	f7ff f955 	bl	8000740 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800149a:	f7ff f951 	bl	8000740 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b64      	cmp	r3, #100	; 0x64
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e103      	b.n	80016b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ac:	4b75      	ldr	r3, [pc, #468]	; (8001684 <HAL_RCC_OscConfig+0x4c8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0f0      	beq.n	800149a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d106      	bne.n	80014ce <HAL_RCC_OscConfig+0x312>
 80014c0:	4b6f      	ldr	r3, [pc, #444]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	4a6e      	ldr	r2, [pc, #440]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	6213      	str	r3, [r2, #32]
 80014cc:	e02d      	b.n	800152a <HAL_RCC_OscConfig+0x36e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10c      	bne.n	80014f0 <HAL_RCC_OscConfig+0x334>
 80014d6:	4b6a      	ldr	r3, [pc, #424]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	4a69      	ldr	r2, [pc, #420]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 80014dc:	f023 0301 	bic.w	r3, r3, #1
 80014e0:	6213      	str	r3, [r2, #32]
 80014e2:	4b67      	ldr	r3, [pc, #412]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	4a66      	ldr	r2, [pc, #408]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	f023 0304 	bic.w	r3, r3, #4
 80014ec:	6213      	str	r3, [r2, #32]
 80014ee:	e01c      	b.n	800152a <HAL_RCC_OscConfig+0x36e>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	2b05      	cmp	r3, #5
 80014f6:	d10c      	bne.n	8001512 <HAL_RCC_OscConfig+0x356>
 80014f8:	4b61      	ldr	r3, [pc, #388]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	4a60      	ldr	r2, [pc, #384]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 80014fe:	f043 0304 	orr.w	r3, r3, #4
 8001502:	6213      	str	r3, [r2, #32]
 8001504:	4b5e      	ldr	r3, [pc, #376]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	4a5d      	ldr	r2, [pc, #372]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6213      	str	r3, [r2, #32]
 8001510:	e00b      	b.n	800152a <HAL_RCC_OscConfig+0x36e>
 8001512:	4b5b      	ldr	r3, [pc, #364]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	4a5a      	ldr	r2, [pc, #360]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 8001518:	f023 0301 	bic.w	r3, r3, #1
 800151c:	6213      	str	r3, [r2, #32]
 800151e:	4b58      	ldr	r3, [pc, #352]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	4a57      	ldr	r2, [pc, #348]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 8001524:	f023 0304 	bic.w	r3, r3, #4
 8001528:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d015      	beq.n	800155e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001532:	f7ff f905 	bl	8000740 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001538:	e00a      	b.n	8001550 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800153a:	f7ff f901 	bl	8000740 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	f241 3288 	movw	r2, #5000	; 0x1388
 8001548:	4293      	cmp	r3, r2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e0b1      	b.n	80016b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001550:	4b4b      	ldr	r3, [pc, #300]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0ee      	beq.n	800153a <HAL_RCC_OscConfig+0x37e>
 800155c:	e014      	b.n	8001588 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155e:	f7ff f8ef 	bl	8000740 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001564:	e00a      	b.n	800157c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001566:	f7ff f8eb 	bl	8000740 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	f241 3288 	movw	r2, #5000	; 0x1388
 8001574:	4293      	cmp	r3, r2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e09b      	b.n	80016b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800157c:	4b40      	ldr	r3, [pc, #256]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1ee      	bne.n	8001566 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001588:	7dfb      	ldrb	r3, [r7, #23]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d105      	bne.n	800159a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800158e:	4b3c      	ldr	r3, [pc, #240]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	4a3b      	ldr	r2, [pc, #236]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 8001594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001598:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 8087 	beq.w	80016b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015a4:	4b36      	ldr	r3, [pc, #216]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 030c 	and.w	r3, r3, #12
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	d061      	beq.n	8001674 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d146      	bne.n	8001646 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b8:	4b33      	ldr	r3, [pc, #204]	; (8001688 <HAL_RCC_OscConfig+0x4cc>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015be:	f7ff f8bf 	bl	8000740 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c6:	f7ff f8bb 	bl	8000740 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e06d      	b.n	80016b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d8:	4b29      	ldr	r3, [pc, #164]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1f0      	bne.n	80015c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ec:	d108      	bne.n	8001600 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015ee:	4b24      	ldr	r3, [pc, #144]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	4921      	ldr	r1, [pc, #132]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001600:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a19      	ldr	r1, [r3, #32]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	430b      	orrs	r3, r1
 8001612:	491b      	ldr	r1, [pc, #108]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 8001614:	4313      	orrs	r3, r2
 8001616:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001618:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <HAL_RCC_OscConfig+0x4cc>)
 800161a:	2201      	movs	r2, #1
 800161c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161e:	f7ff f88f 	bl	8000740 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001626:	f7ff f88b 	bl	8000740 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e03d      	b.n	80016b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0f0      	beq.n	8001626 <HAL_RCC_OscConfig+0x46a>
 8001644:	e035      	b.n	80016b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <HAL_RCC_OscConfig+0x4cc>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff f878 	bl	8000740 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001654:	f7ff f874 	bl	8000740 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e026      	b.n	80016b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_RCC_OscConfig+0x4c4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0x498>
 8001672:	e01e      	b.n	80016b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d107      	bne.n	800168c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e019      	b.n	80016b4 <HAL_RCC_OscConfig+0x4f8>
 8001680:	40021000 	.word	0x40021000
 8001684:	40007000 	.word	0x40007000
 8001688:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800168c:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <HAL_RCC_OscConfig+0x500>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	429a      	cmp	r2, r3
 800169e:	d106      	bne.n	80016ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d001      	beq.n	80016b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40021000 	.word	0x40021000

080016c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0d0      	b.n	8001876 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016d4:	4b6a      	ldr	r3, [pc, #424]	; (8001880 <HAL_RCC_ClockConfig+0x1c0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d910      	bls.n	8001704 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e2:	4b67      	ldr	r3, [pc, #412]	; (8001880 <HAL_RCC_ClockConfig+0x1c0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f023 0207 	bic.w	r2, r3, #7
 80016ea:	4965      	ldr	r1, [pc, #404]	; (8001880 <HAL_RCC_ClockConfig+0x1c0>)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f2:	4b63      	ldr	r3, [pc, #396]	; (8001880 <HAL_RCC_ClockConfig+0x1c0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d001      	beq.n	8001704 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0b8      	b.n	8001876 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d020      	beq.n	8001752 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800171c:	4b59      	ldr	r3, [pc, #356]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	4a58      	ldr	r2, [pc, #352]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 8001722:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001726:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001734:	4b53      	ldr	r3, [pc, #332]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	4a52      	ldr	r2, [pc, #328]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 800173a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800173e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001740:	4b50      	ldr	r3, [pc, #320]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	494d      	ldr	r1, [pc, #308]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 800174e:	4313      	orrs	r3, r2
 8001750:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d040      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d107      	bne.n	8001776 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001766:	4b47      	ldr	r3, [pc, #284]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d115      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e07f      	b.n	8001876 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d107      	bne.n	800178e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177e:	4b41      	ldr	r3, [pc, #260]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d109      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e073      	b.n	8001876 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178e:	4b3d      	ldr	r3, [pc, #244]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e06b      	b.n	8001876 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800179e:	4b39      	ldr	r3, [pc, #228]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f023 0203 	bic.w	r2, r3, #3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	4936      	ldr	r1, [pc, #216]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b0:	f7fe ffc6 	bl	8000740 <HAL_GetTick>
 80017b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b6:	e00a      	b.n	80017ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b8:	f7fe ffc2 	bl	8000740 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e053      	b.n	8001876 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ce:	4b2d      	ldr	r3, [pc, #180]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f003 020c 	and.w	r2, r3, #12
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	429a      	cmp	r2, r3
 80017de:	d1eb      	bne.n	80017b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017e0:	4b27      	ldr	r3, [pc, #156]	; (8001880 <HAL_RCC_ClockConfig+0x1c0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d210      	bcs.n	8001810 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ee:	4b24      	ldr	r3, [pc, #144]	; (8001880 <HAL_RCC_ClockConfig+0x1c0>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f023 0207 	bic.w	r2, r3, #7
 80017f6:	4922      	ldr	r1, [pc, #136]	; (8001880 <HAL_RCC_ClockConfig+0x1c0>)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fe:	4b20      	ldr	r3, [pc, #128]	; (8001880 <HAL_RCC_ClockConfig+0x1c0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d001      	beq.n	8001810 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e032      	b.n	8001876 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d008      	beq.n	800182e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800181c:	4b19      	ldr	r3, [pc, #100]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	4916      	ldr	r1, [pc, #88]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 800182a:	4313      	orrs	r3, r2
 800182c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d009      	beq.n	800184e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800183a:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	490e      	ldr	r1, [pc, #56]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	4313      	orrs	r3, r2
 800184c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800184e:	f000 f821 	bl	8001894 <HAL_RCC_GetSysClockFreq>
 8001852:	4602      	mov	r2, r0
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	490a      	ldr	r1, [pc, #40]	; (8001888 <HAL_RCC_ClockConfig+0x1c8>)
 8001860:	5ccb      	ldrb	r3, [r1, r3]
 8001862:	fa22 f303 	lsr.w	r3, r2, r3
 8001866:	4a09      	ldr	r2, [pc, #36]	; (800188c <HAL_RCC_ClockConfig+0x1cc>)
 8001868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <HAL_RCC_ClockConfig+0x1d0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe ff24 	bl	80006bc <HAL_InitTick>

  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40022000 	.word	0x40022000
 8001884:	40021000 	.word	0x40021000
 8001888:	08002988 	.word	0x08002988
 800188c:	20000000 	.word	0x20000000
 8001890:	20000004 	.word	0x20000004

08001894 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018ae:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <HAL_RCC_GetSysClockFreq+0x94>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 030c 	and.w	r3, r3, #12
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d002      	beq.n	80018c4 <HAL_RCC_GetSysClockFreq+0x30>
 80018be:	2b08      	cmp	r3, #8
 80018c0:	d003      	beq.n	80018ca <HAL_RCC_GetSysClockFreq+0x36>
 80018c2:	e027      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018c4:	4b19      	ldr	r3, [pc, #100]	; (800192c <HAL_RCC_GetSysClockFreq+0x98>)
 80018c6:	613b      	str	r3, [r7, #16]
      break;
 80018c8:	e027      	b.n	800191a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	0c9b      	lsrs	r3, r3, #18
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	4a17      	ldr	r2, [pc, #92]	; (8001930 <HAL_RCC_GetSysClockFreq+0x9c>)
 80018d4:	5cd3      	ldrb	r3, [r2, r3]
 80018d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d010      	beq.n	8001904 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018e2:	4b11      	ldr	r3, [pc, #68]	; (8001928 <HAL_RCC_GetSysClockFreq+0x94>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	0c5b      	lsrs	r3, r3, #17
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	4a11      	ldr	r2, [pc, #68]	; (8001934 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018ee:	5cd3      	ldrb	r3, [r2, r3]
 80018f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a0d      	ldr	r2, [pc, #52]	; (800192c <HAL_RCC_GetSysClockFreq+0x98>)
 80018f6:	fb03 f202 	mul.w	r2, r3, r2
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	e004      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a0c      	ldr	r2, [pc, #48]	; (8001938 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001908:	fb02 f303 	mul.w	r3, r2, r3
 800190c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	613b      	str	r3, [r7, #16]
      break;
 8001912:	e002      	b.n	800191a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_RCC_GetSysClockFreq+0x98>)
 8001916:	613b      	str	r3, [r7, #16]
      break;
 8001918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800191a:	693b      	ldr	r3, [r7, #16]
}
 800191c:	4618      	mov	r0, r3
 800191e:	371c      	adds	r7, #28
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000
 800192c:	007a1200 	.word	0x007a1200
 8001930:	080029a0 	.word	0x080029a0
 8001934:	080029b0 	.word	0x080029b0
 8001938:	003d0900 	.word	0x003d0900

0800193c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001940:	4b02      	ldr	r3, [pc, #8]	; (800194c <HAL_RCC_GetHCLKFreq+0x10>)
 8001942:	681b      	ldr	r3, [r3, #0]
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	20000000 	.word	0x20000000

08001950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001954:	f7ff fff2 	bl	800193c <HAL_RCC_GetHCLKFreq>
 8001958:	4602      	mov	r2, r0
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	0a1b      	lsrs	r3, r3, #8
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	4903      	ldr	r1, [pc, #12]	; (8001974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001966:	5ccb      	ldrb	r3, [r1, r3]
 8001968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800196c:	4618      	mov	r0, r3
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40021000 	.word	0x40021000
 8001974:	08002998 	.word	0x08002998

08001978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800197c:	f7ff ffde 	bl	800193c <HAL_RCC_GetHCLKFreq>
 8001980:	4602      	mov	r2, r0
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	0adb      	lsrs	r3, r3, #11
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	4903      	ldr	r1, [pc, #12]	; (800199c <HAL_RCC_GetPCLK2Freq+0x24>)
 800198e:	5ccb      	ldrb	r3, [r1, r3]
 8001990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001994:	4618      	mov	r0, r3
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40021000 	.word	0x40021000
 800199c:	08002998 	.word	0x08002998

080019a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019a8:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <RCC_Delay+0x34>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <RCC_Delay+0x38>)
 80019ae:	fba2 2303 	umull	r2, r3, r2, r3
 80019b2:	0a5b      	lsrs	r3, r3, #9
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	fb02 f303 	mul.w	r3, r2, r3
 80019ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019bc:	bf00      	nop
  }
  while (Delay --);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	1e5a      	subs	r2, r3, #1
 80019c2:	60fa      	str	r2, [r7, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1f9      	bne.n	80019bc <RCC_Delay+0x1c>
}
 80019c8:	bf00      	nop
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr
 80019d4:	20000000 	.word	0x20000000
 80019d8:	10624dd3 	.word	0x10624dd3

080019dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e042      	b.n	8001a74 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d106      	bne.n	8001a08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7fe fd74 	bl	80004f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2224      	movs	r2, #36	; 0x24
 8001a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 feeb 	bl	80027fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	691a      	ldr	r2, [r3, #16]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	695a      	ldr	r2, [r3, #20]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2220      	movs	r2, #32
 8001a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	4613      	mov	r3, r2
 8001a88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b20      	cmp	r3, #32
 8001a94:	d112      	bne.n	8001abc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d002      	beq.n	8001aa2 <HAL_UART_Receive_DMA+0x26>
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00b      	b.n	8001abe <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001aac:	88fb      	ldrh	r3, [r7, #6]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f000 fc46 	bl	8002344 <UART_Start_Receive_DMA>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	e000      	b.n	8001abe <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001abc:	2302      	movs	r3, #2
  }
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b090      	sub	sp, #64	; 0x40
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	bf14      	ite	ne
 8001ae0:	2301      	movne	r3, #1
 8001ae2:	2300      	moveq	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b21      	cmp	r3, #33	; 0x21
 8001af2:	d128      	bne.n	8001b46 <HAL_UART_DMAStop+0x80>
 8001af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d025      	beq.n	8001b46 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	3314      	adds	r3, #20
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	e853 3f00 	ldrex	r3, [r3]
 8001b08:	623b      	str	r3, [r7, #32]
   return(result);
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b10:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	3314      	adds	r3, #20
 8001b18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b1a:	633a      	str	r2, [r7, #48]	; 0x30
 8001b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b22:	e841 2300 	strex	r3, r2, [r1]
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1e5      	bne.n	8001afa <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d004      	beq.n	8001b40 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe ffd2 	bl	8000ae4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 fc99 	bl	8002478 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	bf14      	ite	ne
 8001b54:	2301      	movne	r3, #1
 8001b56:	2300      	moveq	r3, #0
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b22      	cmp	r3, #34	; 0x22
 8001b66:	d128      	bne.n	8001bba <HAL_UART_DMAStop+0xf4>
 8001b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d025      	beq.n	8001bba <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	3314      	adds	r3, #20
 8001b74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	e853 3f00 	ldrex	r3, [r3]
 8001b7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b84:	637b      	str	r3, [r7, #52]	; 0x34
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	3314      	adds	r3, #20
 8001b8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b8e:	61fa      	str	r2, [r7, #28]
 8001b90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b92:	69b9      	ldr	r1, [r7, #24]
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	e841 2300 	strex	r3, r2, [r1]
 8001b9a:	617b      	str	r3, [r7, #20]
   return(result);
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1e5      	bne.n	8001b6e <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d004      	beq.n	8001bb4 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe ff98 	bl	8000ae4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 fc86 	bl	80024c6 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3740      	adds	r7, #64	; 0x40
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b0ba      	sub	sp, #232	; 0xe8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001c02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10f      	bne.n	8001c2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c0e:	f003 0320 	and.w	r3, r3, #32
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d009      	beq.n	8001c2a <HAL_UART_IRQHandler+0x66>
 8001c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c1a:	f003 0320 	and.w	r3, r3, #32
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 fd2c 	bl	8002680 <UART_Receive_IT>
      return;
 8001c28:	e25b      	b.n	80020e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001c2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 80de 	beq.w	8001df0 <HAL_UART_IRQHandler+0x22c>
 8001c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d106      	bne.n	8001c4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c44:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 80d1 	beq.w	8001df0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00b      	beq.n	8001c72 <HAL_UART_IRQHandler+0xae>
 8001c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d005      	beq.n	8001c72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	f043 0201 	orr.w	r2, r3, #1
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00b      	beq.n	8001c96 <HAL_UART_IRQHandler+0xd2>
 8001c7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	f043 0202 	orr.w	r2, r3, #2
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00b      	beq.n	8001cba <HAL_UART_IRQHandler+0xf6>
 8001ca2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d005      	beq.n	8001cba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	f043 0204 	orr.w	r2, r3, #4
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d011      	beq.n	8001cea <HAL_UART_IRQHandler+0x126>
 8001cc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cca:	f003 0320 	and.w	r3, r3, #32
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d105      	bne.n	8001cde <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001cd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d005      	beq.n	8001cea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f043 0208 	orr.w	r2, r3, #8
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 81f2 	beq.w	80020d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cf8:	f003 0320 	and.w	r3, r3, #32
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d008      	beq.n	8001d12 <HAL_UART_IRQHandler+0x14e>
 8001d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d04:	f003 0320 	and.w	r3, r3, #32
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d002      	beq.n	8001d12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 fcb7 	bl	8002680 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	bf14      	ite	ne
 8001d20:	2301      	movne	r3, #1
 8001d22:	2300      	moveq	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d103      	bne.n	8001d3e <HAL_UART_IRQHandler+0x17a>
 8001d36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d04f      	beq.n	8001dde <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 fbc1 	bl	80024c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d041      	beq.n	8001dd6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	3314      	adds	r3, #20
 8001d58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d60:	e853 3f00 	ldrex	r3, [r3]
 8001d64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001d68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	3314      	adds	r3, #20
 8001d7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001d7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001d82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001d8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001d8e:	e841 2300 	strex	r3, r2, [r1]
 8001d92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001d96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1d9      	bne.n	8001d52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d013      	beq.n	8001dce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001daa:	4a7e      	ldr	r2, [pc, #504]	; (8001fa4 <HAL_UART_IRQHandler+0x3e0>)
 8001dac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fed2 	bl	8000b5c <HAL_DMA_Abort_IT>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d016      	beq.n	8001dec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dcc:	e00e      	b.n	8001dec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f9a5 	bl	800211e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dd4:	e00a      	b.n	8001dec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f9a1 	bl	800211e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ddc:	e006      	b.n	8001dec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f99d 	bl	800211e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001dea:	e175      	b.n	80020d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dec:	bf00      	nop
    return;
 8001dee:	e173      	b.n	80020d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	f040 814f 	bne.w	8002098 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dfe:	f003 0310 	and.w	r3, r3, #16
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 8148 	beq.w	8002098 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e0c:	f003 0310 	and.w	r3, r3, #16
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 8141 	beq.w	8002098 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 80b6 	beq.w	8001fa8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001e48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 8145 	beq.w	80020dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001e56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	f080 813e 	bcs.w	80020dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001e66:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	2b20      	cmp	r3, #32
 8001e70:	f000 8088 	beq.w	8001f84 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	330c      	adds	r3, #12
 8001e7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e82:	e853 3f00 	ldrex	r3, [r3]
 8001e86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001e8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	330c      	adds	r3, #12
 8001e9c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001ea0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001ea4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ea8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001eac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001eb0:	e841 2300 	strex	r3, r2, [r1]
 8001eb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001eb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1d9      	bne.n	8001e74 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	3314      	adds	r3, #20
 8001ec6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ec8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eca:	e853 3f00 	ldrex	r3, [r3]
 8001ece:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001ed0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ed2:	f023 0301 	bic.w	r3, r3, #1
 8001ed6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	3314      	adds	r3, #20
 8001ee0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001ee4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001ee8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001eec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001ef0:	e841 2300 	strex	r3, r2, [r1]
 8001ef4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001ef6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1e1      	bne.n	8001ec0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	3314      	adds	r3, #20
 8001f02:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f06:	e853 3f00 	ldrex	r3, [r3]
 8001f0a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001f0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	3314      	adds	r3, #20
 8001f1c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001f20:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001f22:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f24:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001f26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001f28:	e841 2300 	strex	r3, r2, [r1]
 8001f2c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001f2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1e3      	bne.n	8001efc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2220      	movs	r2, #32
 8001f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	330c      	adds	r3, #12
 8001f48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f4c:	e853 3f00 	ldrex	r3, [r3]
 8001f50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f54:	f023 0310 	bic.w	r3, r3, #16
 8001f58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	330c      	adds	r3, #12
 8001f62:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001f66:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f68:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f6e:	e841 2300 	strex	r3, r2, [r1]
 8001f72:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1e3      	bne.n	8001f42 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe fdb0 	bl	8000ae4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	4619      	mov	r1, r3
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f8c8 	bl	8002130 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001fa0:	e09c      	b.n	80020dc <HAL_UART_IRQHandler+0x518>
 8001fa2:	bf00      	nop
 8001fa4:	0800258b 	.word	0x0800258b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 808e 	beq.w	80020e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001fc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 8089 	beq.w	80020e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	330c      	adds	r3, #12
 8001fd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fd8:	e853 3f00 	ldrex	r3, [r3]
 8001fdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001fe4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	330c      	adds	r3, #12
 8001fee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001ff2:	647a      	str	r2, [r7, #68]	; 0x44
 8001ff4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ff6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001ff8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ffa:	e841 2300 	strex	r3, r2, [r1]
 8001ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1e3      	bne.n	8001fce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	3314      	adds	r3, #20
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	e853 3f00 	ldrex	r3, [r3]
 8002014:	623b      	str	r3, [r7, #32]
   return(result);
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	3314      	adds	r3, #20
 8002026:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800202a:	633a      	str	r2, [r7, #48]	; 0x30
 800202c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800202e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002032:	e841 2300 	strex	r3, r2, [r1]
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1e3      	bne.n	8002006 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2220      	movs	r2, #32
 8002042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	330c      	adds	r3, #12
 8002052:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	e853 3f00 	ldrex	r3, [r3]
 800205a:	60fb      	str	r3, [r7, #12]
   return(result);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f023 0310 	bic.w	r3, r3, #16
 8002062:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	330c      	adds	r3, #12
 800206c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002070:	61fa      	str	r2, [r7, #28]
 8002072:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002074:	69b9      	ldr	r1, [r7, #24]
 8002076:	69fa      	ldr	r2, [r7, #28]
 8002078:	e841 2300 	strex	r3, r2, [r1]
 800207c:	617b      	str	r3, [r7, #20]
   return(result);
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1e3      	bne.n	800204c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2202      	movs	r2, #2
 8002088:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800208a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800208e:	4619      	mov	r1, r3
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f84d 	bl	8002130 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002096:	e023      	b.n	80020e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800209c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d009      	beq.n	80020b8 <HAL_UART_IRQHandler+0x4f4>
 80020a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 fa7e 	bl	80025b2 <UART_Transmit_IT>
    return;
 80020b6:	e014      	b.n	80020e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80020b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00e      	beq.n	80020e2 <HAL_UART_IRQHandler+0x51e>
 80020c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d008      	beq.n	80020e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 fabd 	bl	8002650 <UART_EndTransmit_IT>
    return;
 80020d6:	e004      	b.n	80020e2 <HAL_UART_IRQHandler+0x51e>
    return;
 80020d8:	bf00      	nop
 80020da:	e002      	b.n	80020e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80020dc:	bf00      	nop
 80020de:	e000      	b.n	80020e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80020e0:	bf00      	nop
  }
}
 80020e2:	37e8      	adds	r7, #232	; 0xe8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr

080020fa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr

0800210c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr

0800211e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr

08002130 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr

08002146 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b09c      	sub	sp, #112	; 0x70
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0320 	and.w	r3, r3, #32
 800215e:	2b00      	cmp	r3, #0
 8002160:	d172      	bne.n	8002248 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002164:	2200      	movs	r2, #0
 8002166:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	330c      	adds	r3, #12
 800216e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002172:	e853 3f00 	ldrex	r3, [r3]
 8002176:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800217a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800217e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	330c      	adds	r3, #12
 8002186:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002188:	65ba      	str	r2, [r7, #88]	; 0x58
 800218a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800218c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800218e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002190:	e841 2300 	strex	r3, r2, [r1]
 8002194:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1e5      	bne.n	8002168 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800219c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	3314      	adds	r3, #20
 80021a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a6:	e853 3f00 	ldrex	r3, [r3]
 80021aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80021ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ae:	f023 0301 	bic.w	r3, r3, #1
 80021b2:	667b      	str	r3, [r7, #100]	; 0x64
 80021b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	3314      	adds	r3, #20
 80021ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80021bc:	647a      	str	r2, [r7, #68]	; 0x44
 80021be:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80021c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021c4:	e841 2300 	strex	r3, r2, [r1]
 80021c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80021ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1e5      	bne.n	800219c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	3314      	adds	r3, #20
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	e853 3f00 	ldrex	r3, [r3]
 80021de:	623b      	str	r3, [r7, #32]
   return(result);
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021e6:	663b      	str	r3, [r7, #96]	; 0x60
 80021e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	3314      	adds	r3, #20
 80021ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021f0:	633a      	str	r2, [r7, #48]	; 0x30
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80021f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021f8:	e841 2300 	strex	r3, r2, [r1]
 80021fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80021fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1e5      	bne.n	80021d0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002206:	2220      	movs	r2, #32
 8002208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800220c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	2b01      	cmp	r3, #1
 8002212:	d119      	bne.n	8002248 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	330c      	adds	r3, #12
 800221a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	e853 3f00 	ldrex	r3, [r3]
 8002222:	60fb      	str	r3, [r7, #12]
   return(result);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f023 0310 	bic.w	r3, r3, #16
 800222a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800222c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	330c      	adds	r3, #12
 8002232:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002234:	61fa      	str	r2, [r7, #28]
 8002236:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002238:	69b9      	ldr	r1, [r7, #24]
 800223a:	69fa      	ldr	r2, [r7, #28]
 800223c:	e841 2300 	strex	r3, r2, [r1]
 8002240:	617b      	str	r3, [r7, #20]
   return(result);
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1e5      	bne.n	8002214 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800224a:	2200      	movs	r2, #0
 800224c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800224e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	2b01      	cmp	r3, #1
 8002254:	d106      	bne.n	8002264 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002258:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800225a:	4619      	mov	r1, r3
 800225c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800225e:	f7ff ff67 	bl	8002130 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002262:	e002      	b.n	800226a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002264:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002266:	f7ff ff48 	bl	80020fa <HAL_UART_RxCpltCallback>
}
 800226a:	bf00      	nop
 800226c:	3770      	adds	r7, #112	; 0x70
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b084      	sub	sp, #16
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2201      	movs	r2, #1
 8002284:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	2b01      	cmp	r3, #1
 800228c:	d108      	bne.n	80022a0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002292:	085b      	lsrs	r3, r3, #1
 8002294:	b29b      	uxth	r3, r3
 8002296:	4619      	mov	r1, r3
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f7ff ff49 	bl	8002130 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800229e:	e002      	b.n	80022a6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f7ff ff33 	bl	800210c <HAL_UART_RxHalfCpltCallback>
}
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b084      	sub	sp, #16
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	bf14      	ite	ne
 80022ce:	2301      	movne	r3, #1
 80022d0:	2300      	moveq	r3, #0
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b21      	cmp	r3, #33	; 0x21
 80022e0:	d108      	bne.n	80022f4 <UART_DMAError+0x46>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2200      	movs	r2, #0
 80022ec:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80022ee:	68b8      	ldr	r0, [r7, #8]
 80022f0:	f000 f8c2 	bl	8002478 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fe:	2b00      	cmp	r3, #0
 8002300:	bf14      	ite	ne
 8002302:	2301      	movne	r3, #1
 8002304:	2300      	moveq	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b22      	cmp	r3, #34	; 0x22
 8002314:	d108      	bne.n	8002328 <UART_DMAError+0x7a>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2200      	movs	r2, #0
 8002320:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002322:	68b8      	ldr	r0, [r7, #8]
 8002324:	f000 f8cf 	bl	80024c6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232c:	f043 0210 	orr.w	r2, r3, #16
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002334:	68b8      	ldr	r0, [r7, #8]
 8002336:	f7ff fef2 	bl	800211e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800233a:	bf00      	nop
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b098      	sub	sp, #96	; 0x60
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	4613      	mov	r3, r2
 8002350:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	88fa      	ldrh	r2, [r7, #6]
 800235c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2222      	movs	r2, #34	; 0x22
 8002368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002370:	4a3e      	ldr	r2, [pc, #248]	; (800246c <UART_Start_Receive_DMA+0x128>)
 8002372:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002378:	4a3d      	ldr	r2, [pc, #244]	; (8002470 <UART_Start_Receive_DMA+0x12c>)
 800237a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002380:	4a3c      	ldr	r2, [pc, #240]	; (8002474 <UART_Start_Receive_DMA+0x130>)
 8002382:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002388:	2200      	movs	r2, #0
 800238a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800238c:	f107 0308 	add.w	r3, r7, #8
 8002390:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	3304      	adds	r3, #4
 800239c:	4619      	mov	r1, r3
 800239e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	f7fe fb3e 	bl	8000a24 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80023a8:	2300      	movs	r3, #0
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d019      	beq.n	80023fa <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	330c      	adds	r3, #12
 80023cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023d0:	e853 3f00 	ldrex	r3, [r3]
 80023d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80023d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	330c      	adds	r3, #12
 80023e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023e6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80023e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80023ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023ee:	e841 2300 	strex	r3, r2, [r1]
 80023f2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80023f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1e5      	bne.n	80023c6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	3314      	adds	r3, #20
 8002400:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002404:	e853 3f00 	ldrex	r3, [r3]
 8002408:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800240a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	657b      	str	r3, [r7, #84]	; 0x54
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	3314      	adds	r3, #20
 8002418:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800241a:	63ba      	str	r2, [r7, #56]	; 0x38
 800241c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800241e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002420:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002422:	e841 2300 	strex	r3, r2, [r1]
 8002426:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1e5      	bne.n	80023fa <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	3314      	adds	r3, #20
 8002434:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	e853 3f00 	ldrex	r3, [r3]
 800243c:	617b      	str	r3, [r7, #20]
   return(result);
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002444:	653b      	str	r3, [r7, #80]	; 0x50
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3314      	adds	r3, #20
 800244c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800244e:	627a      	str	r2, [r7, #36]	; 0x24
 8002450:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002452:	6a39      	ldr	r1, [r7, #32]
 8002454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002456:	e841 2300 	strex	r3, r2, [r1]
 800245a:	61fb      	str	r3, [r7, #28]
   return(result);
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1e5      	bne.n	800242e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3760      	adds	r7, #96	; 0x60
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	08002147 	.word	0x08002147
 8002470:	08002273 	.word	0x08002273
 8002474:	080022af 	.word	0x080022af

08002478 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002478:	b480      	push	{r7}
 800247a:	b089      	sub	sp, #36	; 0x24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	330c      	adds	r3, #12
 8002486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	e853 3f00 	ldrex	r3, [r3]
 800248e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002496:	61fb      	str	r3, [r7, #28]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	330c      	adds	r3, #12
 800249e:	69fa      	ldr	r2, [r7, #28]
 80024a0:	61ba      	str	r2, [r7, #24]
 80024a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a4:	6979      	ldr	r1, [r7, #20]
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	e841 2300 	strex	r3, r2, [r1]
 80024ac:	613b      	str	r3, [r7, #16]
   return(result);
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1e5      	bne.n	8002480 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2220      	movs	r2, #32
 80024b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80024bc:	bf00      	nop
 80024be:	3724      	adds	r7, #36	; 0x24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr

080024c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b095      	sub	sp, #84	; 0x54
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	330c      	adds	r3, #12
 80024d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d8:	e853 3f00 	ldrex	r3, [r3]
 80024dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80024de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80024e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	330c      	adds	r3, #12
 80024ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024ee:	643a      	str	r2, [r7, #64]	; 0x40
 80024f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80024f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80024f6:	e841 2300 	strex	r3, r2, [r1]
 80024fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80024fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1e5      	bne.n	80024ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	3314      	adds	r3, #20
 8002508:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800250a:	6a3b      	ldr	r3, [r7, #32]
 800250c:	e853 3f00 	ldrex	r3, [r3]
 8002510:	61fb      	str	r3, [r7, #28]
   return(result);
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	f023 0301 	bic.w	r3, r3, #1
 8002518:	64bb      	str	r3, [r7, #72]	; 0x48
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	3314      	adds	r3, #20
 8002520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002522:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002524:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002526:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800252a:	e841 2300 	strex	r3, r2, [r1]
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1e5      	bne.n	8002502 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	2b01      	cmp	r3, #1
 800253c:	d119      	bne.n	8002572 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	330c      	adds	r3, #12
 8002544:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	e853 3f00 	ldrex	r3, [r3]
 800254c:	60bb      	str	r3, [r7, #8]
   return(result);
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	f023 0310 	bic.w	r3, r3, #16
 8002554:	647b      	str	r3, [r7, #68]	; 0x44
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	330c      	adds	r3, #12
 800255c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800255e:	61ba      	str	r2, [r7, #24]
 8002560:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002562:	6979      	ldr	r1, [r7, #20]
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	e841 2300 	strex	r3, r2, [r1]
 800256a:	613b      	str	r3, [r7, #16]
   return(result);
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1e5      	bne.n	800253e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2220      	movs	r2, #32
 8002576:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002580:	bf00      	nop
 8002582:	3754      	adds	r7, #84	; 0x54
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr

0800258a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b084      	sub	sp, #16
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f7ff fdba 	bl	800211e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b085      	sub	sp, #20
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b21      	cmp	r3, #33	; 0x21
 80025c4:	d13e      	bne.n	8002644 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ce:	d114      	bne.n	80025fa <UART_Transmit_IT+0x48>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d110      	bne.n	80025fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	461a      	mov	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	1c9a      	adds	r2, r3, #2
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	621a      	str	r2, [r3, #32]
 80025f8:	e008      	b.n	800260c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	1c59      	adds	r1, r3, #1
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6211      	str	r1, [r2, #32]
 8002604:	781a      	ldrb	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	b29b      	uxth	r3, r3
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	4619      	mov	r1, r3
 800261a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10f      	bne.n	8002640 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68da      	ldr	r2, [r3, #12]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800262e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800263e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	e000      	b.n	8002646 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002644:	2302      	movs	r3, #2
  }
}
 8002646:	4618      	mov	r0, r3
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr

08002650 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002666:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff fd39 	bl	80020e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08c      	sub	sp, #48	; 0x30
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b22      	cmp	r3, #34	; 0x22
 8002692:	f040 80ae 	bne.w	80027f2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800269e:	d117      	bne.n	80026d0 <UART_Receive_IT+0x50>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d113      	bne.n	80026d0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026be:	b29a      	uxth	r2, r3
 80026c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c8:	1c9a      	adds	r2, r3, #2
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	629a      	str	r2, [r3, #40]	; 0x28
 80026ce:	e026      	b.n	800271e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e2:	d007      	beq.n	80026f4 <UART_Receive_IT+0x74>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10a      	bne.n	8002702 <UART_Receive_IT+0x82>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d106      	bne.n	8002702 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fe:	701a      	strb	r2, [r3, #0]
 8002700:	e008      	b.n	8002714 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	b2db      	uxtb	r3, r3
 800270a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800270e:	b2da      	uxtb	r2, r3
 8002710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002712:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002722:	b29b      	uxth	r3, r3
 8002724:	3b01      	subs	r3, #1
 8002726:	b29b      	uxth	r3, r3
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	4619      	mov	r1, r3
 800272c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800272e:	2b00      	cmp	r3, #0
 8002730:	d15d      	bne.n	80027ee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68da      	ldr	r2, [r3, #12]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0220 	bic.w	r2, r2, #32
 8002740:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002750:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695a      	ldr	r2, [r3, #20]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0201 	bic.w	r2, r2, #1
 8002760:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2220      	movs	r2, #32
 8002766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002774:	2b01      	cmp	r3, #1
 8002776:	d135      	bne.n	80027e4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	330c      	adds	r3, #12
 8002784:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	e853 3f00 	ldrex	r3, [r3]
 800278c:	613b      	str	r3, [r7, #16]
   return(result);
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f023 0310 	bic.w	r3, r3, #16
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	330c      	adds	r3, #12
 800279c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279e:	623a      	str	r2, [r7, #32]
 80027a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a2:	69f9      	ldr	r1, [r7, #28]
 80027a4:	6a3a      	ldr	r2, [r7, #32]
 80027a6:	e841 2300 	strex	r3, r2, [r1]
 80027aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1e5      	bne.n	800277e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	2b10      	cmp	r3, #16
 80027be:	d10a      	bne.n	80027d6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027c0:	2300      	movs	r3, #0
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027da:	4619      	mov	r1, r3
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff fca7 	bl	8002130 <HAL_UARTEx_RxEventCallback>
 80027e2:	e002      	b.n	80027ea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff fc88 	bl	80020fa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	e002      	b.n	80027f4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	e000      	b.n	80027f4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80027f2:	2302      	movs	r3, #2
  }
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3730      	adds	r7, #48	; 0x30
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689a      	ldr	r2, [r3, #8]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	4313      	orrs	r3, r2
 800282a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002836:	f023 030c 	bic.w	r3, r3, #12
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6812      	ldr	r2, [r2, #0]
 800283e:	68b9      	ldr	r1, [r7, #8]
 8002840:	430b      	orrs	r3, r1
 8002842:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699a      	ldr	r2, [r3, #24]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a2c      	ldr	r2, [pc, #176]	; (8002910 <UART_SetConfig+0x114>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d103      	bne.n	800286c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002864:	f7ff f888 	bl	8001978 <HAL_RCC_GetPCLK2Freq>
 8002868:	60f8      	str	r0, [r7, #12]
 800286a:	e002      	b.n	8002872 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800286c:	f7ff f870 	bl	8001950 <HAL_RCC_GetPCLK1Freq>
 8002870:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	009a      	lsls	r2, r3, #2
 800287c:	441a      	add	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	fbb2 f3f3 	udiv	r3, r2, r3
 8002888:	4a22      	ldr	r2, [pc, #136]	; (8002914 <UART_SetConfig+0x118>)
 800288a:	fba2 2303 	umull	r2, r3, r2, r3
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	0119      	lsls	r1, r3, #4
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	009a      	lsls	r2, r3, #2
 800289c:	441a      	add	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80028a8:	4b1a      	ldr	r3, [pc, #104]	; (8002914 <UART_SetConfig+0x118>)
 80028aa:	fba3 0302 	umull	r0, r3, r3, r2
 80028ae:	095b      	lsrs	r3, r3, #5
 80028b0:	2064      	movs	r0, #100	; 0x64
 80028b2:	fb00 f303 	mul.w	r3, r0, r3
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	3332      	adds	r3, #50	; 0x32
 80028bc:	4a15      	ldr	r2, [pc, #84]	; (8002914 <UART_SetConfig+0x118>)
 80028be:	fba2 2303 	umull	r2, r3, r2, r3
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028c8:	4419      	add	r1, r3
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	009a      	lsls	r2, r3, #2
 80028d4:	441a      	add	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80028e0:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <UART_SetConfig+0x118>)
 80028e2:	fba3 0302 	umull	r0, r3, r3, r2
 80028e6:	095b      	lsrs	r3, r3, #5
 80028e8:	2064      	movs	r0, #100	; 0x64
 80028ea:	fb00 f303 	mul.w	r3, r0, r3
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	3332      	adds	r3, #50	; 0x32
 80028f4:	4a07      	ldr	r2, [pc, #28]	; (8002914 <UART_SetConfig+0x118>)
 80028f6:	fba2 2303 	umull	r2, r3, r2, r3
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	f003 020f 	and.w	r2, r3, #15
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	440a      	add	r2, r1
 8002906:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002908:	bf00      	nop
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40013800 	.word	0x40013800
 8002914:	51eb851f 	.word	0x51eb851f

08002918 <__libc_init_array>:
 8002918:	b570      	push	{r4, r5, r6, lr}
 800291a:	2600      	movs	r6, #0
 800291c:	4d0c      	ldr	r5, [pc, #48]	; (8002950 <__libc_init_array+0x38>)
 800291e:	4c0d      	ldr	r4, [pc, #52]	; (8002954 <__libc_init_array+0x3c>)
 8002920:	1b64      	subs	r4, r4, r5
 8002922:	10a4      	asrs	r4, r4, #2
 8002924:	42a6      	cmp	r6, r4
 8002926:	d109      	bne.n	800293c <__libc_init_array+0x24>
 8002928:	f000 f822 	bl	8002970 <_init>
 800292c:	2600      	movs	r6, #0
 800292e:	4d0a      	ldr	r5, [pc, #40]	; (8002958 <__libc_init_array+0x40>)
 8002930:	4c0a      	ldr	r4, [pc, #40]	; (800295c <__libc_init_array+0x44>)
 8002932:	1b64      	subs	r4, r4, r5
 8002934:	10a4      	asrs	r4, r4, #2
 8002936:	42a6      	cmp	r6, r4
 8002938:	d105      	bne.n	8002946 <__libc_init_array+0x2e>
 800293a:	bd70      	pop	{r4, r5, r6, pc}
 800293c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002940:	4798      	blx	r3
 8002942:	3601      	adds	r6, #1
 8002944:	e7ee      	b.n	8002924 <__libc_init_array+0xc>
 8002946:	f855 3b04 	ldr.w	r3, [r5], #4
 800294a:	4798      	blx	r3
 800294c:	3601      	adds	r6, #1
 800294e:	e7f2      	b.n	8002936 <__libc_init_array+0x1e>
 8002950:	080029b4 	.word	0x080029b4
 8002954:	080029b4 	.word	0x080029b4
 8002958:	080029b4 	.word	0x080029b4
 800295c:	080029b8 	.word	0x080029b8

08002960 <memset>:
 8002960:	4603      	mov	r3, r0
 8002962:	4402      	add	r2, r0
 8002964:	4293      	cmp	r3, r2
 8002966:	d100      	bne.n	800296a <memset+0xa>
 8002968:	4770      	bx	lr
 800296a:	f803 1b01 	strb.w	r1, [r3], #1
 800296e:	e7f9      	b.n	8002964 <memset+0x4>

08002970 <_init>:
 8002970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002972:	bf00      	nop
 8002974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002976:	bc08      	pop	{r3}
 8002978:	469e      	mov	lr, r3
 800297a:	4770      	bx	lr

0800297c <_fini>:
 800297c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800297e:	bf00      	nop
 8002980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002982:	bc08      	pop	{r3}
 8002984:	469e      	mov	lr, r3
 8002986:	4770      	bx	lr
