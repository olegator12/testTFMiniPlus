
testTFMiniPlus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f64  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08004070  08004070  00014070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800419c  0800419c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800419c  0800419c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800419c  0800419c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800419c  0800419c  0001419c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041a0  080041a0  000141a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080041a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000070  08004214  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08004214  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008754  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae2  00000000  00000000  000287ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  0002a2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000710  00000000  00000000  0002aaa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017dd4  00000000  00000000  0002b1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f49  00000000  00000000  00042f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083a27  00000000  00000000  0004ced5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d08fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000259c  00000000  00000000  000d094c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004058 	.word	0x08004058

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004058 	.word	0x08004058

0800014c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000152:	4b18      	ldr	r3, [pc, #96]	; (80001b4 <MX_DMA_Init+0x68>)
 8000154:	695b      	ldr	r3, [r3, #20]
 8000156:	4a17      	ldr	r2, [pc, #92]	; (80001b4 <MX_DMA_Init+0x68>)
 8000158:	f043 0301 	orr.w	r3, r3, #1
 800015c:	6153      	str	r3, [r2, #20]
 800015e:	4b15      	ldr	r3, [pc, #84]	; (80001b4 <MX_DMA_Init+0x68>)
 8000160:	695b      	ldr	r3, [r3, #20]
 8000162:	f003 0301 	and.w	r3, r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	2100      	movs	r1, #0
 800016e:	200e      	movs	r0, #14
 8000170:	f000 fe09 	bl	8000d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000174:	200e      	movs	r0, #14
 8000176:	f000 fe22 	bl	8000dbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800017a:	2200      	movs	r2, #0
 800017c:	2100      	movs	r1, #0
 800017e:	200f      	movs	r0, #15
 8000180:	f000 fe01 	bl	8000d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000184:	200f      	movs	r0, #15
 8000186:	f000 fe1a 	bl	8000dbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800018a:	2200      	movs	r2, #0
 800018c:	2100      	movs	r1, #0
 800018e:	2010      	movs	r0, #16
 8000190:	f000 fdf9 	bl	8000d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000194:	2010      	movs	r0, #16
 8000196:	f000 fe12 	bl	8000dbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800019a:	2200      	movs	r2, #0
 800019c:	2100      	movs	r1, #0
 800019e:	2011      	movs	r0, #17
 80001a0:	f000 fdf1 	bl	8000d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80001a4:	2011      	movs	r0, #17
 80001a6:	f000 fe0a 	bl	8000dbe <HAL_NVIC_EnableIRQ>

}
 80001aa:	bf00      	nop
 80001ac:	3708      	adds	r7, #8
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	40021000 	.word	0x40021000

080001b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001be:	4b0e      	ldr	r3, [pc, #56]	; (80001f8 <MX_GPIO_Init+0x40>)
 80001c0:	699b      	ldr	r3, [r3, #24]
 80001c2:	4a0d      	ldr	r2, [pc, #52]	; (80001f8 <MX_GPIO_Init+0x40>)
 80001c4:	f043 0320 	orr.w	r3, r3, #32
 80001c8:	6193      	str	r3, [r2, #24]
 80001ca:	4b0b      	ldr	r3, [pc, #44]	; (80001f8 <MX_GPIO_Init+0x40>)
 80001cc:	699b      	ldr	r3, [r3, #24]
 80001ce:	f003 0320 	and.w	r3, r3, #32
 80001d2:	607b      	str	r3, [r7, #4]
 80001d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001d6:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <MX_GPIO_Init+0x40>)
 80001d8:	699b      	ldr	r3, [r3, #24]
 80001da:	4a07      	ldr	r2, [pc, #28]	; (80001f8 <MX_GPIO_Init+0x40>)
 80001dc:	f043 0304 	orr.w	r3, r3, #4
 80001e0:	6193      	str	r3, [r2, #24]
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <MX_GPIO_Init+0x40>)
 80001e4:	699b      	ldr	r3, [r3, #24]
 80001e6:	f003 0304 	and.w	r3, r3, #4
 80001ea:	603b      	str	r3, [r7, #0]
 80001ec:	683b      	ldr	r3, [r7, #0]

}
 80001ee:	bf00      	nop
 80001f0:	370c      	adds	r7, #12
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr
 80001f8:	40021000 	.word	0x40021000

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 fc88 	bl	8000b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f844 	bl	8000290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f7ff ffd6 	bl	80001b8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800020c:	f000 fab8 	bl	8000780 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000210:	f7ff ff9c 	bl	800014c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000214:	f000 fab4 	bl	8000780 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000218:	f000 fadc 	bl	80007d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart1, g_usart1_rx_buf, USART_BUF_SIZE);
 800021c:	2240      	movs	r2, #64	; 0x40
 800021e:	4914      	ldr	r1, [pc, #80]	; (8000270 <main+0x74>)
 8000220:	4814      	ldr	r0, [pc, #80]	; (8000274 <main+0x78>)
 8000222:	f001 ff20 	bl	8002066 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2, g_usart2_rx_buf, USART_BUF_SIZE);
 8000226:	2240      	movs	r2, #64	; 0x40
 8000228:	4913      	ldr	r1, [pc, #76]	; (8000278 <main+0x7c>)
 800022a:	4814      	ldr	r0, [pc, #80]	; (800027c <main+0x80>)
 800022c:	f001 ff1b 	bl	8002066 <HAL_UART_Receive_DMA>

  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);    //UART_IT_IDLE
 8000230:	4b10      	ldr	r3, [pc, #64]	; (8000274 <main+0x78>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	68da      	ldr	r2, [r3, #12]
 8000236:	4b0f      	ldr	r3, [pc, #60]	; (8000274 <main+0x78>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f042 0210 	orr.w	r2, r2, #16
 800023e:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);    //UART_IT_IDLE
 8000240:	4b0e      	ldr	r3, [pc, #56]	; (800027c <main+0x80>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	68da      	ldr	r2, [r3, #12]
 8000246:	4b0d      	ldr	r3, [pc, #52]	; (800027c <main+0x80>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f042 0210 	orr.w	r2, r2, #16
 800024e:	60da      	str	r2, [r3, #12]

  printf("TFMini\r\n");
 8000250:	480b      	ldr	r0, [pc, #44]	; (8000280 <main+0x84>)
 8000252:	f002 ff7d 	bl	8003150 <puts>
  printf("USART_2_DOUT\r\n");
 8000256:	480b      	ldr	r0, [pc, #44]	; (8000284 <main+0x88>)
 8000258:	f002 ff7a 	bl	8003150 <puts>
  printf("Argement: 89Byte\r\n");
 800025c:	480a      	ldr	r0, [pc, #40]	; (8000288 <main+0x8c>)
 800025e:	f002 ff77 	bl	8003150 <puts>
  printf("dist > %d cm, PA8 set Low;\r\ndist <= %d cm, PA8 set High.\r\n", TFMINI_ACTION_DIST, TFMINI_ACTION_DIST);
 8000262:	22c8      	movs	r2, #200	; 0xc8
 8000264:	21c8      	movs	r1, #200	; 0xc8
 8000266:	4809      	ldr	r0, [pc, #36]	; (800028c <main+0x90>)
 8000268:	f002 feec 	bl	8003044 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800026c:	e7fe      	b.n	800026c <main+0x70>
 800026e:	bf00      	nop
 8000270:	2000008c 	.word	0x2000008c
 8000274:	20000110 	.word	0x20000110
 8000278:	200000cc 	.word	0x200000cc
 800027c:	20000158 	.word	0x20000158
 8000280:	08004070 	.word	0x08004070
 8000284:	08004078 	.word	0x08004078
 8000288:	08004088 	.word	0x08004088
 800028c:	0800409c 	.word	0x0800409c

08000290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b090      	sub	sp, #64	; 0x40
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	f107 0318 	add.w	r3, r7, #24
 800029a:	2228      	movs	r2, #40	; 0x28
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f002 fec8 	bl	8003034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
 80002b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002b2:	2301      	movs	r3, #1
 80002b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c0:	2301      	movs	r3, #1
 80002c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c4:	2302      	movs	r3, #2
 80002c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d4:	f107 0318 	add.w	r3, r7, #24
 80002d8:	4618      	mov	r0, r3
 80002da:	f001 f9e1 	bl	80016a0 <HAL_RCC_OscConfig>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002e4:	f000 f8a2 	bl	800042c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e8:	230f      	movs	r3, #15
 80002ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ec:	2302      	movs	r3, #2
 80002ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2102      	movs	r1, #2
 8000302:	4618      	mov	r0, r3
 8000304:	f001 fc4e 	bl	8001ba4 <HAL_RCC_ClockConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800030e:	f000 f88d 	bl	800042c <Error_Handler>
  }
}
 8000312:	bf00      	nop
 8000314:	3740      	adds	r7, #64	; 0x40
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <USART1_RX_Proc>:

/* USER CODE BEGIN 4 */
uint16_t distance = 0;
void USART1_RX_Proc(uint8_t *buf, uint32_t len)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	6039      	str	r1, [r7, #0]
	uint16_t cordist = 0;
 8000326:	2300      	movs	r3, #0
 8000328:	81fb      	strh	r3, [r7, #14]

	/*xxx.xx\r\n*/
	if((TFMINI_PIX_FLAG_END == (buf[len - 1] | (buf[len - 2] << 8))) \
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	3b01      	subs	r3, #1
 800032e:	687a      	ldr	r2, [r7, #4]
 8000330:	4413      	add	r3, r2
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	4619      	mov	r1, r3
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	3b02      	subs	r3, #2
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	4413      	add	r3, r2
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	021b      	lsls	r3, r3, #8
 8000342:	430b      	orrs	r3, r1
 8000344:	f640 520a 	movw	r2, #3338	; 0xd0a
 8000348:	4293      	cmp	r3, r2
 800034a:	d168      	bne.n	800041e <USART1_RX_Proc+0x102>
		&& (TFMINI_PIX_FLAG_DECPIONT == buf[len - 5]))
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	3b05      	subs	r3, #5
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	4413      	add	r3, r2
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b2e      	cmp	r3, #46	; 0x2e
 8000358:	d161      	bne.n	800041e <USART1_RX_Proc+0x102>
	{

		if(buf[0] == TFMINI_PIX_FLAG_NEG)   /*Negative, the amplitude value too low.*/
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	2b2d      	cmp	r3, #45	; 0x2d
 8000360:	d103      	bne.n	800036a <USART1_RX_Proc+0x4e>
		{
			cordist = 1200;
 8000362:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8000366:	81fb      	strh	r3, [r7, #14]
 8000368:	e03e      	b.n	80003e8 <USART1_RX_Proc+0xcc>
		}
		else
		{
			cordist = ((buf[len - 6] - ASCII_0) * 100) + ((buf[len - 4] - ASCII_0) * 10) + (buf[len - 3] - ASCII_0);
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	3b06      	subs	r3, #6
 800036e:	687a      	ldr	r2, [r7, #4]
 8000370:	4413      	add	r3, r2
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	3b30      	subs	r3, #48	; 0x30
 8000376:	b29b      	uxth	r3, r3
 8000378:	461a      	mov	r2, r3
 800037a:	0092      	lsls	r2, r2, #2
 800037c:	4413      	add	r3, r2
 800037e:	461a      	mov	r2, r3
 8000380:	0091      	lsls	r1, r2, #2
 8000382:	461a      	mov	r2, r3
 8000384:	460b      	mov	r3, r1
 8000386:	4413      	add	r3, r2
 8000388:	009b      	lsls	r3, r3, #2
 800038a:	b29a      	uxth	r2, r3
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	3b04      	subs	r3, #4
 8000390:	6879      	ldr	r1, [r7, #4]
 8000392:	440b      	add	r3, r1
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	3b30      	subs	r3, #48	; 0x30
 8000398:	b29b      	uxth	r3, r3
 800039a:	4619      	mov	r1, r3
 800039c:	0089      	lsls	r1, r1, #2
 800039e:	440b      	add	r3, r1
 80003a0:	005b      	lsls	r3, r3, #1
 80003a2:	b29b      	uxth	r3, r3
 80003a4:	4413      	add	r3, r2
 80003a6:	b29a      	uxth	r2, r3
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	3b03      	subs	r3, #3
 80003ac:	6879      	ldr	r1, [r7, #4]
 80003ae:	440b      	add	r3, r1
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	b29b      	uxth	r3, r3
 80003b4:	4413      	add	r3, r2
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	3b30      	subs	r3, #48	; 0x30
 80003ba:	81fb      	strh	r3, [r7, #14]
			cordist+= (len == 7) ? ((buf[len - 7] - ASCII_0) * 1000) : 0;
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	2b07      	cmp	r3, #7
 80003c0:	d10e      	bne.n	80003e0 <USART1_RX_Proc+0xc4>
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	3b07      	subs	r3, #7
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	4413      	add	r3, r2
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	3b30      	subs	r3, #48	; 0x30
 80003ce:	b29b      	uxth	r3, r3
 80003d0:	461a      	mov	r2, r3
 80003d2:	0152      	lsls	r2, r2, #5
 80003d4:	1ad2      	subs	r2, r2, r3
 80003d6:	0092      	lsls	r2, r2, #2
 80003d8:	4413      	add	r3, r2
 80003da:	00db      	lsls	r3, r3, #3
 80003dc:	b29b      	uxth	r3, r3
 80003de:	e000      	b.n	80003e2 <USART1_RX_Proc+0xc6>
 80003e0:	2300      	movs	r3, #0
 80003e2:	89fa      	ldrh	r2, [r7, #14]
 80003e4:	4413      	add	r3, r2
 80003e6:	81fb      	strh	r3, [r7, #14]
		}

		/*cordist > TFMINI_ACTION_DIST cm, PA8 set Low;
		  cordist <= TFMINI_ACTION_DIST cm, PA8 set High.*/
		if(HAL_GPIO_ReadPin(GPIOA, RX1_Pin) != GPIO_PIN_RESET)
 80003e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ec:	480e      	ldr	r0, [pc, #56]	; (8000428 <USART1_RX_Proc+0x10c>)
 80003ee:	f001 f927 	bl	8001640 <HAL_GPIO_ReadPin>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d009      	beq.n	800040c <USART1_RX_Proc+0xf0>
		{
			if(cordist > TFMINI_ACTION_DIST)
 80003f8:	89fb      	ldrh	r3, [r7, #14]
 80003fa:	2bc8      	cmp	r3, #200	; 0xc8
 80003fc:	d90f      	bls.n	800041e <USART1_RX_Proc+0x102>
			{
				HAL_GPIO_WritePin(GPIOA, RX1_Pin, GPIO_PIN_RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000404:	4808      	ldr	r0, [pc, #32]	; (8000428 <USART1_RX_Proc+0x10c>)
 8000406:	f001 f932 	bl	800166e <HAL_GPIO_WritePin>
			{
				HAL_GPIO_WritePin(GPIOA, RX1_Pin, GPIO_PIN_SET);
			}
		}
	}
}
 800040a:	e008      	b.n	800041e <USART1_RX_Proc+0x102>
			if(cordist <= TFMINI_ACTION_DIST)
 800040c:	89fb      	ldrh	r3, [r7, #14]
 800040e:	2bc8      	cmp	r3, #200	; 0xc8
 8000410:	d805      	bhi.n	800041e <USART1_RX_Proc+0x102>
				HAL_GPIO_WritePin(GPIOA, RX1_Pin, GPIO_PIN_SET);
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000418:	4803      	ldr	r0, [pc, #12]	; (8000428 <USART1_RX_Proc+0x10c>)
 800041a:	f001 f928 	bl	800166e <HAL_GPIO_WritePin>
}
 800041e:	bf00      	nop
 8000420:	3710      	adds	r7, #16
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40010800 	.word	0x40010800

0800042c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000430:	b672      	cpsid	i
}
 8000432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000434:	e7fe      	b.n	8000434 <Error_Handler+0x8>
	...

08000438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800043e:	4b15      	ldr	r3, [pc, #84]	; (8000494 <HAL_MspInit+0x5c>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	4a14      	ldr	r2, [pc, #80]	; (8000494 <HAL_MspInit+0x5c>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	6193      	str	r3, [r2, #24]
 800044a:	4b12      	ldr	r3, [pc, #72]	; (8000494 <HAL_MspInit+0x5c>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	60bb      	str	r3, [r7, #8]
 8000454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000456:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <HAL_MspInit+0x5c>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	4a0e      	ldr	r2, [pc, #56]	; (8000494 <HAL_MspInit+0x5c>)
 800045c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000460:	61d3      	str	r3, [r2, #28]
 8000462:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <HAL_MspInit+0x5c>)
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800046e:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <HAL_MspInit+0x60>)
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	4a04      	ldr	r2, [pc, #16]	; (8000498 <HAL_MspInit+0x60>)
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048a:	bf00      	nop
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	40021000 	.word	0x40021000
 8000498:	40010000 	.word	0x40010000

0800049c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <NMI_Handler+0x4>

080004a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a6:	e7fe      	b.n	80004a6 <HardFault_Handler+0x4>

080004a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <MemManage_Handler+0x4>

080004ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <BusFault_Handler+0x4>

080004b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <UsageFault_Handler+0x4>

080004ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr

080004c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr

080004d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004de:	b580      	push	{r7, lr}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e2:	f000 fb5d 	bl	8000ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80004f0:	4802      	ldr	r0, [pc, #8]	; (80004fc <DMA1_Channel4_IRQHandler+0x10>)
 80004f2:	f000 fded 	bl	80010d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	200001e4 	.word	0x200001e4

08000500 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000504:	4802      	ldr	r0, [pc, #8]	; (8000510 <DMA1_Channel5_IRQHandler+0x10>)
 8000506:	f000 fde3 	bl	80010d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	200001a0 	.word	0x200001a0

08000514 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000518:	4802      	ldr	r0, [pc, #8]	; (8000524 <DMA1_Channel6_IRQHandler+0x10>)
 800051a:	f000 fdd9 	bl	80010d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000228 	.word	0x20000228

08000528 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800052c:	4802      	ldr	r0, [pc, #8]	; (8000538 <DMA1_Channel7_IRQHandler+0x10>)
 800052e:	f000 fdcf 	bl	80010d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	2000026c 	.word	0x2000026c

0800053c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint32_t tmp = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]

	if((__HAL_UART_GET_FLAG(&huart1,UART_FLAG_IDLE) != RESET))
 8000546:	4b19      	ldr	r3, [pc, #100]	; (80005ac <USART1_IRQHandler+0x70>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f003 0310 	and.w	r3, r3, #16
 8000550:	2b10      	cmp	r3, #16
 8000552:	d124      	bne.n	800059e <USART1_IRQHandler+0x62>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8000554:	2300      	movs	r3, #0
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	4b14      	ldr	r3, [pc, #80]	; (80005ac <USART1_IRQHandler+0x70>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <USART1_IRQHandler+0x70>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	683b      	ldr	r3, [r7, #0]

		tmp = huart1.Instance->SR;
 800056a:	4b10      	ldr	r3, [pc, #64]	; (80005ac <USART1_IRQHandler+0x70>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	607b      	str	r3, [r7, #4]
		tmp = huart1.Instance->DR;
 8000572:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <USART1_IRQHandler+0x70>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	607b      	str	r3, [r7, #4]

		HAL_UART_DMAStop(&huart1);
 800057a:	480c      	ldr	r0, [pc, #48]	; (80005ac <USART1_IRQHandler+0x70>)
 800057c:	f001 fd98 	bl	80020b0 <HAL_UART_DMAStop>

		tmp =  USART_BUF_SIZE - hdma_usart1_rx.Instance->CNDTR;
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <USART1_IRQHandler+0x74>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800058a:	607b      	str	r3, [r7, #4]
		HAL_UART_Receive_DMA(&huart1, g_usart1_rx_buf, USART_BUF_SIZE);
 800058c:	2240      	movs	r2, #64	; 0x40
 800058e:	4909      	ldr	r1, [pc, #36]	; (80005b4 <USART1_IRQHandler+0x78>)
 8000590:	4806      	ldr	r0, [pc, #24]	; (80005ac <USART1_IRQHandler+0x70>)
 8000592:	f001 fd68 	bl	8002066 <HAL_UART_Receive_DMA>

		USART1_RX_Proc(g_usart1_rx_buf, tmp);
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	4806      	ldr	r0, [pc, #24]	; (80005b4 <USART1_IRQHandler+0x78>)
 800059a:	f7ff febf 	bl	800031c <USART1_RX_Proc>
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800059e:	4803      	ldr	r0, [pc, #12]	; (80005ac <USART1_IRQHandler+0x70>)
 80005a0:	f001 fe06 	bl	80021b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000110 	.word	0x20000110
 80005b0:	200001a0 	.word	0x200001a0
 80005b4:	2000008c 	.word	0x2000008c

080005b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t tmp = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	607b      	str	r3, [r7, #4]

	if((__HAL_UART_GET_FLAG(&huart2,UART_FLAG_IDLE) != RESET))
 80005c2:	4b19      	ldr	r3, [pc, #100]	; (8000628 <USART2_IRQHandler+0x70>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f003 0310 	and.w	r3, r3, #16
 80005cc:	2b10      	cmp	r3, #16
 80005ce:	d124      	bne.n	800061a <USART2_IRQHandler+0x62>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <USART2_IRQHandler+0x70>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <USART2_IRQHandler+0x70>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]

		tmp = huart2.Instance->SR;
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <USART2_IRQHandler+0x70>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	607b      	str	r3, [r7, #4]
		tmp = huart2.Instance->DR;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <USART2_IRQHandler+0x70>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	607b      	str	r3, [r7, #4]

		HAL_UART_DMAStop(&huart2);
 80005f6:	480c      	ldr	r0, [pc, #48]	; (8000628 <USART2_IRQHandler+0x70>)
 80005f8:	f001 fd5a 	bl	80020b0 <HAL_UART_DMAStop>

		tmp =  USART_BUF_SIZE - hdma_usart2_rx.Instance->CNDTR;
 80005fc:	4b0b      	ldr	r3, [pc, #44]	; (800062c <USART2_IRQHandler+0x74>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000606:	607b      	str	r3, [r7, #4]
		HAL_UART_Receive_DMA(&huart2, g_usart2_rx_buf, USART_BUF_SIZE);
 8000608:	2240      	movs	r2, #64	; 0x40
 800060a:	4909      	ldr	r1, [pc, #36]	; (8000630 <USART2_IRQHandler+0x78>)
 800060c:	4806      	ldr	r0, [pc, #24]	; (8000628 <USART2_IRQHandler+0x70>)
 800060e:	f001 fd2a 	bl	8002066 <HAL_UART_Receive_DMA>

		USART1_RX_Proc(g_usart2_rx_buf, tmp);
 8000612:	6879      	ldr	r1, [r7, #4]
 8000614:	4806      	ldr	r0, [pc, #24]	; (8000630 <USART2_IRQHandler+0x78>)
 8000616:	f7ff fe81 	bl	800031c <USART1_RX_Proc>
	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800061a:	4803      	ldr	r0, [pc, #12]	; (8000628 <USART2_IRQHandler+0x70>)
 800061c:	f001 fdc8 	bl	80021b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000158 	.word	0x20000158
 800062c:	20000228 	.word	0x20000228
 8000630:	200000cc 	.word	0x200000cc

08000634 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
 8000644:	e00a      	b.n	800065c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000646:	f3af 8000 	nop.w
 800064a:	4601      	mov	r1, r0
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	1c5a      	adds	r2, r3, #1
 8000650:	60ba      	str	r2, [r7, #8]
 8000652:	b2ca      	uxtb	r2, r1
 8000654:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	3301      	adds	r3, #1
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	697a      	ldr	r2, [r7, #20]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	429a      	cmp	r2, r3
 8000662:	dbf0      	blt.n	8000646 <_read+0x12>
	}

return len;
 8000664:	687b      	ldr	r3, [r7, #4]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3718      	adds	r7, #24
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	b086      	sub	sp, #24
 8000672:	af00      	add	r7, sp, #0
 8000674:	60f8      	str	r0, [r7, #12]
 8000676:	60b9      	str	r1, [r7, #8]
 8000678:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
 800067e:	e009      	b.n	8000694 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	1c5a      	adds	r2, r3, #1
 8000684:	60ba      	str	r2, [r7, #8]
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fa0b 	bl	8000aa4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	3301      	adds	r3, #1
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	697a      	ldr	r2, [r7, #20]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	429a      	cmp	r2, r3
 800069a:	dbf1      	blt.n	8000680 <_write+0x12>
	}
	return len;
 800069c:	687b      	ldr	r3, [r7, #4]
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3718      	adds	r7, #24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <_close>:

int _close(int file)
{
 80006a6:	b480      	push	{r7}
 80006a8:	b083      	sub	sp, #12
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
	return -1;
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr

080006bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006cc:	605a      	str	r2, [r3, #4]
	return 0;
 80006ce:	2300      	movs	r3, #0
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr

080006da <_isatty>:

int _isatty(int file)
{
 80006da:	b480      	push	{r7}
 80006dc:	b083      	sub	sp, #12
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
	return 1;
 80006e2:	2301      	movs	r3, #1
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr

080006ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006ee:	b480      	push	{r7}
 80006f0:	b085      	sub	sp, #20
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	60f8      	str	r0, [r7, #12]
 80006f6:	60b9      	str	r1, [r7, #8]
 80006f8:	607a      	str	r2, [r7, #4]
	return 0;
 80006fa:	2300      	movs	r3, #0
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
	...

08000708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000710:	4a14      	ldr	r2, [pc, #80]	; (8000764 <_sbrk+0x5c>)
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <_sbrk+0x60>)
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800071c:	4b13      	ldr	r3, [pc, #76]	; (800076c <_sbrk+0x64>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d102      	bne.n	800072a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <_sbrk+0x64>)
 8000726:	4a12      	ldr	r2, [pc, #72]	; (8000770 <_sbrk+0x68>)
 8000728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <_sbrk+0x64>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4413      	add	r3, r2
 8000732:	693a      	ldr	r2, [r7, #16]
 8000734:	429a      	cmp	r2, r3
 8000736:	d207      	bcs.n	8000748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000738:	f002 fc52 	bl	8002fe0 <__errno>
 800073c:	4603      	mov	r3, r0
 800073e:	220c      	movs	r2, #12
 8000740:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000742:	f04f 33ff 	mov.w	r3, #4294967295
 8000746:	e009      	b.n	800075c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <_sbrk+0x64>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800074e:	4b07      	ldr	r3, [pc, #28]	; (800076c <_sbrk+0x64>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4413      	add	r3, r2
 8000756:	4a05      	ldr	r2, [pc, #20]	; (800076c <_sbrk+0x64>)
 8000758:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800075a:	68fb      	ldr	r3, [r7, #12]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3718      	adds	r7, #24
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20005000 	.word	0x20005000
 8000768:	00000400 	.word	0x00000400
 800076c:	2000010c 	.word	0x2000010c
 8000770:	200002c8 	.word	0x200002c8

08000774 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr

08000780 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 8000786:	4a12      	ldr	r2, [pc, #72]	; (80007d0 <MX_USART1_UART_Init+0x50>)
 8000788:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 80007b8:	f001 fb82 	bl	8001ec0 <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007c2:	f7ff fe33 	bl	800042c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000110 	.word	0x20000110
 80007d0:	40013800 	.word	0x40013800

080007d4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007da:	4a12      	ldr	r2, [pc, #72]	; (8000824 <MX_USART2_UART_Init+0x50>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 800080c:	f001 fb58 	bl	8001ec0 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000816:	f7ff fe09 	bl	800042c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000158 	.word	0x20000158
 8000824:	40004400 	.word	0x40004400

08000828 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	; 0x28
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 0318 	add.w	r3, r7, #24
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a8c      	ldr	r2, [pc, #560]	; (8000a74 <HAL_UART_MspInit+0x24c>)
 8000844:	4293      	cmp	r3, r2
 8000846:	f040 8087 	bne.w	8000958 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800084a:	4b8b      	ldr	r3, [pc, #556]	; (8000a78 <HAL_UART_MspInit+0x250>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	4a8a      	ldr	r2, [pc, #552]	; (8000a78 <HAL_UART_MspInit+0x250>)
 8000850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000854:	6193      	str	r3, [r2, #24]
 8000856:	4b88      	ldr	r3, [pc, #544]	; (8000a78 <HAL_UART_MspInit+0x250>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b85      	ldr	r3, [pc, #532]	; (8000a78 <HAL_UART_MspInit+0x250>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	4a84      	ldr	r2, [pc, #528]	; (8000a78 <HAL_UART_MspInit+0x250>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6193      	str	r3, [r2, #24]
 800086e:	4b82      	ldr	r3, [pc, #520]	; (8000a78 <HAL_UART_MspInit+0x250>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX1_Pin;
 800087a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800087e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TX1_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 0318 	add.w	r3, r7, #24
 800088c:	4619      	mov	r1, r3
 800088e:	487b      	ldr	r0, [pc, #492]	; (8000a7c <HAL_UART_MspInit+0x254>)
 8000890:	f000 fd52 	bl	8001338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX1_Pin;
 8000894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RX1_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 0318 	add.w	r3, r7, #24
 80008a6:	4619      	mov	r1, r3
 80008a8:	4874      	ldr	r0, [pc, #464]	; (8000a7c <HAL_UART_MspInit+0x254>)
 80008aa:	f000 fd45 	bl	8001338 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80008ae:	4b74      	ldr	r3, [pc, #464]	; (8000a80 <HAL_UART_MspInit+0x258>)
 80008b0:	4a74      	ldr	r2, [pc, #464]	; (8000a84 <HAL_UART_MspInit+0x25c>)
 80008b2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008b4:	4b72      	ldr	r3, [pc, #456]	; (8000a80 <HAL_UART_MspInit+0x258>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ba:	4b71      	ldr	r3, [pc, #452]	; (8000a80 <HAL_UART_MspInit+0x258>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008c0:	4b6f      	ldr	r3, [pc, #444]	; (8000a80 <HAL_UART_MspInit+0x258>)
 80008c2:	2280      	movs	r2, #128	; 0x80
 80008c4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008c6:	4b6e      	ldr	r3, [pc, #440]	; (8000a80 <HAL_UART_MspInit+0x258>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008cc:	4b6c      	ldr	r3, [pc, #432]	; (8000a80 <HAL_UART_MspInit+0x258>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80008d2:	4b6b      	ldr	r3, [pc, #428]	; (8000a80 <HAL_UART_MspInit+0x258>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008d8:	4b69      	ldr	r3, [pc, #420]	; (8000a80 <HAL_UART_MspInit+0x258>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80008de:	4868      	ldr	r0, [pc, #416]	; (8000a80 <HAL_UART_MspInit+0x258>)
 80008e0:	f000 fa88 	bl	8000df4 <HAL_DMA_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80008ea:	f7ff fd9f 	bl	800042c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a63      	ldr	r2, [pc, #396]	; (8000a80 <HAL_UART_MspInit+0x258>)
 80008f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80008f4:	4a62      	ldr	r2, [pc, #392]	; (8000a80 <HAL_UART_MspInit+0x258>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80008fa:	4b63      	ldr	r3, [pc, #396]	; (8000a88 <HAL_UART_MspInit+0x260>)
 80008fc:	4a63      	ldr	r2, [pc, #396]	; (8000a8c <HAL_UART_MspInit+0x264>)
 80008fe:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000900:	4b61      	ldr	r3, [pc, #388]	; (8000a88 <HAL_UART_MspInit+0x260>)
 8000902:	2210      	movs	r2, #16
 8000904:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000906:	4b60      	ldr	r3, [pc, #384]	; (8000a88 <HAL_UART_MspInit+0x260>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800090c:	4b5e      	ldr	r3, [pc, #376]	; (8000a88 <HAL_UART_MspInit+0x260>)
 800090e:	2280      	movs	r2, #128	; 0x80
 8000910:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000912:	4b5d      	ldr	r3, [pc, #372]	; (8000a88 <HAL_UART_MspInit+0x260>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000918:	4b5b      	ldr	r3, [pc, #364]	; (8000a88 <HAL_UART_MspInit+0x260>)
 800091a:	2200      	movs	r2, #0
 800091c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800091e:	4b5a      	ldr	r3, [pc, #360]	; (8000a88 <HAL_UART_MspInit+0x260>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000924:	4b58      	ldr	r3, [pc, #352]	; (8000a88 <HAL_UART_MspInit+0x260>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800092a:	4857      	ldr	r0, [pc, #348]	; (8000a88 <HAL_UART_MspInit+0x260>)
 800092c:	f000 fa62 	bl	8000df4 <HAL_DMA_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8000936:	f7ff fd79 	bl	800042c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a52      	ldr	r2, [pc, #328]	; (8000a88 <HAL_UART_MspInit+0x260>)
 800093e:	639a      	str	r2, [r3, #56]	; 0x38
 8000940:	4a51      	ldr	r2, [pc, #324]	; (8000a88 <HAL_UART_MspInit+0x260>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	2025      	movs	r0, #37	; 0x25
 800094c:	f000 fa1b 	bl	8000d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000950:	2025      	movs	r0, #37	; 0x25
 8000952:	f000 fa34 	bl	8000dbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000956:	e089      	b.n	8000a6c <HAL_UART_MspInit+0x244>
  else if(uartHandle->Instance==USART2)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a4c      	ldr	r2, [pc, #304]	; (8000a90 <HAL_UART_MspInit+0x268>)
 800095e:	4293      	cmp	r3, r2
 8000960:	f040 8084 	bne.w	8000a6c <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000964:	4b44      	ldr	r3, [pc, #272]	; (8000a78 <HAL_UART_MspInit+0x250>)
 8000966:	69db      	ldr	r3, [r3, #28]
 8000968:	4a43      	ldr	r2, [pc, #268]	; (8000a78 <HAL_UART_MspInit+0x250>)
 800096a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096e:	61d3      	str	r3, [r2, #28]
 8000970:	4b41      	ldr	r3, [pc, #260]	; (8000a78 <HAL_UART_MspInit+0x250>)
 8000972:	69db      	ldr	r3, [r3, #28]
 8000974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097c:	4b3e      	ldr	r3, [pc, #248]	; (8000a78 <HAL_UART_MspInit+0x250>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	4a3d      	ldr	r2, [pc, #244]	; (8000a78 <HAL_UART_MspInit+0x250>)
 8000982:	f043 0304 	orr.w	r3, r3, #4
 8000986:	6193      	str	r3, [r2, #24]
 8000988:	4b3b      	ldr	r3, [pc, #236]	; (8000a78 <HAL_UART_MspInit+0x250>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	f003 0304 	and.w	r3, r3, #4
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000994:	2304      	movs	r3, #4
 8000996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	2302      	movs	r3, #2
 800099a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099c:	2303      	movs	r3, #3
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f107 0318 	add.w	r3, r7, #24
 80009a4:	4619      	mov	r1, r3
 80009a6:	4835      	ldr	r0, [pc, #212]	; (8000a7c <HAL_UART_MspInit+0x254>)
 80009a8:	f000 fcc6 	bl	8001338 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009ac:	2308      	movs	r3, #8
 80009ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	f107 0318 	add.w	r3, r7, #24
 80009bc:	4619      	mov	r1, r3
 80009be:	482f      	ldr	r0, [pc, #188]	; (8000a7c <HAL_UART_MspInit+0x254>)
 80009c0:	f000 fcba 	bl	8001338 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80009c4:	4b33      	ldr	r3, [pc, #204]	; (8000a94 <HAL_UART_MspInit+0x26c>)
 80009c6:	4a34      	ldr	r2, [pc, #208]	; (8000a98 <HAL_UART_MspInit+0x270>)
 80009c8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009ca:	4b32      	ldr	r3, [pc, #200]	; (8000a94 <HAL_UART_MspInit+0x26c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d0:	4b30      	ldr	r3, [pc, #192]	; (8000a94 <HAL_UART_MspInit+0x26c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009d6:	4b2f      	ldr	r3, [pc, #188]	; (8000a94 <HAL_UART_MspInit+0x26c>)
 80009d8:	2280      	movs	r2, #128	; 0x80
 80009da:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009dc:	4b2d      	ldr	r3, [pc, #180]	; (8000a94 <HAL_UART_MspInit+0x26c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009e2:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <HAL_UART_MspInit+0x26c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80009e8:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <HAL_UART_MspInit+0x26c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009ee:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <HAL_UART_MspInit+0x26c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80009f4:	4827      	ldr	r0, [pc, #156]	; (8000a94 <HAL_UART_MspInit+0x26c>)
 80009f6:	f000 f9fd 	bl	8000df4 <HAL_DMA_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8000a00:	f7ff fd14 	bl	800042c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a23      	ldr	r2, [pc, #140]	; (8000a94 <HAL_UART_MspInit+0x26c>)
 8000a08:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a0a:	4a22      	ldr	r2, [pc, #136]	; (8000a94 <HAL_UART_MspInit+0x26c>)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000a10:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <HAL_UART_MspInit+0x274>)
 8000a12:	4a23      	ldr	r2, [pc, #140]	; (8000aa0 <HAL_UART_MspInit+0x278>)
 8000a14:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a16:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <HAL_UART_MspInit+0x274>)
 8000a18:	2210      	movs	r2, #16
 8000a1a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <HAL_UART_MspInit+0x274>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a22:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <HAL_UART_MspInit+0x274>)
 8000a24:	2280      	movs	r2, #128	; 0x80
 8000a26:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a28:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <HAL_UART_MspInit+0x274>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a2e:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <HAL_UART_MspInit+0x274>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000a34:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <HAL_UART_MspInit+0x274>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <HAL_UART_MspInit+0x274>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000a40:	4816      	ldr	r0, [pc, #88]	; (8000a9c <HAL_UART_MspInit+0x274>)
 8000a42:	f000 f9d7 	bl	8000df4 <HAL_DMA_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <HAL_UART_MspInit+0x228>
      Error_Handler();
 8000a4c:	f7ff fcee 	bl	800042c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <HAL_UART_MspInit+0x274>)
 8000a54:	639a      	str	r2, [r3, #56]	; 0x38
 8000a56:	4a11      	ldr	r2, [pc, #68]	; (8000a9c <HAL_UART_MspInit+0x274>)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2026      	movs	r0, #38	; 0x26
 8000a62:	f000 f990 	bl	8000d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a66:	2026      	movs	r0, #38	; 0x26
 8000a68:	f000 f9a9 	bl	8000dbe <HAL_NVIC_EnableIRQ>
}
 8000a6c:	bf00      	nop
 8000a6e:	3728      	adds	r7, #40	; 0x28
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40013800 	.word	0x40013800
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	40010800 	.word	0x40010800
 8000a80:	200001a0 	.word	0x200001a0
 8000a84:	40020058 	.word	0x40020058
 8000a88:	200001e4 	.word	0x200001e4
 8000a8c:	40020044 	.word	0x40020044
 8000a90:	40004400 	.word	0x40004400
 8000a94:	20000228 	.word	0x20000228
 8000a98:	4002006c 	.word	0x4002006c
 8000a9c:	2000026c 	.word	0x2000026c
 8000aa0:	40020080 	.word	0x40020080

08000aa4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000aac:	1d39      	adds	r1, r7, #4
 8000aae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <__io_putchar+0x20>)
 8000ab6:	f001 fa53 	bl	8001f60 <HAL_UART_Transmit>

  return ch;
 8000aba:	687b      	ldr	r3, [r7, #4]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000158 	.word	0x20000158

08000ac8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ac8:	f7ff fe54 	bl	8000774 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000acc:	480b      	ldr	r0, [pc, #44]	; (8000afc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ace:	490c      	ldr	r1, [pc, #48]	; (8000b00 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ad0:	4a0c      	ldr	r2, [pc, #48]	; (8000b04 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad4:	e002      	b.n	8000adc <LoopCopyDataInit>

08000ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ada:	3304      	adds	r3, #4

08000adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae0:	d3f9      	bcc.n	8000ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae2:	4a09      	ldr	r2, [pc, #36]	; (8000b08 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ae4:	4c09      	ldr	r4, [pc, #36]	; (8000b0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae8:	e001      	b.n	8000aee <LoopFillZerobss>

08000aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aec:	3204      	adds	r2, #4

08000aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af0:	d3fb      	bcc.n	8000aea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000af2:	f002 fa7b 	bl	8002fec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000af6:	f7ff fb81 	bl	80001fc <main>
  bx lr
 8000afa:	4770      	bx	lr
  ldr r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b04:	080041a4 	.word	0x080041a4
  ldr r2, =_sbss
 8000b08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b0c:	200002c4 	.word	0x200002c4

08000b10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b10:	e7fe      	b.n	8000b10 <ADC1_2_IRQHandler>
	...

08000b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_Init+0x28>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <HAL_Init+0x28>)
 8000b1e:	f043 0310 	orr.w	r3, r3, #16
 8000b22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b24:	2003      	movs	r0, #3
 8000b26:	f000 f923 	bl	8000d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2a:	200f      	movs	r0, #15
 8000b2c:	f000 f808 	bl	8000b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b30:	f7ff fc82 	bl	8000438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40022000 	.word	0x40022000

08000b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_InitTick+0x54>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_InitTick+0x58>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4619      	mov	r1, r3
 8000b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 f93b 	bl	8000dda <HAL_SYSTICK_Config>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00e      	b.n	8000b8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b0f      	cmp	r3, #15
 8000b72:	d80a      	bhi.n	8000b8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b74:	2200      	movs	r2, #0
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7c:	f000 f903 	bl	8000d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b80:	4a06      	ldr	r2, [pc, #24]	; (8000b9c <HAL_InitTick+0x5c>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b86:	2300      	movs	r3, #0
 8000b88:	e000      	b.n	8000b8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000000 	.word	0x20000000
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	20000004 	.word	0x20000004

08000ba0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <HAL_IncTick+0x1c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <HAL_IncTick+0x20>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a03      	ldr	r2, [pc, #12]	; (8000bc0 <HAL_IncTick+0x20>)
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	200002b0 	.word	0x200002b0

08000bc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b02      	ldr	r3, [pc, #8]	; (8000bd4 <HAL_GetTick+0x10>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	200002b0 	.word	0x200002b0

08000bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0a:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	60d3      	str	r3, [r2, #12]
}
 8000c10:	bf00      	nop
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <__NVIC_GetPriorityGrouping+0x18>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	f003 0307 	and.w	r3, r3, #7
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db0b      	blt.n	8000c66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	f003 021f 	and.w	r2, r3, #31
 8000c54:	4906      	ldr	r1, [pc, #24]	; (8000c70 <__NVIC_EnableIRQ+0x34>)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	095b      	lsrs	r3, r3, #5
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	e000e100 	.word	0xe000e100

08000c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	db0a      	blt.n	8000c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	490c      	ldr	r1, [pc, #48]	; (8000cc0 <__NVIC_SetPriority+0x4c>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	0112      	lsls	r2, r2, #4
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	440b      	add	r3, r1
 8000c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c9c:	e00a      	b.n	8000cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4908      	ldr	r1, [pc, #32]	; (8000cc4 <__NVIC_SetPriority+0x50>)
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	3b04      	subs	r3, #4
 8000cac:	0112      	lsls	r2, r2, #4
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	761a      	strb	r2, [r3, #24]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000e100 	.word	0xe000e100
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	; 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f1c3 0307 	rsb	r3, r3, #7
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	bf28      	it	cs
 8000ce6:	2304      	movcs	r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3304      	adds	r3, #4
 8000cee:	2b06      	cmp	r3, #6
 8000cf0:	d902      	bls.n	8000cf8 <NVIC_EncodePriority+0x30>
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3b03      	subs	r3, #3
 8000cf6:	e000      	b.n	8000cfa <NVIC_EncodePriority+0x32>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43da      	mvns	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d10:	f04f 31ff 	mov.w	r1, #4294967295
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	43d9      	mvns	r1, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	4313      	orrs	r3, r2
         );
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3724      	adds	r7, #36	; 0x24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr

08000d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d3c:	d301      	bcc.n	8000d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00f      	b.n	8000d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <SysTick_Config+0x40>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4a:	210f      	movs	r1, #15
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f7ff ff90 	bl	8000c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <SysTick_Config+0x40>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <SysTick_Config+0x40>)
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	e000e010 	.word	0xe000e010

08000d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff ff2d 	bl	8000bd8 <__NVIC_SetPriorityGrouping>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d98:	f7ff ff42 	bl	8000c20 <__NVIC_GetPriorityGrouping>
 8000d9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	6978      	ldr	r0, [r7, #20]
 8000da4:	f7ff ff90 	bl	8000cc8 <NVIC_EncodePriority>
 8000da8:	4602      	mov	r2, r0
 8000daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dae:	4611      	mov	r1, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff5f 	bl	8000c74 <__NVIC_SetPriority>
}
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff35 	bl	8000c3c <__NVIC_EnableIRQ>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff ffa2 	bl	8000d2c <SysTick_Config>
 8000de8:	4603      	mov	r3, r0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e043      	b.n	8000e92 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	4b22      	ldr	r3, [pc, #136]	; (8000e9c <HAL_DMA_Init+0xa8>)
 8000e12:	4413      	add	r3, r2
 8000e14:	4a22      	ldr	r2, [pc, #136]	; (8000ea0 <HAL_DMA_Init+0xac>)
 8000e16:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1a:	091b      	lsrs	r3, r3, #4
 8000e1c:	009a      	lsls	r2, r3, #2
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a1f      	ldr	r2, [pc, #124]	; (8000ea4 <HAL_DMA_Init+0xb0>)
 8000e26:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000e3e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2201      	movs	r2, #1
 8000e84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	bffdfff8 	.word	0xbffdfff8
 8000ea0:	cccccccd 	.word	0xcccccccd
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d101      	bne.n	8000ec8 <HAL_DMA_Start_IT+0x20>
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	e04b      	b.n	8000f60 <HAL_DMA_Start_IT+0xb8>
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d13a      	bne.n	8000f52 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2202      	movs	r2, #2
 8000ee0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f022 0201 	bic.w	r2, r2, #1
 8000ef8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	68b9      	ldr	r1, [r7, #8]
 8000f00:	68f8      	ldr	r0, [r7, #12]
 8000f02:	f000 f9eb 	bl	80012dc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d008      	beq.n	8000f20 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f042 020e 	orr.w	r2, r2, #14
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	e00f      	b.n	8000f40 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f022 0204 	bic.w	r2, r2, #4
 8000f2e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f042 020a 	orr.w	r2, r2, #10
 8000f3e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f042 0201 	orr.w	r2, r2, #1
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	e005      	b.n	8000f5e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f70:	2300      	movs	r3, #0
 8000f72:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d008      	beq.n	8000f92 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2204      	movs	r2, #4
 8000f84:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e020      	b.n	8000fd4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f022 020e 	bic.w	r2, r2, #14
 8000fa0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f022 0201 	bic.w	r2, r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fba:	2101      	movs	r1, #1
 8000fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
	...

08000fe0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d005      	beq.n	8001004 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	73fb      	strb	r3, [r7, #15]
 8001002:	e051      	b.n	80010a8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 020e 	bic.w	r2, r2, #14
 8001012:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f022 0201 	bic.w	r2, r2, #1
 8001022:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a22      	ldr	r2, [pc, #136]	; (80010b4 <HAL_DMA_Abort_IT+0xd4>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d029      	beq.n	8001082 <HAL_DMA_Abort_IT+0xa2>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a21      	ldr	r2, [pc, #132]	; (80010b8 <HAL_DMA_Abort_IT+0xd8>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d022      	beq.n	800107e <HAL_DMA_Abort_IT+0x9e>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a1f      	ldr	r2, [pc, #124]	; (80010bc <HAL_DMA_Abort_IT+0xdc>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d01a      	beq.n	8001078 <HAL_DMA_Abort_IT+0x98>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a1e      	ldr	r2, [pc, #120]	; (80010c0 <HAL_DMA_Abort_IT+0xe0>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d012      	beq.n	8001072 <HAL_DMA_Abort_IT+0x92>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a1c      	ldr	r2, [pc, #112]	; (80010c4 <HAL_DMA_Abort_IT+0xe4>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d00a      	beq.n	800106c <HAL_DMA_Abort_IT+0x8c>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a1b      	ldr	r2, [pc, #108]	; (80010c8 <HAL_DMA_Abort_IT+0xe8>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d102      	bne.n	8001066 <HAL_DMA_Abort_IT+0x86>
 8001060:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001064:	e00e      	b.n	8001084 <HAL_DMA_Abort_IT+0xa4>
 8001066:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800106a:	e00b      	b.n	8001084 <HAL_DMA_Abort_IT+0xa4>
 800106c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001070:	e008      	b.n	8001084 <HAL_DMA_Abort_IT+0xa4>
 8001072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001076:	e005      	b.n	8001084 <HAL_DMA_Abort_IT+0xa4>
 8001078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800107c:	e002      	b.n	8001084 <HAL_DMA_Abort_IT+0xa4>
 800107e:	2310      	movs	r3, #16
 8001080:	e000      	b.n	8001084 <HAL_DMA_Abort_IT+0xa4>
 8001082:	2301      	movs	r3, #1
 8001084:	4a11      	ldr	r2, [pc, #68]	; (80010cc <HAL_DMA_Abort_IT+0xec>)
 8001086:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	4798      	blx	r3
    } 
  }
  return status;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40020008 	.word	0x40020008
 80010b8:	4002001c 	.word	0x4002001c
 80010bc:	40020030 	.word	0x40020030
 80010c0:	40020044 	.word	0x40020044
 80010c4:	40020058 	.word	0x40020058
 80010c8:	4002006c 	.word	0x4002006c
 80010cc:	40020000 	.word	0x40020000

080010d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	2204      	movs	r2, #4
 80010ee:	409a      	lsls	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4013      	ands	r3, r2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d04f      	beq.n	8001198 <HAL_DMA_IRQHandler+0xc8>
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	f003 0304 	and.w	r3, r3, #4
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d04a      	beq.n	8001198 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0320 	and.w	r3, r3, #32
 800110c:	2b00      	cmp	r3, #0
 800110e:	d107      	bne.n	8001120 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f022 0204 	bic.w	r2, r2, #4
 800111e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a66      	ldr	r2, [pc, #408]	; (80012c0 <HAL_DMA_IRQHandler+0x1f0>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d029      	beq.n	800117e <HAL_DMA_IRQHandler+0xae>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a65      	ldr	r2, [pc, #404]	; (80012c4 <HAL_DMA_IRQHandler+0x1f4>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d022      	beq.n	800117a <HAL_DMA_IRQHandler+0xaa>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a63      	ldr	r2, [pc, #396]	; (80012c8 <HAL_DMA_IRQHandler+0x1f8>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d01a      	beq.n	8001174 <HAL_DMA_IRQHandler+0xa4>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a62      	ldr	r2, [pc, #392]	; (80012cc <HAL_DMA_IRQHandler+0x1fc>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d012      	beq.n	800116e <HAL_DMA_IRQHandler+0x9e>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a60      	ldr	r2, [pc, #384]	; (80012d0 <HAL_DMA_IRQHandler+0x200>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d00a      	beq.n	8001168 <HAL_DMA_IRQHandler+0x98>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a5f      	ldr	r2, [pc, #380]	; (80012d4 <HAL_DMA_IRQHandler+0x204>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d102      	bne.n	8001162 <HAL_DMA_IRQHandler+0x92>
 800115c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001160:	e00e      	b.n	8001180 <HAL_DMA_IRQHandler+0xb0>
 8001162:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001166:	e00b      	b.n	8001180 <HAL_DMA_IRQHandler+0xb0>
 8001168:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800116c:	e008      	b.n	8001180 <HAL_DMA_IRQHandler+0xb0>
 800116e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001172:	e005      	b.n	8001180 <HAL_DMA_IRQHandler+0xb0>
 8001174:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001178:	e002      	b.n	8001180 <HAL_DMA_IRQHandler+0xb0>
 800117a:	2340      	movs	r3, #64	; 0x40
 800117c:	e000      	b.n	8001180 <HAL_DMA_IRQHandler+0xb0>
 800117e:	2304      	movs	r3, #4
 8001180:	4a55      	ldr	r2, [pc, #340]	; (80012d8 <HAL_DMA_IRQHandler+0x208>)
 8001182:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001188:	2b00      	cmp	r3, #0
 800118a:	f000 8094 	beq.w	80012b6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001196:	e08e      	b.n	80012b6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	2202      	movs	r2, #2
 800119e:	409a      	lsls	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4013      	ands	r3, r2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d056      	beq.n	8001256 <HAL_DMA_IRQHandler+0x186>
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d051      	beq.n	8001256 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0320 	and.w	r3, r3, #32
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d10b      	bne.n	80011d8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f022 020a 	bic.w	r2, r2, #10
 80011ce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2201      	movs	r2, #1
 80011d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a38      	ldr	r2, [pc, #224]	; (80012c0 <HAL_DMA_IRQHandler+0x1f0>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d029      	beq.n	8001236 <HAL_DMA_IRQHandler+0x166>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a37      	ldr	r2, [pc, #220]	; (80012c4 <HAL_DMA_IRQHandler+0x1f4>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d022      	beq.n	8001232 <HAL_DMA_IRQHandler+0x162>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a35      	ldr	r2, [pc, #212]	; (80012c8 <HAL_DMA_IRQHandler+0x1f8>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d01a      	beq.n	800122c <HAL_DMA_IRQHandler+0x15c>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a34      	ldr	r2, [pc, #208]	; (80012cc <HAL_DMA_IRQHandler+0x1fc>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d012      	beq.n	8001226 <HAL_DMA_IRQHandler+0x156>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a32      	ldr	r2, [pc, #200]	; (80012d0 <HAL_DMA_IRQHandler+0x200>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d00a      	beq.n	8001220 <HAL_DMA_IRQHandler+0x150>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a31      	ldr	r2, [pc, #196]	; (80012d4 <HAL_DMA_IRQHandler+0x204>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d102      	bne.n	800121a <HAL_DMA_IRQHandler+0x14a>
 8001214:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001218:	e00e      	b.n	8001238 <HAL_DMA_IRQHandler+0x168>
 800121a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800121e:	e00b      	b.n	8001238 <HAL_DMA_IRQHandler+0x168>
 8001220:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001224:	e008      	b.n	8001238 <HAL_DMA_IRQHandler+0x168>
 8001226:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800122a:	e005      	b.n	8001238 <HAL_DMA_IRQHandler+0x168>
 800122c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001230:	e002      	b.n	8001238 <HAL_DMA_IRQHandler+0x168>
 8001232:	2320      	movs	r3, #32
 8001234:	e000      	b.n	8001238 <HAL_DMA_IRQHandler+0x168>
 8001236:	2302      	movs	r3, #2
 8001238:	4a27      	ldr	r2, [pc, #156]	; (80012d8 <HAL_DMA_IRQHandler+0x208>)
 800123a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001248:	2b00      	cmp	r3, #0
 800124a:	d034      	beq.n	80012b6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001254:	e02f      	b.n	80012b6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	2208      	movs	r2, #8
 800125c:	409a      	lsls	r2, r3
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4013      	ands	r3, r2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d028      	beq.n	80012b8 <HAL_DMA_IRQHandler+0x1e8>
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	2b00      	cmp	r3, #0
 800126e:	d023      	beq.n	80012b8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 020e 	bic.w	r2, r2, #14
 800127e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001288:	2101      	movs	r1, #1
 800128a:	fa01 f202 	lsl.w	r2, r1, r2
 800128e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2201      	movs	r2, #1
 8001294:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2201      	movs	r2, #1
 800129a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d004      	beq.n	80012b8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	4798      	blx	r3
    }
  }
  return;
 80012b6:	bf00      	nop
 80012b8:	bf00      	nop
}
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40020008 	.word	0x40020008
 80012c4:	4002001c 	.word	0x4002001c
 80012c8:	40020030 	.word	0x40020030
 80012cc:	40020044 	.word	0x40020044
 80012d0:	40020058 	.word	0x40020058
 80012d4:	4002006c 	.word	0x4002006c
 80012d8:	40020000 	.word	0x40020000

080012dc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012f2:	2101      	movs	r1, #1
 80012f4:	fa01 f202 	lsl.w	r2, r1, r2
 80012f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b10      	cmp	r3, #16
 8001308:	d108      	bne.n	800131c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800131a:	e007      	b.n	800132c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	68ba      	ldr	r2, [r7, #8]
 8001322:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	60da      	str	r2, [r3, #12]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
	...

08001338 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001338:	b480      	push	{r7}
 800133a:	b08b      	sub	sp, #44	; 0x2c
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800134a:	e169      	b.n	8001620 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800134c:	2201      	movs	r2, #1
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	69fa      	ldr	r2, [r7, #28]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	429a      	cmp	r2, r3
 8001366:	f040 8158 	bne.w	800161a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	4a9a      	ldr	r2, [pc, #616]	; (80015d8 <HAL_GPIO_Init+0x2a0>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d05e      	beq.n	8001432 <HAL_GPIO_Init+0xfa>
 8001374:	4a98      	ldr	r2, [pc, #608]	; (80015d8 <HAL_GPIO_Init+0x2a0>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d875      	bhi.n	8001466 <HAL_GPIO_Init+0x12e>
 800137a:	4a98      	ldr	r2, [pc, #608]	; (80015dc <HAL_GPIO_Init+0x2a4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d058      	beq.n	8001432 <HAL_GPIO_Init+0xfa>
 8001380:	4a96      	ldr	r2, [pc, #600]	; (80015dc <HAL_GPIO_Init+0x2a4>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d86f      	bhi.n	8001466 <HAL_GPIO_Init+0x12e>
 8001386:	4a96      	ldr	r2, [pc, #600]	; (80015e0 <HAL_GPIO_Init+0x2a8>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d052      	beq.n	8001432 <HAL_GPIO_Init+0xfa>
 800138c:	4a94      	ldr	r2, [pc, #592]	; (80015e0 <HAL_GPIO_Init+0x2a8>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d869      	bhi.n	8001466 <HAL_GPIO_Init+0x12e>
 8001392:	4a94      	ldr	r2, [pc, #592]	; (80015e4 <HAL_GPIO_Init+0x2ac>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d04c      	beq.n	8001432 <HAL_GPIO_Init+0xfa>
 8001398:	4a92      	ldr	r2, [pc, #584]	; (80015e4 <HAL_GPIO_Init+0x2ac>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d863      	bhi.n	8001466 <HAL_GPIO_Init+0x12e>
 800139e:	4a92      	ldr	r2, [pc, #584]	; (80015e8 <HAL_GPIO_Init+0x2b0>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d046      	beq.n	8001432 <HAL_GPIO_Init+0xfa>
 80013a4:	4a90      	ldr	r2, [pc, #576]	; (80015e8 <HAL_GPIO_Init+0x2b0>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d85d      	bhi.n	8001466 <HAL_GPIO_Init+0x12e>
 80013aa:	2b12      	cmp	r3, #18
 80013ac:	d82a      	bhi.n	8001404 <HAL_GPIO_Init+0xcc>
 80013ae:	2b12      	cmp	r3, #18
 80013b0:	d859      	bhi.n	8001466 <HAL_GPIO_Init+0x12e>
 80013b2:	a201      	add	r2, pc, #4	; (adr r2, 80013b8 <HAL_GPIO_Init+0x80>)
 80013b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b8:	08001433 	.word	0x08001433
 80013bc:	0800140d 	.word	0x0800140d
 80013c0:	0800141f 	.word	0x0800141f
 80013c4:	08001461 	.word	0x08001461
 80013c8:	08001467 	.word	0x08001467
 80013cc:	08001467 	.word	0x08001467
 80013d0:	08001467 	.word	0x08001467
 80013d4:	08001467 	.word	0x08001467
 80013d8:	08001467 	.word	0x08001467
 80013dc:	08001467 	.word	0x08001467
 80013e0:	08001467 	.word	0x08001467
 80013e4:	08001467 	.word	0x08001467
 80013e8:	08001467 	.word	0x08001467
 80013ec:	08001467 	.word	0x08001467
 80013f0:	08001467 	.word	0x08001467
 80013f4:	08001467 	.word	0x08001467
 80013f8:	08001467 	.word	0x08001467
 80013fc:	08001415 	.word	0x08001415
 8001400:	08001429 	.word	0x08001429
 8001404:	4a79      	ldr	r2, [pc, #484]	; (80015ec <HAL_GPIO_Init+0x2b4>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d013      	beq.n	8001432 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800140a:	e02c      	b.n	8001466 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	623b      	str	r3, [r7, #32]
          break;
 8001412:	e029      	b.n	8001468 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	3304      	adds	r3, #4
 800141a:	623b      	str	r3, [r7, #32]
          break;
 800141c:	e024      	b.n	8001468 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	3308      	adds	r3, #8
 8001424:	623b      	str	r3, [r7, #32]
          break;
 8001426:	e01f      	b.n	8001468 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	330c      	adds	r3, #12
 800142e:	623b      	str	r3, [r7, #32]
          break;
 8001430:	e01a      	b.n	8001468 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d102      	bne.n	8001440 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800143a:	2304      	movs	r3, #4
 800143c:	623b      	str	r3, [r7, #32]
          break;
 800143e:	e013      	b.n	8001468 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d105      	bne.n	8001454 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001448:	2308      	movs	r3, #8
 800144a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69fa      	ldr	r2, [r7, #28]
 8001450:	611a      	str	r2, [r3, #16]
          break;
 8001452:	e009      	b.n	8001468 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001454:	2308      	movs	r3, #8
 8001456:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69fa      	ldr	r2, [r7, #28]
 800145c:	615a      	str	r2, [r3, #20]
          break;
 800145e:	e003      	b.n	8001468 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
          break;
 8001464:	e000      	b.n	8001468 <HAL_GPIO_Init+0x130>
          break;
 8001466:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	2bff      	cmp	r3, #255	; 0xff
 800146c:	d801      	bhi.n	8001472 <HAL_GPIO_Init+0x13a>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	e001      	b.n	8001476 <HAL_GPIO_Init+0x13e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3304      	adds	r3, #4
 8001476:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	2bff      	cmp	r3, #255	; 0xff
 800147c:	d802      	bhi.n	8001484 <HAL_GPIO_Init+0x14c>
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	e002      	b.n	800148a <HAL_GPIO_Init+0x152>
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	3b08      	subs	r3, #8
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	210f      	movs	r1, #15
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	fa01 f303 	lsl.w	r3, r1, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	401a      	ands	r2, r3
 800149c:	6a39      	ldr	r1, [r7, #32]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	fa01 f303 	lsl.w	r3, r1, r3
 80014a4:	431a      	orrs	r2, r3
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 80b1 	beq.w	800161a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014b8:	4b4d      	ldr	r3, [pc, #308]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a4c      	ldr	r2, [pc, #304]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b4a      	ldr	r3, [pc, #296]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014d0:	4a48      	ldr	r2, [pc, #288]	; (80015f4 <HAL_GPIO_Init+0x2bc>)
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	089b      	lsrs	r3, r3, #2
 80014d6:	3302      	adds	r3, #2
 80014d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	220f      	movs	r2, #15
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	4013      	ands	r3, r2
 80014f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a40      	ldr	r2, [pc, #256]	; (80015f8 <HAL_GPIO_Init+0x2c0>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d013      	beq.n	8001524 <HAL_GPIO_Init+0x1ec>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a3f      	ldr	r2, [pc, #252]	; (80015fc <HAL_GPIO_Init+0x2c4>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d00d      	beq.n	8001520 <HAL_GPIO_Init+0x1e8>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a3e      	ldr	r2, [pc, #248]	; (8001600 <HAL_GPIO_Init+0x2c8>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d007      	beq.n	800151c <HAL_GPIO_Init+0x1e4>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a3d      	ldr	r2, [pc, #244]	; (8001604 <HAL_GPIO_Init+0x2cc>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d101      	bne.n	8001518 <HAL_GPIO_Init+0x1e0>
 8001514:	2303      	movs	r3, #3
 8001516:	e006      	b.n	8001526 <HAL_GPIO_Init+0x1ee>
 8001518:	2304      	movs	r3, #4
 800151a:	e004      	b.n	8001526 <HAL_GPIO_Init+0x1ee>
 800151c:	2302      	movs	r3, #2
 800151e:	e002      	b.n	8001526 <HAL_GPIO_Init+0x1ee>
 8001520:	2301      	movs	r3, #1
 8001522:	e000      	b.n	8001526 <HAL_GPIO_Init+0x1ee>
 8001524:	2300      	movs	r3, #0
 8001526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001528:	f002 0203 	and.w	r2, r2, #3
 800152c:	0092      	lsls	r2, r2, #2
 800152e:	4093      	lsls	r3, r2
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	4313      	orrs	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001536:	492f      	ldr	r1, [pc, #188]	; (80015f4 <HAL_GPIO_Init+0x2bc>)
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	089b      	lsrs	r3, r3, #2
 800153c:	3302      	adds	r3, #2
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d006      	beq.n	800155e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001550:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <HAL_GPIO_Init+0x2d0>)
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	492c      	ldr	r1, [pc, #176]	; (8001608 <HAL_GPIO_Init+0x2d0>)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	4313      	orrs	r3, r2
 800155a:	608b      	str	r3, [r1, #8]
 800155c:	e006      	b.n	800156c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800155e:	4b2a      	ldr	r3, [pc, #168]	; (8001608 <HAL_GPIO_Init+0x2d0>)
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	43db      	mvns	r3, r3
 8001566:	4928      	ldr	r1, [pc, #160]	; (8001608 <HAL_GPIO_Init+0x2d0>)
 8001568:	4013      	ands	r3, r2
 800156a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d006      	beq.n	8001586 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001578:	4b23      	ldr	r3, [pc, #140]	; (8001608 <HAL_GPIO_Init+0x2d0>)
 800157a:	68da      	ldr	r2, [r3, #12]
 800157c:	4922      	ldr	r1, [pc, #136]	; (8001608 <HAL_GPIO_Init+0x2d0>)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	4313      	orrs	r3, r2
 8001582:	60cb      	str	r3, [r1, #12]
 8001584:	e006      	b.n	8001594 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001586:	4b20      	ldr	r3, [pc, #128]	; (8001608 <HAL_GPIO_Init+0x2d0>)
 8001588:	68da      	ldr	r2, [r3, #12]
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	43db      	mvns	r3, r3
 800158e:	491e      	ldr	r1, [pc, #120]	; (8001608 <HAL_GPIO_Init+0x2d0>)
 8001590:	4013      	ands	r3, r2
 8001592:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d006      	beq.n	80015ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015a0:	4b19      	ldr	r3, [pc, #100]	; (8001608 <HAL_GPIO_Init+0x2d0>)
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	4918      	ldr	r1, [pc, #96]	; (8001608 <HAL_GPIO_Init+0x2d0>)
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	604b      	str	r3, [r1, #4]
 80015ac:	e006      	b.n	80015bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015ae:	4b16      	ldr	r3, [pc, #88]	; (8001608 <HAL_GPIO_Init+0x2d0>)
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	4914      	ldr	r1, [pc, #80]	; (8001608 <HAL_GPIO_Init+0x2d0>)
 80015b8:	4013      	ands	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d021      	beq.n	800160c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <HAL_GPIO_Init+0x2d0>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	490e      	ldr	r1, [pc, #56]	; (8001608 <HAL_GPIO_Init+0x2d0>)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	600b      	str	r3, [r1, #0]
 80015d4:	e021      	b.n	800161a <HAL_GPIO_Init+0x2e2>
 80015d6:	bf00      	nop
 80015d8:	10320000 	.word	0x10320000
 80015dc:	10310000 	.word	0x10310000
 80015e0:	10220000 	.word	0x10220000
 80015e4:	10210000 	.word	0x10210000
 80015e8:	10120000 	.word	0x10120000
 80015ec:	10110000 	.word	0x10110000
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40010000 	.word	0x40010000
 80015f8:	40010800 	.word	0x40010800
 80015fc:	40010c00 	.word	0x40010c00
 8001600:	40011000 	.word	0x40011000
 8001604:	40011400 	.word	0x40011400
 8001608:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_GPIO_Init+0x304>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	43db      	mvns	r3, r3
 8001614:	4909      	ldr	r1, [pc, #36]	; (800163c <HAL_GPIO_Init+0x304>)
 8001616:	4013      	ands	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	3301      	adds	r3, #1
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	fa22 f303 	lsr.w	r3, r2, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	f47f ae8e 	bne.w	800134c <HAL_GPIO_Init+0x14>
  }
}
 8001630:	bf00      	nop
 8001632:	bf00      	nop
 8001634:	372c      	adds	r7, #44	; 0x2c
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	40010400 	.word	0x40010400

08001640 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	887b      	ldrh	r3, [r7, #2]
 8001652:	4013      	ands	r3, r2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d002      	beq.n	800165e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001658:	2301      	movs	r3, #1
 800165a:	73fb      	strb	r3, [r7, #15]
 800165c:	e001      	b.n	8001662 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001662:	7bfb      	ldrb	r3, [r7, #15]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr

0800166e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	460b      	mov	r3, r1
 8001678:	807b      	strh	r3, [r7, #2]
 800167a:	4613      	mov	r3, r2
 800167c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800167e:	787b      	ldrb	r3, [r7, #1]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001684:	887a      	ldrh	r2, [r7, #2]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800168a:	e003      	b.n	8001694 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800168c:	887b      	ldrh	r3, [r7, #2]
 800168e:	041a      	lsls	r2, r3, #16
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	611a      	str	r2, [r3, #16]
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr
	...

080016a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e272      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 8087 	beq.w	80017ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016c0:	4b92      	ldr	r3, [pc, #584]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 030c 	and.w	r3, r3, #12
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	d00c      	beq.n	80016e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016cc:	4b8f      	ldr	r3, [pc, #572]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 030c 	and.w	r3, r3, #12
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d112      	bne.n	80016fe <HAL_RCC_OscConfig+0x5e>
 80016d8:	4b8c      	ldr	r3, [pc, #560]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e4:	d10b      	bne.n	80016fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e6:	4b89      	ldr	r3, [pc, #548]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d06c      	beq.n	80017cc <HAL_RCC_OscConfig+0x12c>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d168      	bne.n	80017cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e24c      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001706:	d106      	bne.n	8001716 <HAL_RCC_OscConfig+0x76>
 8001708:	4b80      	ldr	r3, [pc, #512]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a7f      	ldr	r2, [pc, #508]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 800170e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	e02e      	b.n	8001774 <HAL_RCC_OscConfig+0xd4>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10c      	bne.n	8001738 <HAL_RCC_OscConfig+0x98>
 800171e:	4b7b      	ldr	r3, [pc, #492]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a7a      	ldr	r2, [pc, #488]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	4b78      	ldr	r3, [pc, #480]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a77      	ldr	r2, [pc, #476]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e01d      	b.n	8001774 <HAL_RCC_OscConfig+0xd4>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0xbc>
 8001742:	4b72      	ldr	r3, [pc, #456]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a71      	ldr	r2, [pc, #452]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4b6f      	ldr	r3, [pc, #444]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a6e      	ldr	r2, [pc, #440]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e00b      	b.n	8001774 <HAL_RCC_OscConfig+0xd4>
 800175c:	4b6b      	ldr	r3, [pc, #428]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a6a      	ldr	r2, [pc, #424]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4b68      	ldr	r3, [pc, #416]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a67      	ldr	r2, [pc, #412]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 800176e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001772:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d013      	beq.n	80017a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7ff fa22 	bl	8000bc4 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001784:	f7ff fa1e 	bl	8000bc4 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b64      	cmp	r3, #100	; 0x64
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e200      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	4b5d      	ldr	r3, [pc, #372]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0xe4>
 80017a2:	e014      	b.n	80017ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff fa0e 	bl	8000bc4 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ac:	f7ff fa0a 	bl	8000bc4 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b64      	cmp	r3, #100	; 0x64
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e1ec      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017be:	4b53      	ldr	r3, [pc, #332]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x10c>
 80017ca:	e000      	b.n	80017ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d063      	beq.n	80018a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017da:	4b4c      	ldr	r3, [pc, #304]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00b      	beq.n	80017fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017e6:	4b49      	ldr	r3, [pc, #292]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f003 030c 	and.w	r3, r3, #12
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	d11c      	bne.n	800182c <HAL_RCC_OscConfig+0x18c>
 80017f2:	4b46      	ldr	r3, [pc, #280]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d116      	bne.n	800182c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fe:	4b43      	ldr	r3, [pc, #268]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d005      	beq.n	8001816 <HAL_RCC_OscConfig+0x176>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d001      	beq.n	8001816 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e1c0      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001816:	4b3d      	ldr	r3, [pc, #244]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4939      	ldr	r1, [pc, #228]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800182a:	e03a      	b.n	80018a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d020      	beq.n	8001876 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001834:	4b36      	ldr	r3, [pc, #216]	; (8001910 <HAL_RCC_OscConfig+0x270>)
 8001836:	2201      	movs	r2, #1
 8001838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183a:	f7ff f9c3 	bl	8000bc4 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001842:	f7ff f9bf 	bl	8000bc4 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e1a1      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001854:	4b2d      	ldr	r3, [pc, #180]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001860:	4b2a      	ldr	r3, [pc, #168]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	4927      	ldr	r1, [pc, #156]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001870:	4313      	orrs	r3, r2
 8001872:	600b      	str	r3, [r1, #0]
 8001874:	e015      	b.n	80018a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001876:	4b26      	ldr	r3, [pc, #152]	; (8001910 <HAL_RCC_OscConfig+0x270>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7ff f9a2 	bl	8000bc4 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001884:	f7ff f99e 	bl	8000bc4 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e180      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001896:	4b1d      	ldr	r3, [pc, #116]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d03a      	beq.n	8001924 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d019      	beq.n	80018ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b6:	4b17      	ldr	r3, [pc, #92]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018bc:	f7ff f982 	bl	8000bc4 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c4:	f7ff f97e 	bl	8000bc4 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e160      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018e2:	2001      	movs	r0, #1
 80018e4:	f000 face 	bl	8001e84 <RCC_Delay>
 80018e8:	e01c      	b.n	8001924 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f0:	f7ff f968 	bl	8000bc4 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f6:	e00f      	b.n	8001918 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f8:	f7ff f964 	bl	8000bc4 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d908      	bls.n	8001918 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e146      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
 800190a:	bf00      	nop
 800190c:	40021000 	.word	0x40021000
 8001910:	42420000 	.word	0x42420000
 8001914:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001918:	4b92      	ldr	r3, [pc, #584]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 800191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1e9      	bne.n	80018f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 80a6 	beq.w	8001a7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001932:	2300      	movs	r3, #0
 8001934:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001936:	4b8b      	ldr	r3, [pc, #556]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10d      	bne.n	800195e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	4b88      	ldr	r3, [pc, #544]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	4a87      	ldr	r2, [pc, #540]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194c:	61d3      	str	r3, [r2, #28]
 800194e:	4b85      	ldr	r3, [pc, #532]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800195a:	2301      	movs	r3, #1
 800195c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195e:	4b82      	ldr	r3, [pc, #520]	; (8001b68 <HAL_RCC_OscConfig+0x4c8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001966:	2b00      	cmp	r3, #0
 8001968:	d118      	bne.n	800199c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800196a:	4b7f      	ldr	r3, [pc, #508]	; (8001b68 <HAL_RCC_OscConfig+0x4c8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a7e      	ldr	r2, [pc, #504]	; (8001b68 <HAL_RCC_OscConfig+0x4c8>)
 8001970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001976:	f7ff f925 	bl	8000bc4 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800197e:	f7ff f921 	bl	8000bc4 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b64      	cmp	r3, #100	; 0x64
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e103      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001990:	4b75      	ldr	r3, [pc, #468]	; (8001b68 <HAL_RCC_OscConfig+0x4c8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0f0      	beq.n	800197e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d106      	bne.n	80019b2 <HAL_RCC_OscConfig+0x312>
 80019a4:	4b6f      	ldr	r3, [pc, #444]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	4a6e      	ldr	r2, [pc, #440]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	6213      	str	r3, [r2, #32]
 80019b0:	e02d      	b.n	8001a0e <HAL_RCC_OscConfig+0x36e>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10c      	bne.n	80019d4 <HAL_RCC_OscConfig+0x334>
 80019ba:	4b6a      	ldr	r3, [pc, #424]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	4a69      	ldr	r2, [pc, #420]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019c0:	f023 0301 	bic.w	r3, r3, #1
 80019c4:	6213      	str	r3, [r2, #32]
 80019c6:	4b67      	ldr	r3, [pc, #412]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	4a66      	ldr	r2, [pc, #408]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	f023 0304 	bic.w	r3, r3, #4
 80019d0:	6213      	str	r3, [r2, #32]
 80019d2:	e01c      	b.n	8001a0e <HAL_RCC_OscConfig+0x36e>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2b05      	cmp	r3, #5
 80019da:	d10c      	bne.n	80019f6 <HAL_RCC_OscConfig+0x356>
 80019dc:	4b61      	ldr	r3, [pc, #388]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	4a60      	ldr	r2, [pc, #384]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019e2:	f043 0304 	orr.w	r3, r3, #4
 80019e6:	6213      	str	r3, [r2, #32]
 80019e8:	4b5e      	ldr	r3, [pc, #376]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	4a5d      	ldr	r2, [pc, #372]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6213      	str	r3, [r2, #32]
 80019f4:	e00b      	b.n	8001a0e <HAL_RCC_OscConfig+0x36e>
 80019f6:	4b5b      	ldr	r3, [pc, #364]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	4a5a      	ldr	r2, [pc, #360]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	6213      	str	r3, [r2, #32]
 8001a02:	4b58      	ldr	r3, [pc, #352]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	4a57      	ldr	r2, [pc, #348]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001a08:	f023 0304 	bic.w	r3, r3, #4
 8001a0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d015      	beq.n	8001a42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a16:	f7ff f8d5 	bl	8000bc4 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a1c:	e00a      	b.n	8001a34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1e:	f7ff f8d1 	bl	8000bc4 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e0b1      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a34:	4b4b      	ldr	r3, [pc, #300]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0ee      	beq.n	8001a1e <HAL_RCC_OscConfig+0x37e>
 8001a40:	e014      	b.n	8001a6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a42:	f7ff f8bf 	bl	8000bc4 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a48:	e00a      	b.n	8001a60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4a:	f7ff f8bb 	bl	8000bc4 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e09b      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a60:	4b40      	ldr	r3, [pc, #256]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1ee      	bne.n	8001a4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a6c:	7dfb      	ldrb	r3, [r7, #23]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d105      	bne.n	8001a7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a72:	4b3c      	ldr	r3, [pc, #240]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	4a3b      	ldr	r2, [pc, #236]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 8087 	beq.w	8001b96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a88:	4b36      	ldr	r3, [pc, #216]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	d061      	beq.n	8001b58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d146      	bne.n	8001b2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9c:	4b33      	ldr	r3, [pc, #204]	; (8001b6c <HAL_RCC_OscConfig+0x4cc>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa2:	f7ff f88f 	bl	8000bc4 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aaa:	f7ff f88b 	bl	8000bc4 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e06d      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001abc:	4b29      	ldr	r3, [pc, #164]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1f0      	bne.n	8001aaa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad0:	d108      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ad2:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	4921      	ldr	r1, [pc, #132]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ae4:	4b1f      	ldr	r3, [pc, #124]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a19      	ldr	r1, [r3, #32]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	430b      	orrs	r3, r1
 8001af6:	491b      	ldr	r1, [pc, #108]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001afc:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <HAL_RCC_OscConfig+0x4cc>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b02:	f7ff f85f 	bl	8000bc4 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0a:	f7ff f85b 	bl	8000bc4 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e03d      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x46a>
 8001b28:	e035      	b.n	8001b96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <HAL_RCC_OscConfig+0x4cc>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b30:	f7ff f848 	bl	8000bc4 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b38:	f7ff f844 	bl	8000bc4 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e026      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x498>
 8001b56:	e01e      	b.n	8001b96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d107      	bne.n	8001b70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e019      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40007000 	.word	0x40007000
 8001b6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_RCC_OscConfig+0x500>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d106      	bne.n	8001b92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d001      	beq.n	8001b96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40021000 	.word	0x40021000

08001ba4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0d0      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb8:	4b6a      	ldr	r3, [pc, #424]	; (8001d64 <HAL_RCC_ClockConfig+0x1c0>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d910      	bls.n	8001be8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc6:	4b67      	ldr	r3, [pc, #412]	; (8001d64 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 0207 	bic.w	r2, r3, #7
 8001bce:	4965      	ldr	r1, [pc, #404]	; (8001d64 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd6:	4b63      	ldr	r3, [pc, #396]	; (8001d64 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0b8      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d020      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c00:	4b59      	ldr	r3, [pc, #356]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	4a58      	ldr	r2, [pc, #352]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0308 	and.w	r3, r3, #8
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c18:	4b53      	ldr	r3, [pc, #332]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	4a52      	ldr	r2, [pc, #328]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c24:	4b50      	ldr	r3, [pc, #320]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	494d      	ldr	r1, [pc, #308]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d040      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d107      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4a:	4b47      	ldr	r3, [pc, #284]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d115      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e07f      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d107      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c62:	4b41      	ldr	r3, [pc, #260]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d109      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e073      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c72:	4b3d      	ldr	r3, [pc, #244]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e06b      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c82:	4b39      	ldr	r3, [pc, #228]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f023 0203 	bic.w	r2, r3, #3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	4936      	ldr	r1, [pc, #216]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c94:	f7fe ff96 	bl	8000bc4 <HAL_GetTick>
 8001c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9a:	e00a      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c9c:	f7fe ff92 	bl	8000bc4 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e053      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb2:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 020c 	and.w	r2, r3, #12
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d1eb      	bne.n	8001c9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc4:	4b27      	ldr	r3, [pc, #156]	; (8001d64 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d210      	bcs.n	8001cf4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd2:	4b24      	ldr	r3, [pc, #144]	; (8001d64 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 0207 	bic.w	r2, r3, #7
 8001cda:	4922      	ldr	r1, [pc, #136]	; (8001d64 <HAL_RCC_ClockConfig+0x1c0>)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce2:	4b20      	ldr	r3, [pc, #128]	; (8001d64 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e032      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d008      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d00:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	4916      	ldr	r1, [pc, #88]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d009      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d1e:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	490e      	ldr	r1, [pc, #56]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d32:	f000 f821 	bl	8001d78 <HAL_RCC_GetSysClockFreq>
 8001d36:	4602      	mov	r2, r0
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	490a      	ldr	r1, [pc, #40]	; (8001d6c <HAL_RCC_ClockConfig+0x1c8>)
 8001d44:	5ccb      	ldrb	r3, [r1, r3]
 8001d46:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4a:	4a09      	ldr	r2, [pc, #36]	; (8001d70 <HAL_RCC_ClockConfig+0x1cc>)
 8001d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <HAL_RCC_ClockConfig+0x1d0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fef4 	bl	8000b40 <HAL_InitTick>

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40022000 	.word	0x40022000
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	080040d8 	.word	0x080040d8
 8001d70:	20000000 	.word	0x20000000
 8001d74:	20000004 	.word	0x20000004

08001d78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b087      	sub	sp, #28
 8001d7c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	2300      	movs	r3, #0
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d92:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d002      	beq.n	8001da8 <HAL_RCC_GetSysClockFreq+0x30>
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d003      	beq.n	8001dae <HAL_RCC_GetSysClockFreq+0x36>
 8001da6:	e027      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001da8:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001daa:	613b      	str	r3, [r7, #16]
      break;
 8001dac:	e027      	b.n	8001dfe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	0c9b      	lsrs	r3, r3, #18
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	4a17      	ldr	r2, [pc, #92]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001db8:	5cd3      	ldrb	r3, [r2, r3]
 8001dba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d010      	beq.n	8001de8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dc6:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	0c5b      	lsrs	r3, r3, #17
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	4a11      	ldr	r2, [pc, #68]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dd2:	5cd3      	ldrb	r3, [r2, r3]
 8001dd4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a0d      	ldr	r2, [pc, #52]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dda:	fb03 f202 	mul.w	r2, r3, r2
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	e004      	b.n	8001df2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a0c      	ldr	r2, [pc, #48]	; (8001e1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001dec:	fb02 f303 	mul.w	r3, r2, r3
 8001df0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	613b      	str	r3, [r7, #16]
      break;
 8001df6:	e002      	b.n	8001dfe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dfa:	613b      	str	r3, [r7, #16]
      break;
 8001dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dfe:	693b      	ldr	r3, [r7, #16]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	371c      	adds	r7, #28
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	007a1200 	.word	0x007a1200
 8001e14:	080040f0 	.word	0x080040f0
 8001e18:	08004100 	.word	0x08004100
 8001e1c:	003d0900 	.word	0x003d0900

08001e20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e24:	4b02      	ldr	r3, [pc, #8]	; (8001e30 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e26:	681b      	ldr	r3, [r3, #0]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr
 8001e30:	20000000 	.word	0x20000000

08001e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e38:	f7ff fff2 	bl	8001e20 <HAL_RCC_GetHCLKFreq>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	0a1b      	lsrs	r3, r3, #8
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	4903      	ldr	r1, [pc, #12]	; (8001e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e4a:	5ccb      	ldrb	r3, [r1, r3]
 8001e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40021000 	.word	0x40021000
 8001e58:	080040e8 	.word	0x080040e8

08001e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e60:	f7ff ffde 	bl	8001e20 <HAL_RCC_GetHCLKFreq>
 8001e64:	4602      	mov	r2, r0
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	0adb      	lsrs	r3, r3, #11
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	4903      	ldr	r1, [pc, #12]	; (8001e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e72:	5ccb      	ldrb	r3, [r1, r3]
 8001e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	080040e8 	.word	0x080040e8

08001e84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <RCC_Delay+0x34>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <RCC_Delay+0x38>)
 8001e92:	fba2 2303 	umull	r2, r3, r2, r3
 8001e96:	0a5b      	lsrs	r3, r3, #9
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	fb02 f303 	mul.w	r3, r2, r3
 8001e9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ea0:	bf00      	nop
  }
  while (Delay --);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	1e5a      	subs	r2, r3, #1
 8001ea6:	60fa      	str	r2, [r7, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1f9      	bne.n	8001ea0 <RCC_Delay+0x1c>
}
 8001eac:	bf00      	nop
 8001eae:	bf00      	nop
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr
 8001eb8:	20000000 	.word	0x20000000
 8001ebc:	10624dd3 	.word	0x10624dd3

08001ec0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e042      	b.n	8001f58 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d106      	bne.n	8001eec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7fe fc9e 	bl	8000828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2224      	movs	r2, #36	; 0x24
 8001ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 ffdd 	bl	8002ec4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	691a      	ldr	r2, [r3, #16]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	695a      	ldr	r2, [r3, #20]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af02      	add	r7, sp, #8
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b20      	cmp	r3, #32
 8001f7e:	d16d      	bne.n	800205c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <HAL_UART_Transmit+0x2c>
 8001f86:	88fb      	ldrh	r3, [r7, #6]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e066      	b.n	800205e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2221      	movs	r2, #33	; 0x21
 8001f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f9e:	f7fe fe11 	bl	8000bc4 <HAL_GetTick>
 8001fa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	88fa      	ldrh	r2, [r7, #6]
 8001fa8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	88fa      	ldrh	r2, [r7, #6]
 8001fae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fb8:	d108      	bne.n	8001fcc <HAL_UART_Transmit+0x6c>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d104      	bne.n	8001fcc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	61bb      	str	r3, [r7, #24]
 8001fca:	e003      	b.n	8001fd4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fd4:	e02a      	b.n	800202c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2180      	movs	r1, #128	; 0x80
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 fca4 	bl	800292e <UART_WaitOnFlagUntilTimeout>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e036      	b.n	800205e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10b      	bne.n	800200e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002004:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	3302      	adds	r3, #2
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	e007      	b.n	800201e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	781a      	ldrb	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	3301      	adds	r3, #1
 800201c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002022:	b29b      	uxth	r3, r3
 8002024:	3b01      	subs	r3, #1
 8002026:	b29a      	uxth	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002030:	b29b      	uxth	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1cf      	bne.n	8001fd6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2200      	movs	r2, #0
 800203e:	2140      	movs	r1, #64	; 0x40
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 fc74 	bl	800292e <UART_WaitOnFlagUntilTimeout>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e006      	b.n	800205e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2220      	movs	r2, #32
 8002054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	e000      	b.n	800205e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800205c:	2302      	movs	r3, #2
  }
}
 800205e:	4618      	mov	r0, r3
 8002060:	3720      	adds	r7, #32
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b084      	sub	sp, #16
 800206a:	af00      	add	r7, sp, #0
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	4613      	mov	r3, r2
 8002072:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b20      	cmp	r3, #32
 800207e:	d112      	bne.n	80020a6 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d002      	beq.n	800208c <HAL_UART_Receive_DMA+0x26>
 8002086:	88fb      	ldrh	r3, [r7, #6]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e00b      	b.n	80020a8 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002096:	88fb      	ldrh	r3, [r7, #6]
 8002098:	461a      	mov	r2, r3
 800209a:	68b9      	ldr	r1, [r7, #8]
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 fcb5 	bl	8002a0c <UART_Start_Receive_DMA>
 80020a2:	4603      	mov	r3, r0
 80020a4:	e000      	b.n	80020a8 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80020a6:	2302      	movs	r3, #2
  }
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b090      	sub	sp, #64	; 0x40
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	bf14      	ite	ne
 80020ca:	2301      	movne	r3, #1
 80020cc:	2300      	moveq	r3, #0
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b21      	cmp	r3, #33	; 0x21
 80020dc:	d128      	bne.n	8002130 <HAL_UART_DMAStop+0x80>
 80020de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d025      	beq.n	8002130 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	3314      	adds	r3, #20
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	e853 3f00 	ldrex	r3, [r3]
 80020f2:	623b      	str	r3, [r7, #32]
   return(result);
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	3314      	adds	r3, #20
 8002102:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002104:	633a      	str	r2, [r7, #48]	; 0x30
 8002106:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002108:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800210a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800210c:	e841 2300 	strex	r3, r2, [r1]
 8002110:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1e5      	bne.n	80020e4 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211c:	2b00      	cmp	r3, #0
 800211e:	d004      	beq.n	800212a <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe ff1f 	bl	8000f68 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 fd08 	bl	8002b40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213a:	2b00      	cmp	r3, #0
 800213c:	bf14      	ite	ne
 800213e:	2301      	movne	r3, #1
 8002140:	2300      	moveq	r3, #0
 8002142:	b2db      	uxtb	r3, r3
 8002144:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b22      	cmp	r3, #34	; 0x22
 8002150:	d128      	bne.n	80021a4 <HAL_UART_DMAStop+0xf4>
 8002152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002154:	2b00      	cmp	r3, #0
 8002156:	d025      	beq.n	80021a4 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	3314      	adds	r3, #20
 800215e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	e853 3f00 	ldrex	r3, [r3]
 8002166:	60fb      	str	r3, [r7, #12]
   return(result);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800216e:	637b      	str	r3, [r7, #52]	; 0x34
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	3314      	adds	r3, #20
 8002176:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002178:	61fa      	str	r2, [r7, #28]
 800217a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800217c:	69b9      	ldr	r1, [r7, #24]
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	e841 2300 	strex	r3, r2, [r1]
 8002184:	617b      	str	r3, [r7, #20]
   return(result);
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1e5      	bne.n	8002158 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002190:	2b00      	cmp	r3, #0
 8002192:	d004      	beq.n	800219e <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe fee5 	bl	8000f68 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 fcf5 	bl	8002b8e <UART_EndRxTransfer>
  }

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3740      	adds	r7, #64	; 0x40
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b0ba      	sub	sp, #232	; 0xe8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80021dc:	2300      	movs	r3, #0
 80021de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80021ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10f      	bne.n	8002216 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021fa:	f003 0320 	and.w	r3, r3, #32
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d009      	beq.n	8002216 <HAL_UART_IRQHandler+0x66>
 8002202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002206:	f003 0320 	and.w	r3, r3, #32
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 fd9a 	bl	8002d48 <UART_Receive_IT>
      return;
 8002214:	e25b      	b.n	80026ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002216:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 80de 	beq.w	80023dc <HAL_UART_IRQHandler+0x22c>
 8002220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d106      	bne.n	800223a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800222c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002230:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80d1 	beq.w	80023dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800223a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00b      	beq.n	800225e <HAL_UART_IRQHandler+0xae>
 8002246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800224a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d005      	beq.n	800225e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	f043 0201 	orr.w	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800225e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00b      	beq.n	8002282 <HAL_UART_IRQHandler+0xd2>
 800226a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d005      	beq.n	8002282 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f043 0202 	orr.w	r2, r3, #2
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00b      	beq.n	80022a6 <HAL_UART_IRQHandler+0xf6>
 800228e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d005      	beq.n	80022a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	f043 0204 	orr.w	r2, r3, #4
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80022a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d011      	beq.n	80022d6 <HAL_UART_IRQHandler+0x126>
 80022b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d105      	bne.n	80022ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80022be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	f043 0208 	orr.w	r2, r3, #8
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 81f2 	beq.w	80026c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022e4:	f003 0320 	and.w	r3, r3, #32
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d008      	beq.n	80022fe <HAL_UART_IRQHandler+0x14e>
 80022ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022f0:	f003 0320 	and.w	r3, r3, #32
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d002      	beq.n	80022fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 fd25 	bl	8002d48 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002308:	2b00      	cmp	r3, #0
 800230a:	bf14      	ite	ne
 800230c:	2301      	movne	r3, #1
 800230e:	2300      	moveq	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d103      	bne.n	800232a <HAL_UART_IRQHandler+0x17a>
 8002322:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002326:	2b00      	cmp	r3, #0
 8002328:	d04f      	beq.n	80023ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 fc2f 	bl	8002b8e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	d041      	beq.n	80023c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	3314      	adds	r3, #20
 8002344:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002348:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800234c:	e853 3f00 	ldrex	r3, [r3]
 8002350:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002354:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800235c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	3314      	adds	r3, #20
 8002366:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800236a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800236e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002372:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002376:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800237a:	e841 2300 	strex	r3, r2, [r1]
 800237e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002382:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1d9      	bne.n	800233e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238e:	2b00      	cmp	r3, #0
 8002390:	d013      	beq.n	80023ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002396:	4a7e      	ldr	r2, [pc, #504]	; (8002590 <HAL_UART_IRQHandler+0x3e0>)
 8002398:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe fe1e 	bl	8000fe0 <HAL_DMA_Abort_IT>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d016      	beq.n	80023d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023b4:	4610      	mov	r0, r2
 80023b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023b8:	e00e      	b.n	80023d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f9a5 	bl	800270a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023c0:	e00a      	b.n	80023d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f9a1 	bl	800270a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023c8:	e006      	b.n	80023d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f99d 	bl	800270a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80023d6:	e175      	b.n	80026c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023d8:	bf00      	nop
    return;
 80023da:	e173      	b.n	80026c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	f040 814f 	bne.w	8002684 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80023e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ea:	f003 0310 	and.w	r3, r3, #16
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 8148 	beq.w	8002684 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80023f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023f8:	f003 0310 	and.w	r3, r3, #16
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 8141 	beq.w	8002684 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002402:	2300      	movs	r3, #0
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 80b6 	beq.w	8002594 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002434:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 8145 	beq.w	80026c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002442:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002446:	429a      	cmp	r2, r3
 8002448:	f080 813e 	bcs.w	80026c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002452:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	2b20      	cmp	r3, #32
 800245c:	f000 8088 	beq.w	8002570 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	330c      	adds	r3, #12
 8002466:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800246a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800246e:	e853 3f00 	ldrex	r3, [r3]
 8002472:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002476:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800247a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800247e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	330c      	adds	r3, #12
 8002488:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800248c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002490:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002494:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002498:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800249c:	e841 2300 	strex	r3, r2, [r1]
 80024a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80024a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1d9      	bne.n	8002460 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	3314      	adds	r3, #20
 80024b2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024b6:	e853 3f00 	ldrex	r3, [r3]
 80024ba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80024bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024be:	f023 0301 	bic.w	r3, r3, #1
 80024c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	3314      	adds	r3, #20
 80024cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024d0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80024d4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80024d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80024dc:	e841 2300 	strex	r3, r2, [r1]
 80024e0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80024e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1e1      	bne.n	80024ac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	3314      	adds	r3, #20
 80024ee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024f2:	e853 3f00 	ldrex	r3, [r3]
 80024f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80024f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	3314      	adds	r3, #20
 8002508:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800250c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800250e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002510:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002512:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002514:	e841 2300 	strex	r3, r2, [r1]
 8002518:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800251a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1e3      	bne.n	80024e8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2220      	movs	r2, #32
 8002524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	330c      	adds	r3, #12
 8002534:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002538:	e853 3f00 	ldrex	r3, [r3]
 800253c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800253e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002540:	f023 0310 	bic.w	r3, r3, #16
 8002544:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	330c      	adds	r3, #12
 800254e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002552:	65ba      	str	r2, [r7, #88]	; 0x58
 8002554:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002556:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002558:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800255a:	e841 2300 	strex	r3, r2, [r1]
 800255e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1e3      	bne.n	800252e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe fcfc 	bl	8000f68 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2202      	movs	r2, #2
 8002574:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800257e:	b29b      	uxth	r3, r3
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	b29b      	uxth	r3, r3
 8002584:	4619      	mov	r1, r3
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f8c8 	bl	800271c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800258c:	e09c      	b.n	80026c8 <HAL_UART_IRQHandler+0x518>
 800258e:	bf00      	nop
 8002590:	08002c53 	.word	0x08002c53
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800259c:	b29b      	uxth	r3, r3
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 808e 	beq.w	80026cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80025b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 8089 	beq.w	80026cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	330c      	adds	r3, #12
 80025c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c4:	e853 3f00 	ldrex	r3, [r3]
 80025c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80025ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80025d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	330c      	adds	r3, #12
 80025da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80025de:	647a      	str	r2, [r7, #68]	; 0x44
 80025e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80025e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025e6:	e841 2300 	strex	r3, r2, [r1]
 80025ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80025ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1e3      	bne.n	80025ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	3314      	adds	r3, #20
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	e853 3f00 	ldrex	r3, [r3]
 8002600:	623b      	str	r3, [r7, #32]
   return(result);
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	f023 0301 	bic.w	r3, r3, #1
 8002608:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3314      	adds	r3, #20
 8002612:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002616:	633a      	str	r2, [r7, #48]	; 0x30
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800261a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800261c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800261e:	e841 2300 	strex	r3, r2, [r1]
 8002622:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1e3      	bne.n	80025f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2220      	movs	r2, #32
 800262e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	330c      	adds	r3, #12
 800263e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	e853 3f00 	ldrex	r3, [r3]
 8002646:	60fb      	str	r3, [r7, #12]
   return(result);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f023 0310 	bic.w	r3, r3, #16
 800264e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	330c      	adds	r3, #12
 8002658:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800265c:	61fa      	str	r2, [r7, #28]
 800265e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002660:	69b9      	ldr	r1, [r7, #24]
 8002662:	69fa      	ldr	r2, [r7, #28]
 8002664:	e841 2300 	strex	r3, r2, [r1]
 8002668:	617b      	str	r3, [r7, #20]
   return(result);
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1e3      	bne.n	8002638 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002676:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800267a:	4619      	mov	r1, r3
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f84d 	bl	800271c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002682:	e023      	b.n	80026cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268c:	2b00      	cmp	r3, #0
 800268e:	d009      	beq.n	80026a4 <HAL_UART_IRQHandler+0x4f4>
 8002690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 faec 	bl	8002c7a <UART_Transmit_IT>
    return;
 80026a2:	e014      	b.n	80026ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00e      	beq.n	80026ce <HAL_UART_IRQHandler+0x51e>
 80026b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d008      	beq.n	80026ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 fb2b 	bl	8002d18 <UART_EndTransmit_IT>
    return;
 80026c2:	e004      	b.n	80026ce <HAL_UART_IRQHandler+0x51e>
    return;
 80026c4:	bf00      	nop
 80026c6:	e002      	b.n	80026ce <HAL_UART_IRQHandler+0x51e>
      return;
 80026c8:	bf00      	nop
 80026ca:	e000      	b.n	80026ce <HAL_UART_IRQHandler+0x51e>
      return;
 80026cc:	bf00      	nop
  }
}
 80026ce:	37e8      	adds	r7, #232	; 0xe8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr

080026e6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr

0800270a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr

0800271c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr

08002732 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b09c      	sub	sp, #112	; 0x70
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	2b00      	cmp	r3, #0
 800274c:	d172      	bne.n	8002834 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800274e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002750:	2200      	movs	r2, #0
 8002752:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	330c      	adds	r3, #12
 800275a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800275c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800275e:	e853 3f00 	ldrex	r3, [r3]
 8002762:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002766:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800276a:	66bb      	str	r3, [r7, #104]	; 0x68
 800276c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	330c      	adds	r3, #12
 8002772:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002774:	65ba      	str	r2, [r7, #88]	; 0x58
 8002776:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002778:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800277a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800277c:	e841 2300 	strex	r3, r2, [r1]
 8002780:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1e5      	bne.n	8002754 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	3314      	adds	r3, #20
 800278e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002792:	e853 3f00 	ldrex	r3, [r3]
 8002796:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279a:	f023 0301 	bic.w	r3, r3, #1
 800279e:	667b      	str	r3, [r7, #100]	; 0x64
 80027a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	3314      	adds	r3, #20
 80027a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80027a8:	647a      	str	r2, [r7, #68]	; 0x44
 80027aa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80027ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027b0:	e841 2300 	strex	r3, r2, [r1]
 80027b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80027b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1e5      	bne.n	8002788 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	3314      	adds	r3, #20
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	e853 3f00 	ldrex	r3, [r3]
 80027ca:	623b      	str	r3, [r7, #32]
   return(result);
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027d2:	663b      	str	r3, [r7, #96]	; 0x60
 80027d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	3314      	adds	r3, #20
 80027da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027dc:	633a      	str	r2, [r7, #48]	; 0x30
 80027de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027e4:	e841 2300 	strex	r3, r2, [r1]
 80027e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80027ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1e5      	bne.n	80027bc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d119      	bne.n	8002834 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	330c      	adds	r3, #12
 8002806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	e853 3f00 	ldrex	r3, [r3]
 800280e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f023 0310 	bic.w	r3, r3, #16
 8002816:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	330c      	adds	r3, #12
 800281e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002820:	61fa      	str	r2, [r7, #28]
 8002822:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002824:	69b9      	ldr	r1, [r7, #24]
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	e841 2300 	strex	r3, r2, [r1]
 800282c:	617b      	str	r3, [r7, #20]
   return(result);
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1e5      	bne.n	8002800 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002836:	2200      	movs	r2, #0
 8002838:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800283a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	2b01      	cmp	r3, #1
 8002840:	d106      	bne.n	8002850 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002844:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002846:	4619      	mov	r1, r3
 8002848:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800284a:	f7ff ff67 	bl	800271c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800284e:	e002      	b.n	8002856 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002850:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002852:	f7ff ff48 	bl	80026e6 <HAL_UART_RxCpltCallback>
}
 8002856:	bf00      	nop
 8002858:	3770      	adds	r7, #112	; 0x70
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b084      	sub	sp, #16
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2201      	movs	r2, #1
 8002870:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	2b01      	cmp	r3, #1
 8002878:	d108      	bne.n	800288c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800287e:	085b      	lsrs	r3, r3, #1
 8002880:	b29b      	uxth	r3, r3
 8002882:	4619      	mov	r1, r3
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f7ff ff49 	bl	800271c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800288a:	e002      	b.n	8002892 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f7ff ff33 	bl	80026f8 <HAL_UART_RxHalfCpltCallback>
}
 8002892:	bf00      	nop
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	bf14      	ite	ne
 80028ba:	2301      	movne	r3, #1
 80028bc:	2300      	moveq	r3, #0
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b21      	cmp	r3, #33	; 0x21
 80028cc:	d108      	bne.n	80028e0 <UART_DMAError+0x46>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2200      	movs	r2, #0
 80028d8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80028da:	68b8      	ldr	r0, [r7, #8]
 80028dc:	f000 f930 	bl	8002b40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	bf14      	ite	ne
 80028ee:	2301      	movne	r3, #1
 80028f0:	2300      	moveq	r3, #0
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b22      	cmp	r3, #34	; 0x22
 8002900:	d108      	bne.n	8002914 <UART_DMAError+0x7a>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2200      	movs	r2, #0
 800290c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800290e:	68b8      	ldr	r0, [r7, #8]
 8002910:	f000 f93d 	bl	8002b8e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002918:	f043 0210 	orr.w	r2, r3, #16
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002920:	68b8      	ldr	r0, [r7, #8]
 8002922:	f7ff fef2 	bl	800270a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002926:	bf00      	nop
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b090      	sub	sp, #64	; 0x40
 8002932:	af00      	add	r7, sp, #0
 8002934:	60f8      	str	r0, [r7, #12]
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	603b      	str	r3, [r7, #0]
 800293a:	4613      	mov	r3, r2
 800293c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800293e:	e050      	b.n	80029e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002946:	d04c      	beq.n	80029e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800294a:	2b00      	cmp	r3, #0
 800294c:	d007      	beq.n	800295e <UART_WaitOnFlagUntilTimeout+0x30>
 800294e:	f7fe f939 	bl	8000bc4 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800295a:	429a      	cmp	r2, r3
 800295c:	d241      	bcs.n	80029e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	330c      	adds	r3, #12
 8002964:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002968:	e853 3f00 	ldrex	r3, [r3]
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002974:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	330c      	adds	r3, #12
 800297c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800297e:	637a      	str	r2, [r7, #52]	; 0x34
 8002980:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002982:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002986:	e841 2300 	strex	r3, r2, [r1]
 800298a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800298c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1e5      	bne.n	800295e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	3314      	adds	r3, #20
 8002998:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	e853 3f00 	ldrex	r3, [r3]
 80029a0:	613b      	str	r3, [r7, #16]
   return(result);
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	f023 0301 	bic.w	r3, r3, #1
 80029a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	3314      	adds	r3, #20
 80029b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029b2:	623a      	str	r2, [r7, #32]
 80029b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b6:	69f9      	ldr	r1, [r7, #28]
 80029b8:	6a3a      	ldr	r2, [r7, #32]
 80029ba:	e841 2300 	strex	r3, r2, [r1]
 80029be:	61bb      	str	r3, [r7, #24]
   return(result);
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1e5      	bne.n	8002992 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2220      	movs	r2, #32
 80029d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e00f      	b.n	8002a02 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	4013      	ands	r3, r2
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	bf0c      	ite	eq
 80029f2:	2301      	moveq	r3, #1
 80029f4:	2300      	movne	r3, #0
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	461a      	mov	r2, r3
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d09f      	beq.n	8002940 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3740      	adds	r7, #64	; 0x40
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b098      	sub	sp, #96	; 0x60
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	4613      	mov	r3, r2
 8002a18:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	88fa      	ldrh	r2, [r7, #6]
 8002a24:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2222      	movs	r2, #34	; 0x22
 8002a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a38:	4a3e      	ldr	r2, [pc, #248]	; (8002b34 <UART_Start_Receive_DMA+0x128>)
 8002a3a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a40:	4a3d      	ldr	r2, [pc, #244]	; (8002b38 <UART_Start_Receive_DMA+0x12c>)
 8002a42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a48:	4a3c      	ldr	r2, [pc, #240]	; (8002b3c <UART_Start_Receive_DMA+0x130>)
 8002a4a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a50:	2200      	movs	r2, #0
 8002a52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002a54:	f107 0308 	add.w	r3, r7, #8
 8002a58:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	3304      	adds	r3, #4
 8002a64:	4619      	mov	r1, r3
 8002a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	88fb      	ldrh	r3, [r7, #6]
 8002a6c:	f7fe fa1c 	bl	8000ea8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002a70:	2300      	movs	r3, #0
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	613b      	str	r3, [r7, #16]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d019      	beq.n	8002ac2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	330c      	adds	r3, #12
 8002a94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a98:	e853 3f00 	ldrex	r3, [r3]
 8002a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	330c      	adds	r3, #12
 8002aac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002aae:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002ab0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002ab4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ab6:	e841 2300 	strex	r3, r2, [r1]
 8002aba:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1e5      	bne.n	8002a8e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	3314      	adds	r3, #20
 8002ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002acc:	e853 3f00 	ldrex	r3, [r3]
 8002ad0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	657b      	str	r3, [r7, #84]	; 0x54
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	3314      	adds	r3, #20
 8002ae0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ae2:	63ba      	str	r2, [r7, #56]	; 0x38
 8002ae4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002ae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aea:	e841 2300 	strex	r3, r2, [r1]
 8002aee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1e5      	bne.n	8002ac2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	3314      	adds	r3, #20
 8002afc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	e853 3f00 	ldrex	r3, [r3]
 8002b04:	617b      	str	r3, [r7, #20]
   return(result);
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b0c:	653b      	str	r3, [r7, #80]	; 0x50
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	3314      	adds	r3, #20
 8002b14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b16:	627a      	str	r2, [r7, #36]	; 0x24
 8002b18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1a:	6a39      	ldr	r1, [r7, #32]
 8002b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1e:	e841 2300 	strex	r3, r2, [r1]
 8002b22:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1e5      	bne.n	8002af6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3760      	adds	r7, #96	; 0x60
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	08002733 	.word	0x08002733
 8002b38:	0800285f 	.word	0x0800285f
 8002b3c:	0800289b 	.word	0x0800289b

08002b40 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b089      	sub	sp, #36	; 0x24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	330c      	adds	r3, #12
 8002b4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	e853 3f00 	ldrex	r3, [r3]
 8002b56:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002b5e:	61fb      	str	r3, [r7, #28]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	330c      	adds	r3, #12
 8002b66:	69fa      	ldr	r2, [r7, #28]
 8002b68:	61ba      	str	r2, [r7, #24]
 8002b6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6c:	6979      	ldr	r1, [r7, #20]
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	e841 2300 	strex	r3, r2, [r1]
 8002b74:	613b      	str	r3, [r7, #16]
   return(result);
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1e5      	bne.n	8002b48 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8002b84:	bf00      	nop
 8002b86:	3724      	adds	r7, #36	; 0x24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b095      	sub	sp, #84	; 0x54
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	330c      	adds	r3, #12
 8002b9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba0:	e853 3f00 	ldrex	r3, [r3]
 8002ba4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	330c      	adds	r3, #12
 8002bb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bb6:	643a      	str	r2, [r7, #64]	; 0x40
 8002bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002bbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bbe:	e841 2300 	strex	r3, r2, [r1]
 8002bc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1e5      	bne.n	8002b96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	3314      	adds	r3, #20
 8002bd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	e853 3f00 	ldrex	r3, [r3]
 8002bd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	f023 0301 	bic.w	r3, r3, #1
 8002be0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	3314      	adds	r3, #20
 8002be8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bf2:	e841 2300 	strex	r3, r2, [r1]
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1e5      	bne.n	8002bca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d119      	bne.n	8002c3a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	330c      	adds	r3, #12
 8002c0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	e853 3f00 	ldrex	r3, [r3]
 8002c14:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f023 0310 	bic.w	r3, r3, #16
 8002c1c:	647b      	str	r3, [r7, #68]	; 0x44
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	330c      	adds	r3, #12
 8002c24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c26:	61ba      	str	r2, [r7, #24]
 8002c28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2a:	6979      	ldr	r1, [r7, #20]
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	e841 2300 	strex	r3, r2, [r1]
 8002c32:	613b      	str	r3, [r7, #16]
   return(result);
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1e5      	bne.n	8002c06 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c48:	bf00      	nop
 8002c4a:	3754      	adds	r7, #84	; 0x54
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr

08002c52 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b084      	sub	sp, #16
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f7ff fd4c 	bl	800270a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b085      	sub	sp, #20
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b21      	cmp	r3, #33	; 0x21
 8002c8c:	d13e      	bne.n	8002d0c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c96:	d114      	bne.n	8002cc2 <UART_Transmit_IT+0x48>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d110      	bne.n	8002cc2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cb4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	1c9a      	adds	r2, r3, #2
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	621a      	str	r2, [r3, #32]
 8002cc0:	e008      	b.n	8002cd4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	1c59      	adds	r1, r3, #1
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6211      	str	r1, [r2, #32]
 8002ccc:	781a      	ldrb	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10f      	bne.n	8002d08 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cf6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d06:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	e000      	b.n	8002d0e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d0c:	2302      	movs	r3, #2
  }
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d2e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7ff fccb 	bl	80026d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08c      	sub	sp, #48	; 0x30
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b22      	cmp	r3, #34	; 0x22
 8002d5a:	f040 80ae 	bne.w	8002eba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d66:	d117      	bne.n	8002d98 <UART_Receive_IT+0x50>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d113      	bne.n	8002d98 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d78:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d90:	1c9a      	adds	r2, r3, #2
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	629a      	str	r2, [r3, #40]	; 0x28
 8002d96:	e026      	b.n	8002de6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002daa:	d007      	beq.n	8002dbc <UART_Receive_IT+0x74>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10a      	bne.n	8002dca <UART_Receive_IT+0x82>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d106      	bne.n	8002dca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc6:	701a      	strb	r2, [r3, #0]
 8002dc8:	e008      	b.n	8002ddc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dda:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	4619      	mov	r1, r3
 8002df4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d15d      	bne.n	8002eb6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0220 	bic.w	r2, r2, #32
 8002e08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695a      	ldr	r2, [r3, #20]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0201 	bic.w	r2, r2, #1
 8002e28:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d135      	bne.n	8002eac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	330c      	adds	r3, #12
 8002e4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	e853 3f00 	ldrex	r3, [r3]
 8002e54:	613b      	str	r3, [r7, #16]
   return(result);
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	f023 0310 	bic.w	r3, r3, #16
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	330c      	adds	r3, #12
 8002e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e66:	623a      	str	r2, [r7, #32]
 8002e68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6a:	69f9      	ldr	r1, [r7, #28]
 8002e6c:	6a3a      	ldr	r2, [r7, #32]
 8002e6e:	e841 2300 	strex	r3, r2, [r1]
 8002e72:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1e5      	bne.n	8002e46 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0310 	and.w	r3, r3, #16
 8002e84:	2b10      	cmp	r3, #16
 8002e86:	d10a      	bne.n	8002e9e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff fc39 	bl	800271c <HAL_UARTEx_RxEventCallback>
 8002eaa:	e002      	b.n	8002eb2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff fc1a 	bl	80026e6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	e002      	b.n	8002ebc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	e000      	b.n	8002ebc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002eba:	2302      	movs	r3, #2
  }
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3730      	adds	r7, #48	; 0x30
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002efe:	f023 030c 	bic.w	r3, r3, #12
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	68b9      	ldr	r1, [r7, #8]
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699a      	ldr	r2, [r3, #24]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a2c      	ldr	r2, [pc, #176]	; (8002fd8 <UART_SetConfig+0x114>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d103      	bne.n	8002f34 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f2c:	f7fe ff96 	bl	8001e5c <HAL_RCC_GetPCLK2Freq>
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	e002      	b.n	8002f3a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f34:	f7fe ff7e 	bl	8001e34 <HAL_RCC_GetPCLK1Freq>
 8002f38:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	009a      	lsls	r2, r3, #2
 8002f44:	441a      	add	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f50:	4a22      	ldr	r2, [pc, #136]	; (8002fdc <UART_SetConfig+0x118>)
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
 8002f56:	095b      	lsrs	r3, r3, #5
 8002f58:	0119      	lsls	r1, r3, #4
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	009a      	lsls	r2, r3, #2
 8002f64:	441a      	add	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f70:	4b1a      	ldr	r3, [pc, #104]	; (8002fdc <UART_SetConfig+0x118>)
 8002f72:	fba3 0302 	umull	r0, r3, r3, r2
 8002f76:	095b      	lsrs	r3, r3, #5
 8002f78:	2064      	movs	r0, #100	; 0x64
 8002f7a:	fb00 f303 	mul.w	r3, r0, r3
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	3332      	adds	r3, #50	; 0x32
 8002f84:	4a15      	ldr	r2, [pc, #84]	; (8002fdc <UART_SetConfig+0x118>)
 8002f86:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8a:	095b      	lsrs	r3, r3, #5
 8002f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f90:	4419      	add	r1, r3
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	4613      	mov	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	009a      	lsls	r2, r3, #2
 8002f9c:	441a      	add	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <UART_SetConfig+0x118>)
 8002faa:	fba3 0302 	umull	r0, r3, r3, r2
 8002fae:	095b      	lsrs	r3, r3, #5
 8002fb0:	2064      	movs	r0, #100	; 0x64
 8002fb2:	fb00 f303 	mul.w	r3, r0, r3
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	3332      	adds	r3, #50	; 0x32
 8002fbc:	4a07      	ldr	r2, [pc, #28]	; (8002fdc <UART_SetConfig+0x118>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	f003 020f 	and.w	r2, r3, #15
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	440a      	add	r2, r1
 8002fce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002fd0:	bf00      	nop
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40013800 	.word	0x40013800
 8002fdc:	51eb851f 	.word	0x51eb851f

08002fe0 <__errno>:
 8002fe0:	4b01      	ldr	r3, [pc, #4]	; (8002fe8 <__errno+0x8>)
 8002fe2:	6818      	ldr	r0, [r3, #0]
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	2000000c 	.word	0x2000000c

08002fec <__libc_init_array>:
 8002fec:	b570      	push	{r4, r5, r6, lr}
 8002fee:	2600      	movs	r6, #0
 8002ff0:	4d0c      	ldr	r5, [pc, #48]	; (8003024 <__libc_init_array+0x38>)
 8002ff2:	4c0d      	ldr	r4, [pc, #52]	; (8003028 <__libc_init_array+0x3c>)
 8002ff4:	1b64      	subs	r4, r4, r5
 8002ff6:	10a4      	asrs	r4, r4, #2
 8002ff8:	42a6      	cmp	r6, r4
 8002ffa:	d109      	bne.n	8003010 <__libc_init_array+0x24>
 8002ffc:	f001 f82c 	bl	8004058 <_init>
 8003000:	2600      	movs	r6, #0
 8003002:	4d0a      	ldr	r5, [pc, #40]	; (800302c <__libc_init_array+0x40>)
 8003004:	4c0a      	ldr	r4, [pc, #40]	; (8003030 <__libc_init_array+0x44>)
 8003006:	1b64      	subs	r4, r4, r5
 8003008:	10a4      	asrs	r4, r4, #2
 800300a:	42a6      	cmp	r6, r4
 800300c:	d105      	bne.n	800301a <__libc_init_array+0x2e>
 800300e:	bd70      	pop	{r4, r5, r6, pc}
 8003010:	f855 3b04 	ldr.w	r3, [r5], #4
 8003014:	4798      	blx	r3
 8003016:	3601      	adds	r6, #1
 8003018:	e7ee      	b.n	8002ff8 <__libc_init_array+0xc>
 800301a:	f855 3b04 	ldr.w	r3, [r5], #4
 800301e:	4798      	blx	r3
 8003020:	3601      	adds	r6, #1
 8003022:	e7f2      	b.n	800300a <__libc_init_array+0x1e>
 8003024:	0800419c 	.word	0x0800419c
 8003028:	0800419c 	.word	0x0800419c
 800302c:	0800419c 	.word	0x0800419c
 8003030:	080041a0 	.word	0x080041a0

08003034 <memset>:
 8003034:	4603      	mov	r3, r0
 8003036:	4402      	add	r2, r0
 8003038:	4293      	cmp	r3, r2
 800303a:	d100      	bne.n	800303e <memset+0xa>
 800303c:	4770      	bx	lr
 800303e:	f803 1b01 	strb.w	r1, [r3], #1
 8003042:	e7f9      	b.n	8003038 <memset+0x4>

08003044 <iprintf>:
 8003044:	b40f      	push	{r0, r1, r2, r3}
 8003046:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <iprintf+0x2c>)
 8003048:	b513      	push	{r0, r1, r4, lr}
 800304a:	681c      	ldr	r4, [r3, #0]
 800304c:	b124      	cbz	r4, 8003058 <iprintf+0x14>
 800304e:	69a3      	ldr	r3, [r4, #24]
 8003050:	b913      	cbnz	r3, 8003058 <iprintf+0x14>
 8003052:	4620      	mov	r0, r4
 8003054:	f000 fa5a 	bl	800350c <__sinit>
 8003058:	ab05      	add	r3, sp, #20
 800305a:	4620      	mov	r0, r4
 800305c:	9a04      	ldr	r2, [sp, #16]
 800305e:	68a1      	ldr	r1, [r4, #8]
 8003060:	9301      	str	r3, [sp, #4]
 8003062:	f000 fc5d 	bl	8003920 <_vfiprintf_r>
 8003066:	b002      	add	sp, #8
 8003068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800306c:	b004      	add	sp, #16
 800306e:	4770      	bx	lr
 8003070:	2000000c 	.word	0x2000000c

08003074 <_puts_r>:
 8003074:	b570      	push	{r4, r5, r6, lr}
 8003076:	460e      	mov	r6, r1
 8003078:	4605      	mov	r5, r0
 800307a:	b118      	cbz	r0, 8003084 <_puts_r+0x10>
 800307c:	6983      	ldr	r3, [r0, #24]
 800307e:	b90b      	cbnz	r3, 8003084 <_puts_r+0x10>
 8003080:	f000 fa44 	bl	800350c <__sinit>
 8003084:	69ab      	ldr	r3, [r5, #24]
 8003086:	68ac      	ldr	r4, [r5, #8]
 8003088:	b913      	cbnz	r3, 8003090 <_puts_r+0x1c>
 800308a:	4628      	mov	r0, r5
 800308c:	f000 fa3e 	bl	800350c <__sinit>
 8003090:	4b2c      	ldr	r3, [pc, #176]	; (8003144 <_puts_r+0xd0>)
 8003092:	429c      	cmp	r4, r3
 8003094:	d120      	bne.n	80030d8 <_puts_r+0x64>
 8003096:	686c      	ldr	r4, [r5, #4]
 8003098:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800309a:	07db      	lsls	r3, r3, #31
 800309c:	d405      	bmi.n	80030aa <_puts_r+0x36>
 800309e:	89a3      	ldrh	r3, [r4, #12]
 80030a0:	0598      	lsls	r0, r3, #22
 80030a2:	d402      	bmi.n	80030aa <_puts_r+0x36>
 80030a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030a6:	f000 facf 	bl	8003648 <__retarget_lock_acquire_recursive>
 80030aa:	89a3      	ldrh	r3, [r4, #12]
 80030ac:	0719      	lsls	r1, r3, #28
 80030ae:	d51d      	bpl.n	80030ec <_puts_r+0x78>
 80030b0:	6923      	ldr	r3, [r4, #16]
 80030b2:	b1db      	cbz	r3, 80030ec <_puts_r+0x78>
 80030b4:	3e01      	subs	r6, #1
 80030b6:	68a3      	ldr	r3, [r4, #8]
 80030b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80030bc:	3b01      	subs	r3, #1
 80030be:	60a3      	str	r3, [r4, #8]
 80030c0:	bb39      	cbnz	r1, 8003112 <_puts_r+0x9e>
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	da38      	bge.n	8003138 <_puts_r+0xc4>
 80030c6:	4622      	mov	r2, r4
 80030c8:	210a      	movs	r1, #10
 80030ca:	4628      	mov	r0, r5
 80030cc:	f000 f848 	bl	8003160 <__swbuf_r>
 80030d0:	3001      	adds	r0, #1
 80030d2:	d011      	beq.n	80030f8 <_puts_r+0x84>
 80030d4:	250a      	movs	r5, #10
 80030d6:	e011      	b.n	80030fc <_puts_r+0x88>
 80030d8:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <_puts_r+0xd4>)
 80030da:	429c      	cmp	r4, r3
 80030dc:	d101      	bne.n	80030e2 <_puts_r+0x6e>
 80030de:	68ac      	ldr	r4, [r5, #8]
 80030e0:	e7da      	b.n	8003098 <_puts_r+0x24>
 80030e2:	4b1a      	ldr	r3, [pc, #104]	; (800314c <_puts_r+0xd8>)
 80030e4:	429c      	cmp	r4, r3
 80030e6:	bf08      	it	eq
 80030e8:	68ec      	ldreq	r4, [r5, #12]
 80030ea:	e7d5      	b.n	8003098 <_puts_r+0x24>
 80030ec:	4621      	mov	r1, r4
 80030ee:	4628      	mov	r0, r5
 80030f0:	f000 f888 	bl	8003204 <__swsetup_r>
 80030f4:	2800      	cmp	r0, #0
 80030f6:	d0dd      	beq.n	80030b4 <_puts_r+0x40>
 80030f8:	f04f 35ff 	mov.w	r5, #4294967295
 80030fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030fe:	07da      	lsls	r2, r3, #31
 8003100:	d405      	bmi.n	800310e <_puts_r+0x9a>
 8003102:	89a3      	ldrh	r3, [r4, #12]
 8003104:	059b      	lsls	r3, r3, #22
 8003106:	d402      	bmi.n	800310e <_puts_r+0x9a>
 8003108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800310a:	f000 fa9e 	bl	800364a <__retarget_lock_release_recursive>
 800310e:	4628      	mov	r0, r5
 8003110:	bd70      	pop	{r4, r5, r6, pc}
 8003112:	2b00      	cmp	r3, #0
 8003114:	da04      	bge.n	8003120 <_puts_r+0xac>
 8003116:	69a2      	ldr	r2, [r4, #24]
 8003118:	429a      	cmp	r2, r3
 800311a:	dc06      	bgt.n	800312a <_puts_r+0xb6>
 800311c:	290a      	cmp	r1, #10
 800311e:	d004      	beq.n	800312a <_puts_r+0xb6>
 8003120:	6823      	ldr	r3, [r4, #0]
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	6022      	str	r2, [r4, #0]
 8003126:	7019      	strb	r1, [r3, #0]
 8003128:	e7c5      	b.n	80030b6 <_puts_r+0x42>
 800312a:	4622      	mov	r2, r4
 800312c:	4628      	mov	r0, r5
 800312e:	f000 f817 	bl	8003160 <__swbuf_r>
 8003132:	3001      	adds	r0, #1
 8003134:	d1bf      	bne.n	80030b6 <_puts_r+0x42>
 8003136:	e7df      	b.n	80030f8 <_puts_r+0x84>
 8003138:	250a      	movs	r5, #10
 800313a:	6823      	ldr	r3, [r4, #0]
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	6022      	str	r2, [r4, #0]
 8003140:	701d      	strb	r5, [r3, #0]
 8003142:	e7db      	b.n	80030fc <_puts_r+0x88>
 8003144:	08004128 	.word	0x08004128
 8003148:	08004148 	.word	0x08004148
 800314c:	08004108 	.word	0x08004108

08003150 <puts>:
 8003150:	4b02      	ldr	r3, [pc, #8]	; (800315c <puts+0xc>)
 8003152:	4601      	mov	r1, r0
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	f7ff bf8d 	b.w	8003074 <_puts_r>
 800315a:	bf00      	nop
 800315c:	2000000c 	.word	0x2000000c

08003160 <__swbuf_r>:
 8003160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003162:	460e      	mov	r6, r1
 8003164:	4614      	mov	r4, r2
 8003166:	4605      	mov	r5, r0
 8003168:	b118      	cbz	r0, 8003172 <__swbuf_r+0x12>
 800316a:	6983      	ldr	r3, [r0, #24]
 800316c:	b90b      	cbnz	r3, 8003172 <__swbuf_r+0x12>
 800316e:	f000 f9cd 	bl	800350c <__sinit>
 8003172:	4b21      	ldr	r3, [pc, #132]	; (80031f8 <__swbuf_r+0x98>)
 8003174:	429c      	cmp	r4, r3
 8003176:	d12b      	bne.n	80031d0 <__swbuf_r+0x70>
 8003178:	686c      	ldr	r4, [r5, #4]
 800317a:	69a3      	ldr	r3, [r4, #24]
 800317c:	60a3      	str	r3, [r4, #8]
 800317e:	89a3      	ldrh	r3, [r4, #12]
 8003180:	071a      	lsls	r2, r3, #28
 8003182:	d52f      	bpl.n	80031e4 <__swbuf_r+0x84>
 8003184:	6923      	ldr	r3, [r4, #16]
 8003186:	b36b      	cbz	r3, 80031e4 <__swbuf_r+0x84>
 8003188:	6923      	ldr	r3, [r4, #16]
 800318a:	6820      	ldr	r0, [r4, #0]
 800318c:	b2f6      	uxtb	r6, r6
 800318e:	1ac0      	subs	r0, r0, r3
 8003190:	6963      	ldr	r3, [r4, #20]
 8003192:	4637      	mov	r7, r6
 8003194:	4283      	cmp	r3, r0
 8003196:	dc04      	bgt.n	80031a2 <__swbuf_r+0x42>
 8003198:	4621      	mov	r1, r4
 800319a:	4628      	mov	r0, r5
 800319c:	f000 f922 	bl	80033e4 <_fflush_r>
 80031a0:	bb30      	cbnz	r0, 80031f0 <__swbuf_r+0x90>
 80031a2:	68a3      	ldr	r3, [r4, #8]
 80031a4:	3001      	adds	r0, #1
 80031a6:	3b01      	subs	r3, #1
 80031a8:	60a3      	str	r3, [r4, #8]
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	6022      	str	r2, [r4, #0]
 80031b0:	701e      	strb	r6, [r3, #0]
 80031b2:	6963      	ldr	r3, [r4, #20]
 80031b4:	4283      	cmp	r3, r0
 80031b6:	d004      	beq.n	80031c2 <__swbuf_r+0x62>
 80031b8:	89a3      	ldrh	r3, [r4, #12]
 80031ba:	07db      	lsls	r3, r3, #31
 80031bc:	d506      	bpl.n	80031cc <__swbuf_r+0x6c>
 80031be:	2e0a      	cmp	r6, #10
 80031c0:	d104      	bne.n	80031cc <__swbuf_r+0x6c>
 80031c2:	4621      	mov	r1, r4
 80031c4:	4628      	mov	r0, r5
 80031c6:	f000 f90d 	bl	80033e4 <_fflush_r>
 80031ca:	b988      	cbnz	r0, 80031f0 <__swbuf_r+0x90>
 80031cc:	4638      	mov	r0, r7
 80031ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031d0:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <__swbuf_r+0x9c>)
 80031d2:	429c      	cmp	r4, r3
 80031d4:	d101      	bne.n	80031da <__swbuf_r+0x7a>
 80031d6:	68ac      	ldr	r4, [r5, #8]
 80031d8:	e7cf      	b.n	800317a <__swbuf_r+0x1a>
 80031da:	4b09      	ldr	r3, [pc, #36]	; (8003200 <__swbuf_r+0xa0>)
 80031dc:	429c      	cmp	r4, r3
 80031de:	bf08      	it	eq
 80031e0:	68ec      	ldreq	r4, [r5, #12]
 80031e2:	e7ca      	b.n	800317a <__swbuf_r+0x1a>
 80031e4:	4621      	mov	r1, r4
 80031e6:	4628      	mov	r0, r5
 80031e8:	f000 f80c 	bl	8003204 <__swsetup_r>
 80031ec:	2800      	cmp	r0, #0
 80031ee:	d0cb      	beq.n	8003188 <__swbuf_r+0x28>
 80031f0:	f04f 37ff 	mov.w	r7, #4294967295
 80031f4:	e7ea      	b.n	80031cc <__swbuf_r+0x6c>
 80031f6:	bf00      	nop
 80031f8:	08004128 	.word	0x08004128
 80031fc:	08004148 	.word	0x08004148
 8003200:	08004108 	.word	0x08004108

08003204 <__swsetup_r>:
 8003204:	4b32      	ldr	r3, [pc, #200]	; (80032d0 <__swsetup_r+0xcc>)
 8003206:	b570      	push	{r4, r5, r6, lr}
 8003208:	681d      	ldr	r5, [r3, #0]
 800320a:	4606      	mov	r6, r0
 800320c:	460c      	mov	r4, r1
 800320e:	b125      	cbz	r5, 800321a <__swsetup_r+0x16>
 8003210:	69ab      	ldr	r3, [r5, #24]
 8003212:	b913      	cbnz	r3, 800321a <__swsetup_r+0x16>
 8003214:	4628      	mov	r0, r5
 8003216:	f000 f979 	bl	800350c <__sinit>
 800321a:	4b2e      	ldr	r3, [pc, #184]	; (80032d4 <__swsetup_r+0xd0>)
 800321c:	429c      	cmp	r4, r3
 800321e:	d10f      	bne.n	8003240 <__swsetup_r+0x3c>
 8003220:	686c      	ldr	r4, [r5, #4]
 8003222:	89a3      	ldrh	r3, [r4, #12]
 8003224:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003228:	0719      	lsls	r1, r3, #28
 800322a:	d42c      	bmi.n	8003286 <__swsetup_r+0x82>
 800322c:	06dd      	lsls	r5, r3, #27
 800322e:	d411      	bmi.n	8003254 <__swsetup_r+0x50>
 8003230:	2309      	movs	r3, #9
 8003232:	6033      	str	r3, [r6, #0]
 8003234:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003238:	f04f 30ff 	mov.w	r0, #4294967295
 800323c:	81a3      	strh	r3, [r4, #12]
 800323e:	e03e      	b.n	80032be <__swsetup_r+0xba>
 8003240:	4b25      	ldr	r3, [pc, #148]	; (80032d8 <__swsetup_r+0xd4>)
 8003242:	429c      	cmp	r4, r3
 8003244:	d101      	bne.n	800324a <__swsetup_r+0x46>
 8003246:	68ac      	ldr	r4, [r5, #8]
 8003248:	e7eb      	b.n	8003222 <__swsetup_r+0x1e>
 800324a:	4b24      	ldr	r3, [pc, #144]	; (80032dc <__swsetup_r+0xd8>)
 800324c:	429c      	cmp	r4, r3
 800324e:	bf08      	it	eq
 8003250:	68ec      	ldreq	r4, [r5, #12]
 8003252:	e7e6      	b.n	8003222 <__swsetup_r+0x1e>
 8003254:	0758      	lsls	r0, r3, #29
 8003256:	d512      	bpl.n	800327e <__swsetup_r+0x7a>
 8003258:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800325a:	b141      	cbz	r1, 800326e <__swsetup_r+0x6a>
 800325c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003260:	4299      	cmp	r1, r3
 8003262:	d002      	beq.n	800326a <__swsetup_r+0x66>
 8003264:	4630      	mov	r0, r6
 8003266:	f000 fa57 	bl	8003718 <_free_r>
 800326a:	2300      	movs	r3, #0
 800326c:	6363      	str	r3, [r4, #52]	; 0x34
 800326e:	89a3      	ldrh	r3, [r4, #12]
 8003270:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003274:	81a3      	strh	r3, [r4, #12]
 8003276:	2300      	movs	r3, #0
 8003278:	6063      	str	r3, [r4, #4]
 800327a:	6923      	ldr	r3, [r4, #16]
 800327c:	6023      	str	r3, [r4, #0]
 800327e:	89a3      	ldrh	r3, [r4, #12]
 8003280:	f043 0308 	orr.w	r3, r3, #8
 8003284:	81a3      	strh	r3, [r4, #12]
 8003286:	6923      	ldr	r3, [r4, #16]
 8003288:	b94b      	cbnz	r3, 800329e <__swsetup_r+0x9a>
 800328a:	89a3      	ldrh	r3, [r4, #12]
 800328c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003294:	d003      	beq.n	800329e <__swsetup_r+0x9a>
 8003296:	4621      	mov	r1, r4
 8003298:	4630      	mov	r0, r6
 800329a:	f000 f9fd 	bl	8003698 <__smakebuf_r>
 800329e:	89a0      	ldrh	r0, [r4, #12]
 80032a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032a4:	f010 0301 	ands.w	r3, r0, #1
 80032a8:	d00a      	beq.n	80032c0 <__swsetup_r+0xbc>
 80032aa:	2300      	movs	r3, #0
 80032ac:	60a3      	str	r3, [r4, #8]
 80032ae:	6963      	ldr	r3, [r4, #20]
 80032b0:	425b      	negs	r3, r3
 80032b2:	61a3      	str	r3, [r4, #24]
 80032b4:	6923      	ldr	r3, [r4, #16]
 80032b6:	b943      	cbnz	r3, 80032ca <__swsetup_r+0xc6>
 80032b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80032bc:	d1ba      	bne.n	8003234 <__swsetup_r+0x30>
 80032be:	bd70      	pop	{r4, r5, r6, pc}
 80032c0:	0781      	lsls	r1, r0, #30
 80032c2:	bf58      	it	pl
 80032c4:	6963      	ldrpl	r3, [r4, #20]
 80032c6:	60a3      	str	r3, [r4, #8]
 80032c8:	e7f4      	b.n	80032b4 <__swsetup_r+0xb0>
 80032ca:	2000      	movs	r0, #0
 80032cc:	e7f7      	b.n	80032be <__swsetup_r+0xba>
 80032ce:	bf00      	nop
 80032d0:	2000000c 	.word	0x2000000c
 80032d4:	08004128 	.word	0x08004128
 80032d8:	08004148 	.word	0x08004148
 80032dc:	08004108 	.word	0x08004108

080032e0 <__sflush_r>:
 80032e0:	898a      	ldrh	r2, [r1, #12]
 80032e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032e4:	4605      	mov	r5, r0
 80032e6:	0710      	lsls	r0, r2, #28
 80032e8:	460c      	mov	r4, r1
 80032ea:	d457      	bmi.n	800339c <__sflush_r+0xbc>
 80032ec:	684b      	ldr	r3, [r1, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	dc04      	bgt.n	80032fc <__sflush_r+0x1c>
 80032f2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	dc01      	bgt.n	80032fc <__sflush_r+0x1c>
 80032f8:	2000      	movs	r0, #0
 80032fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032fe:	2e00      	cmp	r6, #0
 8003300:	d0fa      	beq.n	80032f8 <__sflush_r+0x18>
 8003302:	2300      	movs	r3, #0
 8003304:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003308:	682f      	ldr	r7, [r5, #0]
 800330a:	602b      	str	r3, [r5, #0]
 800330c:	d032      	beq.n	8003374 <__sflush_r+0x94>
 800330e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003310:	89a3      	ldrh	r3, [r4, #12]
 8003312:	075a      	lsls	r2, r3, #29
 8003314:	d505      	bpl.n	8003322 <__sflush_r+0x42>
 8003316:	6863      	ldr	r3, [r4, #4]
 8003318:	1ac0      	subs	r0, r0, r3
 800331a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800331c:	b10b      	cbz	r3, 8003322 <__sflush_r+0x42>
 800331e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003320:	1ac0      	subs	r0, r0, r3
 8003322:	2300      	movs	r3, #0
 8003324:	4602      	mov	r2, r0
 8003326:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003328:	4628      	mov	r0, r5
 800332a:	6a21      	ldr	r1, [r4, #32]
 800332c:	47b0      	blx	r6
 800332e:	1c43      	adds	r3, r0, #1
 8003330:	89a3      	ldrh	r3, [r4, #12]
 8003332:	d106      	bne.n	8003342 <__sflush_r+0x62>
 8003334:	6829      	ldr	r1, [r5, #0]
 8003336:	291d      	cmp	r1, #29
 8003338:	d82c      	bhi.n	8003394 <__sflush_r+0xb4>
 800333a:	4a29      	ldr	r2, [pc, #164]	; (80033e0 <__sflush_r+0x100>)
 800333c:	40ca      	lsrs	r2, r1
 800333e:	07d6      	lsls	r6, r2, #31
 8003340:	d528      	bpl.n	8003394 <__sflush_r+0xb4>
 8003342:	2200      	movs	r2, #0
 8003344:	6062      	str	r2, [r4, #4]
 8003346:	6922      	ldr	r2, [r4, #16]
 8003348:	04d9      	lsls	r1, r3, #19
 800334a:	6022      	str	r2, [r4, #0]
 800334c:	d504      	bpl.n	8003358 <__sflush_r+0x78>
 800334e:	1c42      	adds	r2, r0, #1
 8003350:	d101      	bne.n	8003356 <__sflush_r+0x76>
 8003352:	682b      	ldr	r3, [r5, #0]
 8003354:	b903      	cbnz	r3, 8003358 <__sflush_r+0x78>
 8003356:	6560      	str	r0, [r4, #84]	; 0x54
 8003358:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800335a:	602f      	str	r7, [r5, #0]
 800335c:	2900      	cmp	r1, #0
 800335e:	d0cb      	beq.n	80032f8 <__sflush_r+0x18>
 8003360:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003364:	4299      	cmp	r1, r3
 8003366:	d002      	beq.n	800336e <__sflush_r+0x8e>
 8003368:	4628      	mov	r0, r5
 800336a:	f000 f9d5 	bl	8003718 <_free_r>
 800336e:	2000      	movs	r0, #0
 8003370:	6360      	str	r0, [r4, #52]	; 0x34
 8003372:	e7c2      	b.n	80032fa <__sflush_r+0x1a>
 8003374:	6a21      	ldr	r1, [r4, #32]
 8003376:	2301      	movs	r3, #1
 8003378:	4628      	mov	r0, r5
 800337a:	47b0      	blx	r6
 800337c:	1c41      	adds	r1, r0, #1
 800337e:	d1c7      	bne.n	8003310 <__sflush_r+0x30>
 8003380:	682b      	ldr	r3, [r5, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0c4      	beq.n	8003310 <__sflush_r+0x30>
 8003386:	2b1d      	cmp	r3, #29
 8003388:	d001      	beq.n	800338e <__sflush_r+0xae>
 800338a:	2b16      	cmp	r3, #22
 800338c:	d101      	bne.n	8003392 <__sflush_r+0xb2>
 800338e:	602f      	str	r7, [r5, #0]
 8003390:	e7b2      	b.n	80032f8 <__sflush_r+0x18>
 8003392:	89a3      	ldrh	r3, [r4, #12]
 8003394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003398:	81a3      	strh	r3, [r4, #12]
 800339a:	e7ae      	b.n	80032fa <__sflush_r+0x1a>
 800339c:	690f      	ldr	r7, [r1, #16]
 800339e:	2f00      	cmp	r7, #0
 80033a0:	d0aa      	beq.n	80032f8 <__sflush_r+0x18>
 80033a2:	0793      	lsls	r3, r2, #30
 80033a4:	bf18      	it	ne
 80033a6:	2300      	movne	r3, #0
 80033a8:	680e      	ldr	r6, [r1, #0]
 80033aa:	bf08      	it	eq
 80033ac:	694b      	ldreq	r3, [r1, #20]
 80033ae:	1bf6      	subs	r6, r6, r7
 80033b0:	600f      	str	r7, [r1, #0]
 80033b2:	608b      	str	r3, [r1, #8]
 80033b4:	2e00      	cmp	r6, #0
 80033b6:	dd9f      	ble.n	80032f8 <__sflush_r+0x18>
 80033b8:	4633      	mov	r3, r6
 80033ba:	463a      	mov	r2, r7
 80033bc:	4628      	mov	r0, r5
 80033be:	6a21      	ldr	r1, [r4, #32]
 80033c0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80033c4:	47e0      	blx	ip
 80033c6:	2800      	cmp	r0, #0
 80033c8:	dc06      	bgt.n	80033d8 <__sflush_r+0xf8>
 80033ca:	89a3      	ldrh	r3, [r4, #12]
 80033cc:	f04f 30ff 	mov.w	r0, #4294967295
 80033d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033d4:	81a3      	strh	r3, [r4, #12]
 80033d6:	e790      	b.n	80032fa <__sflush_r+0x1a>
 80033d8:	4407      	add	r7, r0
 80033da:	1a36      	subs	r6, r6, r0
 80033dc:	e7ea      	b.n	80033b4 <__sflush_r+0xd4>
 80033de:	bf00      	nop
 80033e0:	20400001 	.word	0x20400001

080033e4 <_fflush_r>:
 80033e4:	b538      	push	{r3, r4, r5, lr}
 80033e6:	690b      	ldr	r3, [r1, #16]
 80033e8:	4605      	mov	r5, r0
 80033ea:	460c      	mov	r4, r1
 80033ec:	b913      	cbnz	r3, 80033f4 <_fflush_r+0x10>
 80033ee:	2500      	movs	r5, #0
 80033f0:	4628      	mov	r0, r5
 80033f2:	bd38      	pop	{r3, r4, r5, pc}
 80033f4:	b118      	cbz	r0, 80033fe <_fflush_r+0x1a>
 80033f6:	6983      	ldr	r3, [r0, #24]
 80033f8:	b90b      	cbnz	r3, 80033fe <_fflush_r+0x1a>
 80033fa:	f000 f887 	bl	800350c <__sinit>
 80033fe:	4b14      	ldr	r3, [pc, #80]	; (8003450 <_fflush_r+0x6c>)
 8003400:	429c      	cmp	r4, r3
 8003402:	d11b      	bne.n	800343c <_fflush_r+0x58>
 8003404:	686c      	ldr	r4, [r5, #4]
 8003406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0ef      	beq.n	80033ee <_fflush_r+0xa>
 800340e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003410:	07d0      	lsls	r0, r2, #31
 8003412:	d404      	bmi.n	800341e <_fflush_r+0x3a>
 8003414:	0599      	lsls	r1, r3, #22
 8003416:	d402      	bmi.n	800341e <_fflush_r+0x3a>
 8003418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800341a:	f000 f915 	bl	8003648 <__retarget_lock_acquire_recursive>
 800341e:	4628      	mov	r0, r5
 8003420:	4621      	mov	r1, r4
 8003422:	f7ff ff5d 	bl	80032e0 <__sflush_r>
 8003426:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003428:	4605      	mov	r5, r0
 800342a:	07da      	lsls	r2, r3, #31
 800342c:	d4e0      	bmi.n	80033f0 <_fflush_r+0xc>
 800342e:	89a3      	ldrh	r3, [r4, #12]
 8003430:	059b      	lsls	r3, r3, #22
 8003432:	d4dd      	bmi.n	80033f0 <_fflush_r+0xc>
 8003434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003436:	f000 f908 	bl	800364a <__retarget_lock_release_recursive>
 800343a:	e7d9      	b.n	80033f0 <_fflush_r+0xc>
 800343c:	4b05      	ldr	r3, [pc, #20]	; (8003454 <_fflush_r+0x70>)
 800343e:	429c      	cmp	r4, r3
 8003440:	d101      	bne.n	8003446 <_fflush_r+0x62>
 8003442:	68ac      	ldr	r4, [r5, #8]
 8003444:	e7df      	b.n	8003406 <_fflush_r+0x22>
 8003446:	4b04      	ldr	r3, [pc, #16]	; (8003458 <_fflush_r+0x74>)
 8003448:	429c      	cmp	r4, r3
 800344a:	bf08      	it	eq
 800344c:	68ec      	ldreq	r4, [r5, #12]
 800344e:	e7da      	b.n	8003406 <_fflush_r+0x22>
 8003450:	08004128 	.word	0x08004128
 8003454:	08004148 	.word	0x08004148
 8003458:	08004108 	.word	0x08004108

0800345c <std>:
 800345c:	2300      	movs	r3, #0
 800345e:	b510      	push	{r4, lr}
 8003460:	4604      	mov	r4, r0
 8003462:	e9c0 3300 	strd	r3, r3, [r0]
 8003466:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800346a:	6083      	str	r3, [r0, #8]
 800346c:	8181      	strh	r1, [r0, #12]
 800346e:	6643      	str	r3, [r0, #100]	; 0x64
 8003470:	81c2      	strh	r2, [r0, #14]
 8003472:	6183      	str	r3, [r0, #24]
 8003474:	4619      	mov	r1, r3
 8003476:	2208      	movs	r2, #8
 8003478:	305c      	adds	r0, #92	; 0x5c
 800347a:	f7ff fddb 	bl	8003034 <memset>
 800347e:	4b05      	ldr	r3, [pc, #20]	; (8003494 <std+0x38>)
 8003480:	6224      	str	r4, [r4, #32]
 8003482:	6263      	str	r3, [r4, #36]	; 0x24
 8003484:	4b04      	ldr	r3, [pc, #16]	; (8003498 <std+0x3c>)
 8003486:	62a3      	str	r3, [r4, #40]	; 0x28
 8003488:	4b04      	ldr	r3, [pc, #16]	; (800349c <std+0x40>)
 800348a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800348c:	4b04      	ldr	r3, [pc, #16]	; (80034a0 <std+0x44>)
 800348e:	6323      	str	r3, [r4, #48]	; 0x30
 8003490:	bd10      	pop	{r4, pc}
 8003492:	bf00      	nop
 8003494:	08003ecd 	.word	0x08003ecd
 8003498:	08003eef 	.word	0x08003eef
 800349c:	08003f27 	.word	0x08003f27
 80034a0:	08003f4b 	.word	0x08003f4b

080034a4 <_cleanup_r>:
 80034a4:	4901      	ldr	r1, [pc, #4]	; (80034ac <_cleanup_r+0x8>)
 80034a6:	f000 b8af 	b.w	8003608 <_fwalk_reent>
 80034aa:	bf00      	nop
 80034ac:	080033e5 	.word	0x080033e5

080034b0 <__sfmoreglue>:
 80034b0:	2268      	movs	r2, #104	; 0x68
 80034b2:	b570      	push	{r4, r5, r6, lr}
 80034b4:	1e4d      	subs	r5, r1, #1
 80034b6:	4355      	muls	r5, r2
 80034b8:	460e      	mov	r6, r1
 80034ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80034be:	f000 f993 	bl	80037e8 <_malloc_r>
 80034c2:	4604      	mov	r4, r0
 80034c4:	b140      	cbz	r0, 80034d8 <__sfmoreglue+0x28>
 80034c6:	2100      	movs	r1, #0
 80034c8:	e9c0 1600 	strd	r1, r6, [r0]
 80034cc:	300c      	adds	r0, #12
 80034ce:	60a0      	str	r0, [r4, #8]
 80034d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80034d4:	f7ff fdae 	bl	8003034 <memset>
 80034d8:	4620      	mov	r0, r4
 80034da:	bd70      	pop	{r4, r5, r6, pc}

080034dc <__sfp_lock_acquire>:
 80034dc:	4801      	ldr	r0, [pc, #4]	; (80034e4 <__sfp_lock_acquire+0x8>)
 80034de:	f000 b8b3 	b.w	8003648 <__retarget_lock_acquire_recursive>
 80034e2:	bf00      	nop
 80034e4:	200002b5 	.word	0x200002b5

080034e8 <__sfp_lock_release>:
 80034e8:	4801      	ldr	r0, [pc, #4]	; (80034f0 <__sfp_lock_release+0x8>)
 80034ea:	f000 b8ae 	b.w	800364a <__retarget_lock_release_recursive>
 80034ee:	bf00      	nop
 80034f0:	200002b5 	.word	0x200002b5

080034f4 <__sinit_lock_acquire>:
 80034f4:	4801      	ldr	r0, [pc, #4]	; (80034fc <__sinit_lock_acquire+0x8>)
 80034f6:	f000 b8a7 	b.w	8003648 <__retarget_lock_acquire_recursive>
 80034fa:	bf00      	nop
 80034fc:	200002b6 	.word	0x200002b6

08003500 <__sinit_lock_release>:
 8003500:	4801      	ldr	r0, [pc, #4]	; (8003508 <__sinit_lock_release+0x8>)
 8003502:	f000 b8a2 	b.w	800364a <__retarget_lock_release_recursive>
 8003506:	bf00      	nop
 8003508:	200002b6 	.word	0x200002b6

0800350c <__sinit>:
 800350c:	b510      	push	{r4, lr}
 800350e:	4604      	mov	r4, r0
 8003510:	f7ff fff0 	bl	80034f4 <__sinit_lock_acquire>
 8003514:	69a3      	ldr	r3, [r4, #24]
 8003516:	b11b      	cbz	r3, 8003520 <__sinit+0x14>
 8003518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800351c:	f7ff bff0 	b.w	8003500 <__sinit_lock_release>
 8003520:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003524:	6523      	str	r3, [r4, #80]	; 0x50
 8003526:	4b13      	ldr	r3, [pc, #76]	; (8003574 <__sinit+0x68>)
 8003528:	4a13      	ldr	r2, [pc, #76]	; (8003578 <__sinit+0x6c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	62a2      	str	r2, [r4, #40]	; 0x28
 800352e:	42a3      	cmp	r3, r4
 8003530:	bf08      	it	eq
 8003532:	2301      	moveq	r3, #1
 8003534:	4620      	mov	r0, r4
 8003536:	bf08      	it	eq
 8003538:	61a3      	streq	r3, [r4, #24]
 800353a:	f000 f81f 	bl	800357c <__sfp>
 800353e:	6060      	str	r0, [r4, #4]
 8003540:	4620      	mov	r0, r4
 8003542:	f000 f81b 	bl	800357c <__sfp>
 8003546:	60a0      	str	r0, [r4, #8]
 8003548:	4620      	mov	r0, r4
 800354a:	f000 f817 	bl	800357c <__sfp>
 800354e:	2200      	movs	r2, #0
 8003550:	2104      	movs	r1, #4
 8003552:	60e0      	str	r0, [r4, #12]
 8003554:	6860      	ldr	r0, [r4, #4]
 8003556:	f7ff ff81 	bl	800345c <std>
 800355a:	2201      	movs	r2, #1
 800355c:	2109      	movs	r1, #9
 800355e:	68a0      	ldr	r0, [r4, #8]
 8003560:	f7ff ff7c 	bl	800345c <std>
 8003564:	2202      	movs	r2, #2
 8003566:	2112      	movs	r1, #18
 8003568:	68e0      	ldr	r0, [r4, #12]
 800356a:	f7ff ff77 	bl	800345c <std>
 800356e:	2301      	movs	r3, #1
 8003570:	61a3      	str	r3, [r4, #24]
 8003572:	e7d1      	b.n	8003518 <__sinit+0xc>
 8003574:	08004104 	.word	0x08004104
 8003578:	080034a5 	.word	0x080034a5

0800357c <__sfp>:
 800357c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357e:	4607      	mov	r7, r0
 8003580:	f7ff ffac 	bl	80034dc <__sfp_lock_acquire>
 8003584:	4b1e      	ldr	r3, [pc, #120]	; (8003600 <__sfp+0x84>)
 8003586:	681e      	ldr	r6, [r3, #0]
 8003588:	69b3      	ldr	r3, [r6, #24]
 800358a:	b913      	cbnz	r3, 8003592 <__sfp+0x16>
 800358c:	4630      	mov	r0, r6
 800358e:	f7ff ffbd 	bl	800350c <__sinit>
 8003592:	3648      	adds	r6, #72	; 0x48
 8003594:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003598:	3b01      	subs	r3, #1
 800359a:	d503      	bpl.n	80035a4 <__sfp+0x28>
 800359c:	6833      	ldr	r3, [r6, #0]
 800359e:	b30b      	cbz	r3, 80035e4 <__sfp+0x68>
 80035a0:	6836      	ldr	r6, [r6, #0]
 80035a2:	e7f7      	b.n	8003594 <__sfp+0x18>
 80035a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80035a8:	b9d5      	cbnz	r5, 80035e0 <__sfp+0x64>
 80035aa:	4b16      	ldr	r3, [pc, #88]	; (8003604 <__sfp+0x88>)
 80035ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80035b0:	60e3      	str	r3, [r4, #12]
 80035b2:	6665      	str	r5, [r4, #100]	; 0x64
 80035b4:	f000 f847 	bl	8003646 <__retarget_lock_init_recursive>
 80035b8:	f7ff ff96 	bl	80034e8 <__sfp_lock_release>
 80035bc:	2208      	movs	r2, #8
 80035be:	4629      	mov	r1, r5
 80035c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80035c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80035c8:	6025      	str	r5, [r4, #0]
 80035ca:	61a5      	str	r5, [r4, #24]
 80035cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80035d0:	f7ff fd30 	bl	8003034 <memset>
 80035d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80035d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80035dc:	4620      	mov	r0, r4
 80035de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035e0:	3468      	adds	r4, #104	; 0x68
 80035e2:	e7d9      	b.n	8003598 <__sfp+0x1c>
 80035e4:	2104      	movs	r1, #4
 80035e6:	4638      	mov	r0, r7
 80035e8:	f7ff ff62 	bl	80034b0 <__sfmoreglue>
 80035ec:	4604      	mov	r4, r0
 80035ee:	6030      	str	r0, [r6, #0]
 80035f0:	2800      	cmp	r0, #0
 80035f2:	d1d5      	bne.n	80035a0 <__sfp+0x24>
 80035f4:	f7ff ff78 	bl	80034e8 <__sfp_lock_release>
 80035f8:	230c      	movs	r3, #12
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	e7ee      	b.n	80035dc <__sfp+0x60>
 80035fe:	bf00      	nop
 8003600:	08004104 	.word	0x08004104
 8003604:	ffff0001 	.word	0xffff0001

08003608 <_fwalk_reent>:
 8003608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800360c:	4606      	mov	r6, r0
 800360e:	4688      	mov	r8, r1
 8003610:	2700      	movs	r7, #0
 8003612:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003616:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800361a:	f1b9 0901 	subs.w	r9, r9, #1
 800361e:	d505      	bpl.n	800362c <_fwalk_reent+0x24>
 8003620:	6824      	ldr	r4, [r4, #0]
 8003622:	2c00      	cmp	r4, #0
 8003624:	d1f7      	bne.n	8003616 <_fwalk_reent+0xe>
 8003626:	4638      	mov	r0, r7
 8003628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800362c:	89ab      	ldrh	r3, [r5, #12]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d907      	bls.n	8003642 <_fwalk_reent+0x3a>
 8003632:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003636:	3301      	adds	r3, #1
 8003638:	d003      	beq.n	8003642 <_fwalk_reent+0x3a>
 800363a:	4629      	mov	r1, r5
 800363c:	4630      	mov	r0, r6
 800363e:	47c0      	blx	r8
 8003640:	4307      	orrs	r7, r0
 8003642:	3568      	adds	r5, #104	; 0x68
 8003644:	e7e9      	b.n	800361a <_fwalk_reent+0x12>

08003646 <__retarget_lock_init_recursive>:
 8003646:	4770      	bx	lr

08003648 <__retarget_lock_acquire_recursive>:
 8003648:	4770      	bx	lr

0800364a <__retarget_lock_release_recursive>:
 800364a:	4770      	bx	lr

0800364c <__swhatbuf_r>:
 800364c:	b570      	push	{r4, r5, r6, lr}
 800364e:	460e      	mov	r6, r1
 8003650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003654:	4614      	mov	r4, r2
 8003656:	2900      	cmp	r1, #0
 8003658:	461d      	mov	r5, r3
 800365a:	b096      	sub	sp, #88	; 0x58
 800365c:	da08      	bge.n	8003670 <__swhatbuf_r+0x24>
 800365e:	2200      	movs	r2, #0
 8003660:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003664:	602a      	str	r2, [r5, #0]
 8003666:	061a      	lsls	r2, r3, #24
 8003668:	d410      	bmi.n	800368c <__swhatbuf_r+0x40>
 800366a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800366e:	e00e      	b.n	800368e <__swhatbuf_r+0x42>
 8003670:	466a      	mov	r2, sp
 8003672:	f000 fc91 	bl	8003f98 <_fstat_r>
 8003676:	2800      	cmp	r0, #0
 8003678:	dbf1      	blt.n	800365e <__swhatbuf_r+0x12>
 800367a:	9a01      	ldr	r2, [sp, #4]
 800367c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003680:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003684:	425a      	negs	r2, r3
 8003686:	415a      	adcs	r2, r3
 8003688:	602a      	str	r2, [r5, #0]
 800368a:	e7ee      	b.n	800366a <__swhatbuf_r+0x1e>
 800368c:	2340      	movs	r3, #64	; 0x40
 800368e:	2000      	movs	r0, #0
 8003690:	6023      	str	r3, [r4, #0]
 8003692:	b016      	add	sp, #88	; 0x58
 8003694:	bd70      	pop	{r4, r5, r6, pc}
	...

08003698 <__smakebuf_r>:
 8003698:	898b      	ldrh	r3, [r1, #12]
 800369a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800369c:	079d      	lsls	r5, r3, #30
 800369e:	4606      	mov	r6, r0
 80036a0:	460c      	mov	r4, r1
 80036a2:	d507      	bpl.n	80036b4 <__smakebuf_r+0x1c>
 80036a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80036a8:	6023      	str	r3, [r4, #0]
 80036aa:	6123      	str	r3, [r4, #16]
 80036ac:	2301      	movs	r3, #1
 80036ae:	6163      	str	r3, [r4, #20]
 80036b0:	b002      	add	sp, #8
 80036b2:	bd70      	pop	{r4, r5, r6, pc}
 80036b4:	466a      	mov	r2, sp
 80036b6:	ab01      	add	r3, sp, #4
 80036b8:	f7ff ffc8 	bl	800364c <__swhatbuf_r>
 80036bc:	9900      	ldr	r1, [sp, #0]
 80036be:	4605      	mov	r5, r0
 80036c0:	4630      	mov	r0, r6
 80036c2:	f000 f891 	bl	80037e8 <_malloc_r>
 80036c6:	b948      	cbnz	r0, 80036dc <__smakebuf_r+0x44>
 80036c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036cc:	059a      	lsls	r2, r3, #22
 80036ce:	d4ef      	bmi.n	80036b0 <__smakebuf_r+0x18>
 80036d0:	f023 0303 	bic.w	r3, r3, #3
 80036d4:	f043 0302 	orr.w	r3, r3, #2
 80036d8:	81a3      	strh	r3, [r4, #12]
 80036da:	e7e3      	b.n	80036a4 <__smakebuf_r+0xc>
 80036dc:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <__smakebuf_r+0x7c>)
 80036de:	62b3      	str	r3, [r6, #40]	; 0x28
 80036e0:	89a3      	ldrh	r3, [r4, #12]
 80036e2:	6020      	str	r0, [r4, #0]
 80036e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036e8:	81a3      	strh	r3, [r4, #12]
 80036ea:	9b00      	ldr	r3, [sp, #0]
 80036ec:	6120      	str	r0, [r4, #16]
 80036ee:	6163      	str	r3, [r4, #20]
 80036f0:	9b01      	ldr	r3, [sp, #4]
 80036f2:	b15b      	cbz	r3, 800370c <__smakebuf_r+0x74>
 80036f4:	4630      	mov	r0, r6
 80036f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036fa:	f000 fc5f 	bl	8003fbc <_isatty_r>
 80036fe:	b128      	cbz	r0, 800370c <__smakebuf_r+0x74>
 8003700:	89a3      	ldrh	r3, [r4, #12]
 8003702:	f023 0303 	bic.w	r3, r3, #3
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	81a3      	strh	r3, [r4, #12]
 800370c:	89a0      	ldrh	r0, [r4, #12]
 800370e:	4305      	orrs	r5, r0
 8003710:	81a5      	strh	r5, [r4, #12]
 8003712:	e7cd      	b.n	80036b0 <__smakebuf_r+0x18>
 8003714:	080034a5 	.word	0x080034a5

08003718 <_free_r>:
 8003718:	b538      	push	{r3, r4, r5, lr}
 800371a:	4605      	mov	r5, r0
 800371c:	2900      	cmp	r1, #0
 800371e:	d040      	beq.n	80037a2 <_free_r+0x8a>
 8003720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003724:	1f0c      	subs	r4, r1, #4
 8003726:	2b00      	cmp	r3, #0
 8003728:	bfb8      	it	lt
 800372a:	18e4      	addlt	r4, r4, r3
 800372c:	f000 fc76 	bl	800401c <__malloc_lock>
 8003730:	4a1c      	ldr	r2, [pc, #112]	; (80037a4 <_free_r+0x8c>)
 8003732:	6813      	ldr	r3, [r2, #0]
 8003734:	b933      	cbnz	r3, 8003744 <_free_r+0x2c>
 8003736:	6063      	str	r3, [r4, #4]
 8003738:	6014      	str	r4, [r2, #0]
 800373a:	4628      	mov	r0, r5
 800373c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003740:	f000 bc72 	b.w	8004028 <__malloc_unlock>
 8003744:	42a3      	cmp	r3, r4
 8003746:	d908      	bls.n	800375a <_free_r+0x42>
 8003748:	6820      	ldr	r0, [r4, #0]
 800374a:	1821      	adds	r1, r4, r0
 800374c:	428b      	cmp	r3, r1
 800374e:	bf01      	itttt	eq
 8003750:	6819      	ldreq	r1, [r3, #0]
 8003752:	685b      	ldreq	r3, [r3, #4]
 8003754:	1809      	addeq	r1, r1, r0
 8003756:	6021      	streq	r1, [r4, #0]
 8003758:	e7ed      	b.n	8003736 <_free_r+0x1e>
 800375a:	461a      	mov	r2, r3
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	b10b      	cbz	r3, 8003764 <_free_r+0x4c>
 8003760:	42a3      	cmp	r3, r4
 8003762:	d9fa      	bls.n	800375a <_free_r+0x42>
 8003764:	6811      	ldr	r1, [r2, #0]
 8003766:	1850      	adds	r0, r2, r1
 8003768:	42a0      	cmp	r0, r4
 800376a:	d10b      	bne.n	8003784 <_free_r+0x6c>
 800376c:	6820      	ldr	r0, [r4, #0]
 800376e:	4401      	add	r1, r0
 8003770:	1850      	adds	r0, r2, r1
 8003772:	4283      	cmp	r3, r0
 8003774:	6011      	str	r1, [r2, #0]
 8003776:	d1e0      	bne.n	800373a <_free_r+0x22>
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	4401      	add	r1, r0
 800377e:	6011      	str	r1, [r2, #0]
 8003780:	6053      	str	r3, [r2, #4]
 8003782:	e7da      	b.n	800373a <_free_r+0x22>
 8003784:	d902      	bls.n	800378c <_free_r+0x74>
 8003786:	230c      	movs	r3, #12
 8003788:	602b      	str	r3, [r5, #0]
 800378a:	e7d6      	b.n	800373a <_free_r+0x22>
 800378c:	6820      	ldr	r0, [r4, #0]
 800378e:	1821      	adds	r1, r4, r0
 8003790:	428b      	cmp	r3, r1
 8003792:	bf01      	itttt	eq
 8003794:	6819      	ldreq	r1, [r3, #0]
 8003796:	685b      	ldreq	r3, [r3, #4]
 8003798:	1809      	addeq	r1, r1, r0
 800379a:	6021      	streq	r1, [r4, #0]
 800379c:	6063      	str	r3, [r4, #4]
 800379e:	6054      	str	r4, [r2, #4]
 80037a0:	e7cb      	b.n	800373a <_free_r+0x22>
 80037a2:	bd38      	pop	{r3, r4, r5, pc}
 80037a4:	200002b8 	.word	0x200002b8

080037a8 <sbrk_aligned>:
 80037a8:	b570      	push	{r4, r5, r6, lr}
 80037aa:	4e0e      	ldr	r6, [pc, #56]	; (80037e4 <sbrk_aligned+0x3c>)
 80037ac:	460c      	mov	r4, r1
 80037ae:	6831      	ldr	r1, [r6, #0]
 80037b0:	4605      	mov	r5, r0
 80037b2:	b911      	cbnz	r1, 80037ba <sbrk_aligned+0x12>
 80037b4:	f000 fb7a 	bl	8003eac <_sbrk_r>
 80037b8:	6030      	str	r0, [r6, #0]
 80037ba:	4621      	mov	r1, r4
 80037bc:	4628      	mov	r0, r5
 80037be:	f000 fb75 	bl	8003eac <_sbrk_r>
 80037c2:	1c43      	adds	r3, r0, #1
 80037c4:	d00a      	beq.n	80037dc <sbrk_aligned+0x34>
 80037c6:	1cc4      	adds	r4, r0, #3
 80037c8:	f024 0403 	bic.w	r4, r4, #3
 80037cc:	42a0      	cmp	r0, r4
 80037ce:	d007      	beq.n	80037e0 <sbrk_aligned+0x38>
 80037d0:	1a21      	subs	r1, r4, r0
 80037d2:	4628      	mov	r0, r5
 80037d4:	f000 fb6a 	bl	8003eac <_sbrk_r>
 80037d8:	3001      	adds	r0, #1
 80037da:	d101      	bne.n	80037e0 <sbrk_aligned+0x38>
 80037dc:	f04f 34ff 	mov.w	r4, #4294967295
 80037e0:	4620      	mov	r0, r4
 80037e2:	bd70      	pop	{r4, r5, r6, pc}
 80037e4:	200002bc 	.word	0x200002bc

080037e8 <_malloc_r>:
 80037e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037ec:	1ccd      	adds	r5, r1, #3
 80037ee:	f025 0503 	bic.w	r5, r5, #3
 80037f2:	3508      	adds	r5, #8
 80037f4:	2d0c      	cmp	r5, #12
 80037f6:	bf38      	it	cc
 80037f8:	250c      	movcc	r5, #12
 80037fa:	2d00      	cmp	r5, #0
 80037fc:	4607      	mov	r7, r0
 80037fe:	db01      	blt.n	8003804 <_malloc_r+0x1c>
 8003800:	42a9      	cmp	r1, r5
 8003802:	d905      	bls.n	8003810 <_malloc_r+0x28>
 8003804:	230c      	movs	r3, #12
 8003806:	2600      	movs	r6, #0
 8003808:	603b      	str	r3, [r7, #0]
 800380a:	4630      	mov	r0, r6
 800380c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003810:	4e2e      	ldr	r6, [pc, #184]	; (80038cc <_malloc_r+0xe4>)
 8003812:	f000 fc03 	bl	800401c <__malloc_lock>
 8003816:	6833      	ldr	r3, [r6, #0]
 8003818:	461c      	mov	r4, r3
 800381a:	bb34      	cbnz	r4, 800386a <_malloc_r+0x82>
 800381c:	4629      	mov	r1, r5
 800381e:	4638      	mov	r0, r7
 8003820:	f7ff ffc2 	bl	80037a8 <sbrk_aligned>
 8003824:	1c43      	adds	r3, r0, #1
 8003826:	4604      	mov	r4, r0
 8003828:	d14d      	bne.n	80038c6 <_malloc_r+0xde>
 800382a:	6834      	ldr	r4, [r6, #0]
 800382c:	4626      	mov	r6, r4
 800382e:	2e00      	cmp	r6, #0
 8003830:	d140      	bne.n	80038b4 <_malloc_r+0xcc>
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	4631      	mov	r1, r6
 8003836:	4638      	mov	r0, r7
 8003838:	eb04 0803 	add.w	r8, r4, r3
 800383c:	f000 fb36 	bl	8003eac <_sbrk_r>
 8003840:	4580      	cmp	r8, r0
 8003842:	d13a      	bne.n	80038ba <_malloc_r+0xd2>
 8003844:	6821      	ldr	r1, [r4, #0]
 8003846:	3503      	adds	r5, #3
 8003848:	1a6d      	subs	r5, r5, r1
 800384a:	f025 0503 	bic.w	r5, r5, #3
 800384e:	3508      	adds	r5, #8
 8003850:	2d0c      	cmp	r5, #12
 8003852:	bf38      	it	cc
 8003854:	250c      	movcc	r5, #12
 8003856:	4638      	mov	r0, r7
 8003858:	4629      	mov	r1, r5
 800385a:	f7ff ffa5 	bl	80037a8 <sbrk_aligned>
 800385e:	3001      	adds	r0, #1
 8003860:	d02b      	beq.n	80038ba <_malloc_r+0xd2>
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	442b      	add	r3, r5
 8003866:	6023      	str	r3, [r4, #0]
 8003868:	e00e      	b.n	8003888 <_malloc_r+0xa0>
 800386a:	6822      	ldr	r2, [r4, #0]
 800386c:	1b52      	subs	r2, r2, r5
 800386e:	d41e      	bmi.n	80038ae <_malloc_r+0xc6>
 8003870:	2a0b      	cmp	r2, #11
 8003872:	d916      	bls.n	80038a2 <_malloc_r+0xba>
 8003874:	1961      	adds	r1, r4, r5
 8003876:	42a3      	cmp	r3, r4
 8003878:	6025      	str	r5, [r4, #0]
 800387a:	bf18      	it	ne
 800387c:	6059      	strne	r1, [r3, #4]
 800387e:	6863      	ldr	r3, [r4, #4]
 8003880:	bf08      	it	eq
 8003882:	6031      	streq	r1, [r6, #0]
 8003884:	5162      	str	r2, [r4, r5]
 8003886:	604b      	str	r3, [r1, #4]
 8003888:	4638      	mov	r0, r7
 800388a:	f104 060b 	add.w	r6, r4, #11
 800388e:	f000 fbcb 	bl	8004028 <__malloc_unlock>
 8003892:	f026 0607 	bic.w	r6, r6, #7
 8003896:	1d23      	adds	r3, r4, #4
 8003898:	1af2      	subs	r2, r6, r3
 800389a:	d0b6      	beq.n	800380a <_malloc_r+0x22>
 800389c:	1b9b      	subs	r3, r3, r6
 800389e:	50a3      	str	r3, [r4, r2]
 80038a0:	e7b3      	b.n	800380a <_malloc_r+0x22>
 80038a2:	6862      	ldr	r2, [r4, #4]
 80038a4:	42a3      	cmp	r3, r4
 80038a6:	bf0c      	ite	eq
 80038a8:	6032      	streq	r2, [r6, #0]
 80038aa:	605a      	strne	r2, [r3, #4]
 80038ac:	e7ec      	b.n	8003888 <_malloc_r+0xa0>
 80038ae:	4623      	mov	r3, r4
 80038b0:	6864      	ldr	r4, [r4, #4]
 80038b2:	e7b2      	b.n	800381a <_malloc_r+0x32>
 80038b4:	4634      	mov	r4, r6
 80038b6:	6876      	ldr	r6, [r6, #4]
 80038b8:	e7b9      	b.n	800382e <_malloc_r+0x46>
 80038ba:	230c      	movs	r3, #12
 80038bc:	4638      	mov	r0, r7
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	f000 fbb2 	bl	8004028 <__malloc_unlock>
 80038c4:	e7a1      	b.n	800380a <_malloc_r+0x22>
 80038c6:	6025      	str	r5, [r4, #0]
 80038c8:	e7de      	b.n	8003888 <_malloc_r+0xa0>
 80038ca:	bf00      	nop
 80038cc:	200002b8 	.word	0x200002b8

080038d0 <__sfputc_r>:
 80038d0:	6893      	ldr	r3, [r2, #8]
 80038d2:	b410      	push	{r4}
 80038d4:	3b01      	subs	r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	6093      	str	r3, [r2, #8]
 80038da:	da07      	bge.n	80038ec <__sfputc_r+0x1c>
 80038dc:	6994      	ldr	r4, [r2, #24]
 80038de:	42a3      	cmp	r3, r4
 80038e0:	db01      	blt.n	80038e6 <__sfputc_r+0x16>
 80038e2:	290a      	cmp	r1, #10
 80038e4:	d102      	bne.n	80038ec <__sfputc_r+0x1c>
 80038e6:	bc10      	pop	{r4}
 80038e8:	f7ff bc3a 	b.w	8003160 <__swbuf_r>
 80038ec:	6813      	ldr	r3, [r2, #0]
 80038ee:	1c58      	adds	r0, r3, #1
 80038f0:	6010      	str	r0, [r2, #0]
 80038f2:	7019      	strb	r1, [r3, #0]
 80038f4:	4608      	mov	r0, r1
 80038f6:	bc10      	pop	{r4}
 80038f8:	4770      	bx	lr

080038fa <__sfputs_r>:
 80038fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fc:	4606      	mov	r6, r0
 80038fe:	460f      	mov	r7, r1
 8003900:	4614      	mov	r4, r2
 8003902:	18d5      	adds	r5, r2, r3
 8003904:	42ac      	cmp	r4, r5
 8003906:	d101      	bne.n	800390c <__sfputs_r+0x12>
 8003908:	2000      	movs	r0, #0
 800390a:	e007      	b.n	800391c <__sfputs_r+0x22>
 800390c:	463a      	mov	r2, r7
 800390e:	4630      	mov	r0, r6
 8003910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003914:	f7ff ffdc 	bl	80038d0 <__sfputc_r>
 8003918:	1c43      	adds	r3, r0, #1
 800391a:	d1f3      	bne.n	8003904 <__sfputs_r+0xa>
 800391c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003920 <_vfiprintf_r>:
 8003920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003924:	460d      	mov	r5, r1
 8003926:	4614      	mov	r4, r2
 8003928:	4698      	mov	r8, r3
 800392a:	4606      	mov	r6, r0
 800392c:	b09d      	sub	sp, #116	; 0x74
 800392e:	b118      	cbz	r0, 8003938 <_vfiprintf_r+0x18>
 8003930:	6983      	ldr	r3, [r0, #24]
 8003932:	b90b      	cbnz	r3, 8003938 <_vfiprintf_r+0x18>
 8003934:	f7ff fdea 	bl	800350c <__sinit>
 8003938:	4b89      	ldr	r3, [pc, #548]	; (8003b60 <_vfiprintf_r+0x240>)
 800393a:	429d      	cmp	r5, r3
 800393c:	d11b      	bne.n	8003976 <_vfiprintf_r+0x56>
 800393e:	6875      	ldr	r5, [r6, #4]
 8003940:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003942:	07d9      	lsls	r1, r3, #31
 8003944:	d405      	bmi.n	8003952 <_vfiprintf_r+0x32>
 8003946:	89ab      	ldrh	r3, [r5, #12]
 8003948:	059a      	lsls	r2, r3, #22
 800394a:	d402      	bmi.n	8003952 <_vfiprintf_r+0x32>
 800394c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800394e:	f7ff fe7b 	bl	8003648 <__retarget_lock_acquire_recursive>
 8003952:	89ab      	ldrh	r3, [r5, #12]
 8003954:	071b      	lsls	r3, r3, #28
 8003956:	d501      	bpl.n	800395c <_vfiprintf_r+0x3c>
 8003958:	692b      	ldr	r3, [r5, #16]
 800395a:	b9eb      	cbnz	r3, 8003998 <_vfiprintf_r+0x78>
 800395c:	4629      	mov	r1, r5
 800395e:	4630      	mov	r0, r6
 8003960:	f7ff fc50 	bl	8003204 <__swsetup_r>
 8003964:	b1c0      	cbz	r0, 8003998 <_vfiprintf_r+0x78>
 8003966:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003968:	07dc      	lsls	r4, r3, #31
 800396a:	d50e      	bpl.n	800398a <_vfiprintf_r+0x6a>
 800396c:	f04f 30ff 	mov.w	r0, #4294967295
 8003970:	b01d      	add	sp, #116	; 0x74
 8003972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003976:	4b7b      	ldr	r3, [pc, #492]	; (8003b64 <_vfiprintf_r+0x244>)
 8003978:	429d      	cmp	r5, r3
 800397a:	d101      	bne.n	8003980 <_vfiprintf_r+0x60>
 800397c:	68b5      	ldr	r5, [r6, #8]
 800397e:	e7df      	b.n	8003940 <_vfiprintf_r+0x20>
 8003980:	4b79      	ldr	r3, [pc, #484]	; (8003b68 <_vfiprintf_r+0x248>)
 8003982:	429d      	cmp	r5, r3
 8003984:	bf08      	it	eq
 8003986:	68f5      	ldreq	r5, [r6, #12]
 8003988:	e7da      	b.n	8003940 <_vfiprintf_r+0x20>
 800398a:	89ab      	ldrh	r3, [r5, #12]
 800398c:	0598      	lsls	r0, r3, #22
 800398e:	d4ed      	bmi.n	800396c <_vfiprintf_r+0x4c>
 8003990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003992:	f7ff fe5a 	bl	800364a <__retarget_lock_release_recursive>
 8003996:	e7e9      	b.n	800396c <_vfiprintf_r+0x4c>
 8003998:	2300      	movs	r3, #0
 800399a:	9309      	str	r3, [sp, #36]	; 0x24
 800399c:	2320      	movs	r3, #32
 800399e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039a2:	2330      	movs	r3, #48	; 0x30
 80039a4:	f04f 0901 	mov.w	r9, #1
 80039a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80039ac:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003b6c <_vfiprintf_r+0x24c>
 80039b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039b4:	4623      	mov	r3, r4
 80039b6:	469a      	mov	sl, r3
 80039b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039bc:	b10a      	cbz	r2, 80039c2 <_vfiprintf_r+0xa2>
 80039be:	2a25      	cmp	r2, #37	; 0x25
 80039c0:	d1f9      	bne.n	80039b6 <_vfiprintf_r+0x96>
 80039c2:	ebba 0b04 	subs.w	fp, sl, r4
 80039c6:	d00b      	beq.n	80039e0 <_vfiprintf_r+0xc0>
 80039c8:	465b      	mov	r3, fp
 80039ca:	4622      	mov	r2, r4
 80039cc:	4629      	mov	r1, r5
 80039ce:	4630      	mov	r0, r6
 80039d0:	f7ff ff93 	bl	80038fa <__sfputs_r>
 80039d4:	3001      	adds	r0, #1
 80039d6:	f000 80aa 	beq.w	8003b2e <_vfiprintf_r+0x20e>
 80039da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039dc:	445a      	add	r2, fp
 80039de:	9209      	str	r2, [sp, #36]	; 0x24
 80039e0:	f89a 3000 	ldrb.w	r3, [sl]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 80a2 	beq.w	8003b2e <_vfiprintf_r+0x20e>
 80039ea:	2300      	movs	r3, #0
 80039ec:	f04f 32ff 	mov.w	r2, #4294967295
 80039f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039f4:	f10a 0a01 	add.w	sl, sl, #1
 80039f8:	9304      	str	r3, [sp, #16]
 80039fa:	9307      	str	r3, [sp, #28]
 80039fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a00:	931a      	str	r3, [sp, #104]	; 0x68
 8003a02:	4654      	mov	r4, sl
 8003a04:	2205      	movs	r2, #5
 8003a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a0a:	4858      	ldr	r0, [pc, #352]	; (8003b6c <_vfiprintf_r+0x24c>)
 8003a0c:	f000 faf8 	bl	8004000 <memchr>
 8003a10:	9a04      	ldr	r2, [sp, #16]
 8003a12:	b9d8      	cbnz	r0, 8003a4c <_vfiprintf_r+0x12c>
 8003a14:	06d1      	lsls	r1, r2, #27
 8003a16:	bf44      	itt	mi
 8003a18:	2320      	movmi	r3, #32
 8003a1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a1e:	0713      	lsls	r3, r2, #28
 8003a20:	bf44      	itt	mi
 8003a22:	232b      	movmi	r3, #43	; 0x2b
 8003a24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a28:	f89a 3000 	ldrb.w	r3, [sl]
 8003a2c:	2b2a      	cmp	r3, #42	; 0x2a
 8003a2e:	d015      	beq.n	8003a5c <_vfiprintf_r+0x13c>
 8003a30:	4654      	mov	r4, sl
 8003a32:	2000      	movs	r0, #0
 8003a34:	f04f 0c0a 	mov.w	ip, #10
 8003a38:	9a07      	ldr	r2, [sp, #28]
 8003a3a:	4621      	mov	r1, r4
 8003a3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a40:	3b30      	subs	r3, #48	; 0x30
 8003a42:	2b09      	cmp	r3, #9
 8003a44:	d94e      	bls.n	8003ae4 <_vfiprintf_r+0x1c4>
 8003a46:	b1b0      	cbz	r0, 8003a76 <_vfiprintf_r+0x156>
 8003a48:	9207      	str	r2, [sp, #28]
 8003a4a:	e014      	b.n	8003a76 <_vfiprintf_r+0x156>
 8003a4c:	eba0 0308 	sub.w	r3, r0, r8
 8003a50:	fa09 f303 	lsl.w	r3, r9, r3
 8003a54:	4313      	orrs	r3, r2
 8003a56:	46a2      	mov	sl, r4
 8003a58:	9304      	str	r3, [sp, #16]
 8003a5a:	e7d2      	b.n	8003a02 <_vfiprintf_r+0xe2>
 8003a5c:	9b03      	ldr	r3, [sp, #12]
 8003a5e:	1d19      	adds	r1, r3, #4
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	9103      	str	r1, [sp, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	bfbb      	ittet	lt
 8003a68:	425b      	neglt	r3, r3
 8003a6a:	f042 0202 	orrlt.w	r2, r2, #2
 8003a6e:	9307      	strge	r3, [sp, #28]
 8003a70:	9307      	strlt	r3, [sp, #28]
 8003a72:	bfb8      	it	lt
 8003a74:	9204      	strlt	r2, [sp, #16]
 8003a76:	7823      	ldrb	r3, [r4, #0]
 8003a78:	2b2e      	cmp	r3, #46	; 0x2e
 8003a7a:	d10c      	bne.n	8003a96 <_vfiprintf_r+0x176>
 8003a7c:	7863      	ldrb	r3, [r4, #1]
 8003a7e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a80:	d135      	bne.n	8003aee <_vfiprintf_r+0x1ce>
 8003a82:	9b03      	ldr	r3, [sp, #12]
 8003a84:	3402      	adds	r4, #2
 8003a86:	1d1a      	adds	r2, r3, #4
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	9203      	str	r2, [sp, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	bfb8      	it	lt
 8003a90:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a94:	9305      	str	r3, [sp, #20]
 8003a96:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003b70 <_vfiprintf_r+0x250>
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	4650      	mov	r0, sl
 8003a9e:	7821      	ldrb	r1, [r4, #0]
 8003aa0:	f000 faae 	bl	8004000 <memchr>
 8003aa4:	b140      	cbz	r0, 8003ab8 <_vfiprintf_r+0x198>
 8003aa6:	2340      	movs	r3, #64	; 0x40
 8003aa8:	eba0 000a 	sub.w	r0, r0, sl
 8003aac:	fa03 f000 	lsl.w	r0, r3, r0
 8003ab0:	9b04      	ldr	r3, [sp, #16]
 8003ab2:	3401      	adds	r4, #1
 8003ab4:	4303      	orrs	r3, r0
 8003ab6:	9304      	str	r3, [sp, #16]
 8003ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003abc:	2206      	movs	r2, #6
 8003abe:	482d      	ldr	r0, [pc, #180]	; (8003b74 <_vfiprintf_r+0x254>)
 8003ac0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ac4:	f000 fa9c 	bl	8004000 <memchr>
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	d03f      	beq.n	8003b4c <_vfiprintf_r+0x22c>
 8003acc:	4b2a      	ldr	r3, [pc, #168]	; (8003b78 <_vfiprintf_r+0x258>)
 8003ace:	bb1b      	cbnz	r3, 8003b18 <_vfiprintf_r+0x1f8>
 8003ad0:	9b03      	ldr	r3, [sp, #12]
 8003ad2:	3307      	adds	r3, #7
 8003ad4:	f023 0307 	bic.w	r3, r3, #7
 8003ad8:	3308      	adds	r3, #8
 8003ada:	9303      	str	r3, [sp, #12]
 8003adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ade:	443b      	add	r3, r7
 8003ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ae2:	e767      	b.n	80039b4 <_vfiprintf_r+0x94>
 8003ae4:	460c      	mov	r4, r1
 8003ae6:	2001      	movs	r0, #1
 8003ae8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003aec:	e7a5      	b.n	8003a3a <_vfiprintf_r+0x11a>
 8003aee:	2300      	movs	r3, #0
 8003af0:	f04f 0c0a 	mov.w	ip, #10
 8003af4:	4619      	mov	r1, r3
 8003af6:	3401      	adds	r4, #1
 8003af8:	9305      	str	r3, [sp, #20]
 8003afa:	4620      	mov	r0, r4
 8003afc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b00:	3a30      	subs	r2, #48	; 0x30
 8003b02:	2a09      	cmp	r2, #9
 8003b04:	d903      	bls.n	8003b0e <_vfiprintf_r+0x1ee>
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0c5      	beq.n	8003a96 <_vfiprintf_r+0x176>
 8003b0a:	9105      	str	r1, [sp, #20]
 8003b0c:	e7c3      	b.n	8003a96 <_vfiprintf_r+0x176>
 8003b0e:	4604      	mov	r4, r0
 8003b10:	2301      	movs	r3, #1
 8003b12:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b16:	e7f0      	b.n	8003afa <_vfiprintf_r+0x1da>
 8003b18:	ab03      	add	r3, sp, #12
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	462a      	mov	r2, r5
 8003b1e:	4630      	mov	r0, r6
 8003b20:	4b16      	ldr	r3, [pc, #88]	; (8003b7c <_vfiprintf_r+0x25c>)
 8003b22:	a904      	add	r1, sp, #16
 8003b24:	f3af 8000 	nop.w
 8003b28:	4607      	mov	r7, r0
 8003b2a:	1c78      	adds	r0, r7, #1
 8003b2c:	d1d6      	bne.n	8003adc <_vfiprintf_r+0x1bc>
 8003b2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b30:	07d9      	lsls	r1, r3, #31
 8003b32:	d405      	bmi.n	8003b40 <_vfiprintf_r+0x220>
 8003b34:	89ab      	ldrh	r3, [r5, #12]
 8003b36:	059a      	lsls	r2, r3, #22
 8003b38:	d402      	bmi.n	8003b40 <_vfiprintf_r+0x220>
 8003b3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b3c:	f7ff fd85 	bl	800364a <__retarget_lock_release_recursive>
 8003b40:	89ab      	ldrh	r3, [r5, #12]
 8003b42:	065b      	lsls	r3, r3, #25
 8003b44:	f53f af12 	bmi.w	800396c <_vfiprintf_r+0x4c>
 8003b48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b4a:	e711      	b.n	8003970 <_vfiprintf_r+0x50>
 8003b4c:	ab03      	add	r3, sp, #12
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	462a      	mov	r2, r5
 8003b52:	4630      	mov	r0, r6
 8003b54:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <_vfiprintf_r+0x25c>)
 8003b56:	a904      	add	r1, sp, #16
 8003b58:	f000 f882 	bl	8003c60 <_printf_i>
 8003b5c:	e7e4      	b.n	8003b28 <_vfiprintf_r+0x208>
 8003b5e:	bf00      	nop
 8003b60:	08004128 	.word	0x08004128
 8003b64:	08004148 	.word	0x08004148
 8003b68:	08004108 	.word	0x08004108
 8003b6c:	08004168 	.word	0x08004168
 8003b70:	0800416e 	.word	0x0800416e
 8003b74:	08004172 	.word	0x08004172
 8003b78:	00000000 	.word	0x00000000
 8003b7c:	080038fb 	.word	0x080038fb

08003b80 <_printf_common>:
 8003b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b84:	4616      	mov	r6, r2
 8003b86:	4699      	mov	r9, r3
 8003b88:	688a      	ldr	r2, [r1, #8]
 8003b8a:	690b      	ldr	r3, [r1, #16]
 8003b8c:	4607      	mov	r7, r0
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	bfb8      	it	lt
 8003b92:	4613      	movlt	r3, r2
 8003b94:	6033      	str	r3, [r6, #0]
 8003b96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b9a:	460c      	mov	r4, r1
 8003b9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ba0:	b10a      	cbz	r2, 8003ba6 <_printf_common+0x26>
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	6033      	str	r3, [r6, #0]
 8003ba6:	6823      	ldr	r3, [r4, #0]
 8003ba8:	0699      	lsls	r1, r3, #26
 8003baa:	bf42      	ittt	mi
 8003bac:	6833      	ldrmi	r3, [r6, #0]
 8003bae:	3302      	addmi	r3, #2
 8003bb0:	6033      	strmi	r3, [r6, #0]
 8003bb2:	6825      	ldr	r5, [r4, #0]
 8003bb4:	f015 0506 	ands.w	r5, r5, #6
 8003bb8:	d106      	bne.n	8003bc8 <_printf_common+0x48>
 8003bba:	f104 0a19 	add.w	sl, r4, #25
 8003bbe:	68e3      	ldr	r3, [r4, #12]
 8003bc0:	6832      	ldr	r2, [r6, #0]
 8003bc2:	1a9b      	subs	r3, r3, r2
 8003bc4:	42ab      	cmp	r3, r5
 8003bc6:	dc28      	bgt.n	8003c1a <_printf_common+0x9a>
 8003bc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bcc:	1e13      	subs	r3, r2, #0
 8003bce:	6822      	ldr	r2, [r4, #0]
 8003bd0:	bf18      	it	ne
 8003bd2:	2301      	movne	r3, #1
 8003bd4:	0692      	lsls	r2, r2, #26
 8003bd6:	d42d      	bmi.n	8003c34 <_printf_common+0xb4>
 8003bd8:	4649      	mov	r1, r9
 8003bda:	4638      	mov	r0, r7
 8003bdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003be0:	47c0      	blx	r8
 8003be2:	3001      	adds	r0, #1
 8003be4:	d020      	beq.n	8003c28 <_printf_common+0xa8>
 8003be6:	6823      	ldr	r3, [r4, #0]
 8003be8:	68e5      	ldr	r5, [r4, #12]
 8003bea:	f003 0306 	and.w	r3, r3, #6
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	bf18      	it	ne
 8003bf2:	2500      	movne	r5, #0
 8003bf4:	6832      	ldr	r2, [r6, #0]
 8003bf6:	f04f 0600 	mov.w	r6, #0
 8003bfa:	68a3      	ldr	r3, [r4, #8]
 8003bfc:	bf08      	it	eq
 8003bfe:	1aad      	subeq	r5, r5, r2
 8003c00:	6922      	ldr	r2, [r4, #16]
 8003c02:	bf08      	it	eq
 8003c04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	bfc4      	itt	gt
 8003c0c:	1a9b      	subgt	r3, r3, r2
 8003c0e:	18ed      	addgt	r5, r5, r3
 8003c10:	341a      	adds	r4, #26
 8003c12:	42b5      	cmp	r5, r6
 8003c14:	d11a      	bne.n	8003c4c <_printf_common+0xcc>
 8003c16:	2000      	movs	r0, #0
 8003c18:	e008      	b.n	8003c2c <_printf_common+0xac>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	4652      	mov	r2, sl
 8003c1e:	4649      	mov	r1, r9
 8003c20:	4638      	mov	r0, r7
 8003c22:	47c0      	blx	r8
 8003c24:	3001      	adds	r0, #1
 8003c26:	d103      	bne.n	8003c30 <_printf_common+0xb0>
 8003c28:	f04f 30ff 	mov.w	r0, #4294967295
 8003c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c30:	3501      	adds	r5, #1
 8003c32:	e7c4      	b.n	8003bbe <_printf_common+0x3e>
 8003c34:	2030      	movs	r0, #48	; 0x30
 8003c36:	18e1      	adds	r1, r4, r3
 8003c38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c42:	4422      	add	r2, r4
 8003c44:	3302      	adds	r3, #2
 8003c46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c4a:	e7c5      	b.n	8003bd8 <_printf_common+0x58>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	4622      	mov	r2, r4
 8003c50:	4649      	mov	r1, r9
 8003c52:	4638      	mov	r0, r7
 8003c54:	47c0      	blx	r8
 8003c56:	3001      	adds	r0, #1
 8003c58:	d0e6      	beq.n	8003c28 <_printf_common+0xa8>
 8003c5a:	3601      	adds	r6, #1
 8003c5c:	e7d9      	b.n	8003c12 <_printf_common+0x92>
	...

08003c60 <_printf_i>:
 8003c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c64:	7e0f      	ldrb	r7, [r1, #24]
 8003c66:	4691      	mov	r9, r2
 8003c68:	2f78      	cmp	r7, #120	; 0x78
 8003c6a:	4680      	mov	r8, r0
 8003c6c:	460c      	mov	r4, r1
 8003c6e:	469a      	mov	sl, r3
 8003c70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c76:	d807      	bhi.n	8003c88 <_printf_i+0x28>
 8003c78:	2f62      	cmp	r7, #98	; 0x62
 8003c7a:	d80a      	bhi.n	8003c92 <_printf_i+0x32>
 8003c7c:	2f00      	cmp	r7, #0
 8003c7e:	f000 80d9 	beq.w	8003e34 <_printf_i+0x1d4>
 8003c82:	2f58      	cmp	r7, #88	; 0x58
 8003c84:	f000 80a4 	beq.w	8003dd0 <_printf_i+0x170>
 8003c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c90:	e03a      	b.n	8003d08 <_printf_i+0xa8>
 8003c92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c96:	2b15      	cmp	r3, #21
 8003c98:	d8f6      	bhi.n	8003c88 <_printf_i+0x28>
 8003c9a:	a101      	add	r1, pc, #4	; (adr r1, 8003ca0 <_printf_i+0x40>)
 8003c9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ca0:	08003cf9 	.word	0x08003cf9
 8003ca4:	08003d0d 	.word	0x08003d0d
 8003ca8:	08003c89 	.word	0x08003c89
 8003cac:	08003c89 	.word	0x08003c89
 8003cb0:	08003c89 	.word	0x08003c89
 8003cb4:	08003c89 	.word	0x08003c89
 8003cb8:	08003d0d 	.word	0x08003d0d
 8003cbc:	08003c89 	.word	0x08003c89
 8003cc0:	08003c89 	.word	0x08003c89
 8003cc4:	08003c89 	.word	0x08003c89
 8003cc8:	08003c89 	.word	0x08003c89
 8003ccc:	08003e1b 	.word	0x08003e1b
 8003cd0:	08003d3d 	.word	0x08003d3d
 8003cd4:	08003dfd 	.word	0x08003dfd
 8003cd8:	08003c89 	.word	0x08003c89
 8003cdc:	08003c89 	.word	0x08003c89
 8003ce0:	08003e3d 	.word	0x08003e3d
 8003ce4:	08003c89 	.word	0x08003c89
 8003ce8:	08003d3d 	.word	0x08003d3d
 8003cec:	08003c89 	.word	0x08003c89
 8003cf0:	08003c89 	.word	0x08003c89
 8003cf4:	08003e05 	.word	0x08003e05
 8003cf8:	682b      	ldr	r3, [r5, #0]
 8003cfa:	1d1a      	adds	r2, r3, #4
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	602a      	str	r2, [r5, #0]
 8003d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e0a4      	b.n	8003e56 <_printf_i+0x1f6>
 8003d0c:	6820      	ldr	r0, [r4, #0]
 8003d0e:	6829      	ldr	r1, [r5, #0]
 8003d10:	0606      	lsls	r6, r0, #24
 8003d12:	f101 0304 	add.w	r3, r1, #4
 8003d16:	d50a      	bpl.n	8003d2e <_printf_i+0xce>
 8003d18:	680e      	ldr	r6, [r1, #0]
 8003d1a:	602b      	str	r3, [r5, #0]
 8003d1c:	2e00      	cmp	r6, #0
 8003d1e:	da03      	bge.n	8003d28 <_printf_i+0xc8>
 8003d20:	232d      	movs	r3, #45	; 0x2d
 8003d22:	4276      	negs	r6, r6
 8003d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d28:	230a      	movs	r3, #10
 8003d2a:	485e      	ldr	r0, [pc, #376]	; (8003ea4 <_printf_i+0x244>)
 8003d2c:	e019      	b.n	8003d62 <_printf_i+0x102>
 8003d2e:	680e      	ldr	r6, [r1, #0]
 8003d30:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d34:	602b      	str	r3, [r5, #0]
 8003d36:	bf18      	it	ne
 8003d38:	b236      	sxthne	r6, r6
 8003d3a:	e7ef      	b.n	8003d1c <_printf_i+0xbc>
 8003d3c:	682b      	ldr	r3, [r5, #0]
 8003d3e:	6820      	ldr	r0, [r4, #0]
 8003d40:	1d19      	adds	r1, r3, #4
 8003d42:	6029      	str	r1, [r5, #0]
 8003d44:	0601      	lsls	r1, r0, #24
 8003d46:	d501      	bpl.n	8003d4c <_printf_i+0xec>
 8003d48:	681e      	ldr	r6, [r3, #0]
 8003d4a:	e002      	b.n	8003d52 <_printf_i+0xf2>
 8003d4c:	0646      	lsls	r6, r0, #25
 8003d4e:	d5fb      	bpl.n	8003d48 <_printf_i+0xe8>
 8003d50:	881e      	ldrh	r6, [r3, #0]
 8003d52:	2f6f      	cmp	r7, #111	; 0x6f
 8003d54:	bf0c      	ite	eq
 8003d56:	2308      	moveq	r3, #8
 8003d58:	230a      	movne	r3, #10
 8003d5a:	4852      	ldr	r0, [pc, #328]	; (8003ea4 <_printf_i+0x244>)
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d62:	6865      	ldr	r5, [r4, #4]
 8003d64:	2d00      	cmp	r5, #0
 8003d66:	bfa8      	it	ge
 8003d68:	6821      	ldrge	r1, [r4, #0]
 8003d6a:	60a5      	str	r5, [r4, #8]
 8003d6c:	bfa4      	itt	ge
 8003d6e:	f021 0104 	bicge.w	r1, r1, #4
 8003d72:	6021      	strge	r1, [r4, #0]
 8003d74:	b90e      	cbnz	r6, 8003d7a <_printf_i+0x11a>
 8003d76:	2d00      	cmp	r5, #0
 8003d78:	d04d      	beq.n	8003e16 <_printf_i+0x1b6>
 8003d7a:	4615      	mov	r5, r2
 8003d7c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d80:	fb03 6711 	mls	r7, r3, r1, r6
 8003d84:	5dc7      	ldrb	r7, [r0, r7]
 8003d86:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d8a:	4637      	mov	r7, r6
 8003d8c:	42bb      	cmp	r3, r7
 8003d8e:	460e      	mov	r6, r1
 8003d90:	d9f4      	bls.n	8003d7c <_printf_i+0x11c>
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d10b      	bne.n	8003dae <_printf_i+0x14e>
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	07de      	lsls	r6, r3, #31
 8003d9a:	d508      	bpl.n	8003dae <_printf_i+0x14e>
 8003d9c:	6923      	ldr	r3, [r4, #16]
 8003d9e:	6861      	ldr	r1, [r4, #4]
 8003da0:	4299      	cmp	r1, r3
 8003da2:	bfde      	ittt	le
 8003da4:	2330      	movle	r3, #48	; 0x30
 8003da6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003daa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003dae:	1b52      	subs	r2, r2, r5
 8003db0:	6122      	str	r2, [r4, #16]
 8003db2:	464b      	mov	r3, r9
 8003db4:	4621      	mov	r1, r4
 8003db6:	4640      	mov	r0, r8
 8003db8:	f8cd a000 	str.w	sl, [sp]
 8003dbc:	aa03      	add	r2, sp, #12
 8003dbe:	f7ff fedf 	bl	8003b80 <_printf_common>
 8003dc2:	3001      	adds	r0, #1
 8003dc4:	d14c      	bne.n	8003e60 <_printf_i+0x200>
 8003dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8003dca:	b004      	add	sp, #16
 8003dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dd0:	4834      	ldr	r0, [pc, #208]	; (8003ea4 <_printf_i+0x244>)
 8003dd2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003dd6:	6829      	ldr	r1, [r5, #0]
 8003dd8:	6823      	ldr	r3, [r4, #0]
 8003dda:	f851 6b04 	ldr.w	r6, [r1], #4
 8003dde:	6029      	str	r1, [r5, #0]
 8003de0:	061d      	lsls	r5, r3, #24
 8003de2:	d514      	bpl.n	8003e0e <_printf_i+0x1ae>
 8003de4:	07df      	lsls	r7, r3, #31
 8003de6:	bf44      	itt	mi
 8003de8:	f043 0320 	orrmi.w	r3, r3, #32
 8003dec:	6023      	strmi	r3, [r4, #0]
 8003dee:	b91e      	cbnz	r6, 8003df8 <_printf_i+0x198>
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	f023 0320 	bic.w	r3, r3, #32
 8003df6:	6023      	str	r3, [r4, #0]
 8003df8:	2310      	movs	r3, #16
 8003dfa:	e7af      	b.n	8003d5c <_printf_i+0xfc>
 8003dfc:	6823      	ldr	r3, [r4, #0]
 8003dfe:	f043 0320 	orr.w	r3, r3, #32
 8003e02:	6023      	str	r3, [r4, #0]
 8003e04:	2378      	movs	r3, #120	; 0x78
 8003e06:	4828      	ldr	r0, [pc, #160]	; (8003ea8 <_printf_i+0x248>)
 8003e08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e0c:	e7e3      	b.n	8003dd6 <_printf_i+0x176>
 8003e0e:	0659      	lsls	r1, r3, #25
 8003e10:	bf48      	it	mi
 8003e12:	b2b6      	uxthmi	r6, r6
 8003e14:	e7e6      	b.n	8003de4 <_printf_i+0x184>
 8003e16:	4615      	mov	r5, r2
 8003e18:	e7bb      	b.n	8003d92 <_printf_i+0x132>
 8003e1a:	682b      	ldr	r3, [r5, #0]
 8003e1c:	6826      	ldr	r6, [r4, #0]
 8003e1e:	1d18      	adds	r0, r3, #4
 8003e20:	6961      	ldr	r1, [r4, #20]
 8003e22:	6028      	str	r0, [r5, #0]
 8003e24:	0635      	lsls	r5, r6, #24
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	d501      	bpl.n	8003e2e <_printf_i+0x1ce>
 8003e2a:	6019      	str	r1, [r3, #0]
 8003e2c:	e002      	b.n	8003e34 <_printf_i+0x1d4>
 8003e2e:	0670      	lsls	r0, r6, #25
 8003e30:	d5fb      	bpl.n	8003e2a <_printf_i+0x1ca>
 8003e32:	8019      	strh	r1, [r3, #0]
 8003e34:	2300      	movs	r3, #0
 8003e36:	4615      	mov	r5, r2
 8003e38:	6123      	str	r3, [r4, #16]
 8003e3a:	e7ba      	b.n	8003db2 <_printf_i+0x152>
 8003e3c:	682b      	ldr	r3, [r5, #0]
 8003e3e:	2100      	movs	r1, #0
 8003e40:	1d1a      	adds	r2, r3, #4
 8003e42:	602a      	str	r2, [r5, #0]
 8003e44:	681d      	ldr	r5, [r3, #0]
 8003e46:	6862      	ldr	r2, [r4, #4]
 8003e48:	4628      	mov	r0, r5
 8003e4a:	f000 f8d9 	bl	8004000 <memchr>
 8003e4e:	b108      	cbz	r0, 8003e54 <_printf_i+0x1f4>
 8003e50:	1b40      	subs	r0, r0, r5
 8003e52:	6060      	str	r0, [r4, #4]
 8003e54:	6863      	ldr	r3, [r4, #4]
 8003e56:	6123      	str	r3, [r4, #16]
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e5e:	e7a8      	b.n	8003db2 <_printf_i+0x152>
 8003e60:	462a      	mov	r2, r5
 8003e62:	4649      	mov	r1, r9
 8003e64:	4640      	mov	r0, r8
 8003e66:	6923      	ldr	r3, [r4, #16]
 8003e68:	47d0      	blx	sl
 8003e6a:	3001      	adds	r0, #1
 8003e6c:	d0ab      	beq.n	8003dc6 <_printf_i+0x166>
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	079b      	lsls	r3, r3, #30
 8003e72:	d413      	bmi.n	8003e9c <_printf_i+0x23c>
 8003e74:	68e0      	ldr	r0, [r4, #12]
 8003e76:	9b03      	ldr	r3, [sp, #12]
 8003e78:	4298      	cmp	r0, r3
 8003e7a:	bfb8      	it	lt
 8003e7c:	4618      	movlt	r0, r3
 8003e7e:	e7a4      	b.n	8003dca <_printf_i+0x16a>
 8003e80:	2301      	movs	r3, #1
 8003e82:	4632      	mov	r2, r6
 8003e84:	4649      	mov	r1, r9
 8003e86:	4640      	mov	r0, r8
 8003e88:	47d0      	blx	sl
 8003e8a:	3001      	adds	r0, #1
 8003e8c:	d09b      	beq.n	8003dc6 <_printf_i+0x166>
 8003e8e:	3501      	adds	r5, #1
 8003e90:	68e3      	ldr	r3, [r4, #12]
 8003e92:	9903      	ldr	r1, [sp, #12]
 8003e94:	1a5b      	subs	r3, r3, r1
 8003e96:	42ab      	cmp	r3, r5
 8003e98:	dcf2      	bgt.n	8003e80 <_printf_i+0x220>
 8003e9a:	e7eb      	b.n	8003e74 <_printf_i+0x214>
 8003e9c:	2500      	movs	r5, #0
 8003e9e:	f104 0619 	add.w	r6, r4, #25
 8003ea2:	e7f5      	b.n	8003e90 <_printf_i+0x230>
 8003ea4:	08004179 	.word	0x08004179
 8003ea8:	0800418a 	.word	0x0800418a

08003eac <_sbrk_r>:
 8003eac:	b538      	push	{r3, r4, r5, lr}
 8003eae:	2300      	movs	r3, #0
 8003eb0:	4d05      	ldr	r5, [pc, #20]	; (8003ec8 <_sbrk_r+0x1c>)
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	4608      	mov	r0, r1
 8003eb6:	602b      	str	r3, [r5, #0]
 8003eb8:	f7fc fc26 	bl	8000708 <_sbrk>
 8003ebc:	1c43      	adds	r3, r0, #1
 8003ebe:	d102      	bne.n	8003ec6 <_sbrk_r+0x1a>
 8003ec0:	682b      	ldr	r3, [r5, #0]
 8003ec2:	b103      	cbz	r3, 8003ec6 <_sbrk_r+0x1a>
 8003ec4:	6023      	str	r3, [r4, #0]
 8003ec6:	bd38      	pop	{r3, r4, r5, pc}
 8003ec8:	200002c0 	.word	0x200002c0

08003ecc <__sread>:
 8003ecc:	b510      	push	{r4, lr}
 8003ece:	460c      	mov	r4, r1
 8003ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ed4:	f000 f8ae 	bl	8004034 <_read_r>
 8003ed8:	2800      	cmp	r0, #0
 8003eda:	bfab      	itete	ge
 8003edc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003ede:	89a3      	ldrhlt	r3, [r4, #12]
 8003ee0:	181b      	addge	r3, r3, r0
 8003ee2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ee6:	bfac      	ite	ge
 8003ee8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003eea:	81a3      	strhlt	r3, [r4, #12]
 8003eec:	bd10      	pop	{r4, pc}

08003eee <__swrite>:
 8003eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef2:	461f      	mov	r7, r3
 8003ef4:	898b      	ldrh	r3, [r1, #12]
 8003ef6:	4605      	mov	r5, r0
 8003ef8:	05db      	lsls	r3, r3, #23
 8003efa:	460c      	mov	r4, r1
 8003efc:	4616      	mov	r6, r2
 8003efe:	d505      	bpl.n	8003f0c <__swrite+0x1e>
 8003f00:	2302      	movs	r3, #2
 8003f02:	2200      	movs	r2, #0
 8003f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f08:	f000 f868 	bl	8003fdc <_lseek_r>
 8003f0c:	89a3      	ldrh	r3, [r4, #12]
 8003f0e:	4632      	mov	r2, r6
 8003f10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f14:	81a3      	strh	r3, [r4, #12]
 8003f16:	4628      	mov	r0, r5
 8003f18:	463b      	mov	r3, r7
 8003f1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f22:	f000 b817 	b.w	8003f54 <_write_r>

08003f26 <__sseek>:
 8003f26:	b510      	push	{r4, lr}
 8003f28:	460c      	mov	r4, r1
 8003f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f2e:	f000 f855 	bl	8003fdc <_lseek_r>
 8003f32:	1c43      	adds	r3, r0, #1
 8003f34:	89a3      	ldrh	r3, [r4, #12]
 8003f36:	bf15      	itete	ne
 8003f38:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f42:	81a3      	strheq	r3, [r4, #12]
 8003f44:	bf18      	it	ne
 8003f46:	81a3      	strhne	r3, [r4, #12]
 8003f48:	bd10      	pop	{r4, pc}

08003f4a <__sclose>:
 8003f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f4e:	f000 b813 	b.w	8003f78 <_close_r>
	...

08003f54 <_write_r>:
 8003f54:	b538      	push	{r3, r4, r5, lr}
 8003f56:	4604      	mov	r4, r0
 8003f58:	4608      	mov	r0, r1
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	4d05      	ldr	r5, [pc, #20]	; (8003f74 <_write_r+0x20>)
 8003f60:	602a      	str	r2, [r5, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	f7fc fb83 	bl	800066e <_write>
 8003f68:	1c43      	adds	r3, r0, #1
 8003f6a:	d102      	bne.n	8003f72 <_write_r+0x1e>
 8003f6c:	682b      	ldr	r3, [r5, #0]
 8003f6e:	b103      	cbz	r3, 8003f72 <_write_r+0x1e>
 8003f70:	6023      	str	r3, [r4, #0]
 8003f72:	bd38      	pop	{r3, r4, r5, pc}
 8003f74:	200002c0 	.word	0x200002c0

08003f78 <_close_r>:
 8003f78:	b538      	push	{r3, r4, r5, lr}
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	4d05      	ldr	r5, [pc, #20]	; (8003f94 <_close_r+0x1c>)
 8003f7e:	4604      	mov	r4, r0
 8003f80:	4608      	mov	r0, r1
 8003f82:	602b      	str	r3, [r5, #0]
 8003f84:	f7fc fb8f 	bl	80006a6 <_close>
 8003f88:	1c43      	adds	r3, r0, #1
 8003f8a:	d102      	bne.n	8003f92 <_close_r+0x1a>
 8003f8c:	682b      	ldr	r3, [r5, #0]
 8003f8e:	b103      	cbz	r3, 8003f92 <_close_r+0x1a>
 8003f90:	6023      	str	r3, [r4, #0]
 8003f92:	bd38      	pop	{r3, r4, r5, pc}
 8003f94:	200002c0 	.word	0x200002c0

08003f98 <_fstat_r>:
 8003f98:	b538      	push	{r3, r4, r5, lr}
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	4d06      	ldr	r5, [pc, #24]	; (8003fb8 <_fstat_r+0x20>)
 8003f9e:	4604      	mov	r4, r0
 8003fa0:	4608      	mov	r0, r1
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	602b      	str	r3, [r5, #0]
 8003fa6:	f7fc fb89 	bl	80006bc <_fstat>
 8003faa:	1c43      	adds	r3, r0, #1
 8003fac:	d102      	bne.n	8003fb4 <_fstat_r+0x1c>
 8003fae:	682b      	ldr	r3, [r5, #0]
 8003fb0:	b103      	cbz	r3, 8003fb4 <_fstat_r+0x1c>
 8003fb2:	6023      	str	r3, [r4, #0]
 8003fb4:	bd38      	pop	{r3, r4, r5, pc}
 8003fb6:	bf00      	nop
 8003fb8:	200002c0 	.word	0x200002c0

08003fbc <_isatty_r>:
 8003fbc:	b538      	push	{r3, r4, r5, lr}
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	4d05      	ldr	r5, [pc, #20]	; (8003fd8 <_isatty_r+0x1c>)
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	4608      	mov	r0, r1
 8003fc6:	602b      	str	r3, [r5, #0]
 8003fc8:	f7fc fb87 	bl	80006da <_isatty>
 8003fcc:	1c43      	adds	r3, r0, #1
 8003fce:	d102      	bne.n	8003fd6 <_isatty_r+0x1a>
 8003fd0:	682b      	ldr	r3, [r5, #0]
 8003fd2:	b103      	cbz	r3, 8003fd6 <_isatty_r+0x1a>
 8003fd4:	6023      	str	r3, [r4, #0]
 8003fd6:	bd38      	pop	{r3, r4, r5, pc}
 8003fd8:	200002c0 	.word	0x200002c0

08003fdc <_lseek_r>:
 8003fdc:	b538      	push	{r3, r4, r5, lr}
 8003fde:	4604      	mov	r4, r0
 8003fe0:	4608      	mov	r0, r1
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	4d05      	ldr	r5, [pc, #20]	; (8003ffc <_lseek_r+0x20>)
 8003fe8:	602a      	str	r2, [r5, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	f7fc fb7f 	bl	80006ee <_lseek>
 8003ff0:	1c43      	adds	r3, r0, #1
 8003ff2:	d102      	bne.n	8003ffa <_lseek_r+0x1e>
 8003ff4:	682b      	ldr	r3, [r5, #0]
 8003ff6:	b103      	cbz	r3, 8003ffa <_lseek_r+0x1e>
 8003ff8:	6023      	str	r3, [r4, #0]
 8003ffa:	bd38      	pop	{r3, r4, r5, pc}
 8003ffc:	200002c0 	.word	0x200002c0

08004000 <memchr>:
 8004000:	4603      	mov	r3, r0
 8004002:	b510      	push	{r4, lr}
 8004004:	b2c9      	uxtb	r1, r1
 8004006:	4402      	add	r2, r0
 8004008:	4293      	cmp	r3, r2
 800400a:	4618      	mov	r0, r3
 800400c:	d101      	bne.n	8004012 <memchr+0x12>
 800400e:	2000      	movs	r0, #0
 8004010:	e003      	b.n	800401a <memchr+0x1a>
 8004012:	7804      	ldrb	r4, [r0, #0]
 8004014:	3301      	adds	r3, #1
 8004016:	428c      	cmp	r4, r1
 8004018:	d1f6      	bne.n	8004008 <memchr+0x8>
 800401a:	bd10      	pop	{r4, pc}

0800401c <__malloc_lock>:
 800401c:	4801      	ldr	r0, [pc, #4]	; (8004024 <__malloc_lock+0x8>)
 800401e:	f7ff bb13 	b.w	8003648 <__retarget_lock_acquire_recursive>
 8004022:	bf00      	nop
 8004024:	200002b4 	.word	0x200002b4

08004028 <__malloc_unlock>:
 8004028:	4801      	ldr	r0, [pc, #4]	; (8004030 <__malloc_unlock+0x8>)
 800402a:	f7ff bb0e 	b.w	800364a <__retarget_lock_release_recursive>
 800402e:	bf00      	nop
 8004030:	200002b4 	.word	0x200002b4

08004034 <_read_r>:
 8004034:	b538      	push	{r3, r4, r5, lr}
 8004036:	4604      	mov	r4, r0
 8004038:	4608      	mov	r0, r1
 800403a:	4611      	mov	r1, r2
 800403c:	2200      	movs	r2, #0
 800403e:	4d05      	ldr	r5, [pc, #20]	; (8004054 <_read_r+0x20>)
 8004040:	602a      	str	r2, [r5, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	f7fc faf6 	bl	8000634 <_read>
 8004048:	1c43      	adds	r3, r0, #1
 800404a:	d102      	bne.n	8004052 <_read_r+0x1e>
 800404c:	682b      	ldr	r3, [r5, #0]
 800404e:	b103      	cbz	r3, 8004052 <_read_r+0x1e>
 8004050:	6023      	str	r3, [r4, #0]
 8004052:	bd38      	pop	{r3, r4, r5, pc}
 8004054:	200002c0 	.word	0x200002c0

08004058 <_init>:
 8004058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405a:	bf00      	nop
 800405c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800405e:	bc08      	pop	{r3}
 8004060:	469e      	mov	lr, r3
 8004062:	4770      	bx	lr

08004064 <_fini>:
 8004064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004066:	bf00      	nop
 8004068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406a:	bc08      	pop	{r3}
 800406c:	469e      	mov	lr, r3
 800406e:	4770      	bx	lr
